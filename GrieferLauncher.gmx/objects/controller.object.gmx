<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
init_constants()
room_speed = 60
hash = "V0"

life = 0

//config file
ini_open("Config/Config.ini")
if not ini_section_exists("Main")
{
    ini_write_string("Main","Version",hash)
    printf("::: defaulting Version to "+string(hash))
}
if ini_key_exists("Main","GameRunning")
{
    ini_key_delete("Main","GameRunning")
    printf("::: game had been left running(?) deleting the GameRunning ini key")
}
hash = ini_read_string("Main","Version","V0")
ini_close()

//networking data
receptions = 0
packets_received = 0
server_found = true

//login screen
title_scale = 1
title_scale_max = 1.25
title_scale_min = 1
title_text_timer = 0

serverURL = "http://www.puddlesquid.com:8080"
downloadURL = string_copy(working_directory,0,string_pos("AppData",working_directory)) + "ppData\Local\GrieferLauncher\Downloads\Griefer.exe"
downloadURL = string_replace_all(downloadURL,"\","/")
file = NO_HANDLE

display_set_gui_size(room_width,room_height)

random_seed = 210
instance_create(x,y,cursor)

alarm[0] = 1
alarm[1] = 60
initGrieferClient("http://www.puddlesquid.com:8080")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///close window after game launched


ini_open("Config/Config.ini")

if not ini_section_exists("Main")
    ini_write_string("Main","Version",hash)
    
if ini_key_exists("Main","GameRunning")
{
    printf("::: GameRunning Found!")
    ini_key_delete("Main","GameRunning")
    ini_close()
    game_end()
}
else
{
    //printf("::: GameRunning not found")
    ini_close()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>60</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///validate version with server

sendMessageStr("validate_hash",hash)
printf("::: sent hash "+string(hash)+" for validation")

wdir = working_directory
wdir = string_replace_all(wdir,"\","/")
setWorkingDir(wdir)

force_loading_popup = true
aID = popup_loading(WVIEW/2+32,HVIEW*3/4)
global.load_count --
force_loading_popup = false
aID.is_downloading = false
aID.is_checking = true
aID.text = aID.text_checking
aID.load_closable = false
aID.draw_fade = false
aID.fade_alpha = 0
aID.draw_gradient = false
aID.draw_rect = false
aID.highlightable = false
aID.alpha_max = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///receive transmissions
wait_counter = 0
life++

if life &gt; room_speed*1.5
while (genMessagesWaiting() and wait_counter &lt; 500000)
{
    receptions++
    
    wait_counter++
    genMessage = readGenMessage()
    if (isString("genMessage"))
        genVal = readGenValStr()
    else
        genVal = readGenValReal()
        
        //printf(genMessage+": "+genVal)
        
    switch (genMessage)
    {
        case "ack":
            packets_received++
        break
        
        case "validate_hash":
        
            if genVal != 1
            {
                printf("::: updates are needed!")
                download_updates()
            }
            else 
            {
                printf("::: game version is current! no updates needed")
                launch_game()
            }
        break   
        
        case "done_loading":
            if global.load_count &gt; 0 global.load_count --
            else global.load_count = 0
            
            printf("::: Done Loading! global.load_count --&gt; "+string(global.load_count))
            
            if not global.load_count
            {
                with modal_dialogue
                {
                    if is_loading and not is_downloading
                    {
                        fade_delay = 5
                    }
                }
            }
        break
        
        case "disconnect":
            printf(":::RECEIVED SERVER DISCONNECT")
            server_found = false
            //griefer_restart()
        break
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DETECT DOWNLOAD COMPLETE
if ds_map_find_value(async_load, "id") == file
{
   var status = ds_map_find_value(async_load, "status");
   if status == 0
   {
        printf("::: DOWNLOAD COMPLETE to: "+string(downloadURL))
        
        launch_game()
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw title and blood 
draw_set_font(fnt_title)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
var ts_lerp_real = 0.5
var ts_target = 1

var tit_y = 64*1.5

title.x = room_width/2+global.xoff
title.y = tit_y

ts_target = title_scale_min
    
title_scale = lerp(title_scale,ts_target,ts_lerp_real)

if abs(title_scale - ts_target) &lt; 0.05
    title_scale = ts_target
    
draw_text_ext_transformed(room_width/2+global.xoff,tit_y,"GRIEFER",32,room_width/2,title_scale,title_scale,0)

if title_scale = title_scale_max
{
    title_text_timer ++
    if title_text_timer &gt; 5
    {
        draw_set_font(fnt_hud)
        draw_set_color(c_black)
        draw_text_transformed(room_width/2+global.xoff,tit_y+64*1.5,"Grief Your Enemies . . . Grief Your Friends . . . Grief Yourself",global.notification_scale,global.notification_scale,0)
    }
} else title_text_timer = 0

if not instance_exists(modal_splat)
{
    //create the splats
    random_set_seed(random_seed)
    var total_splats = 12
    var splats = 0
    var splats_per_step = 1
    var bdelay = 6
    var binc = 4
    var xextra = 64*3
    var yextra = 0
    var l = title.x-sprite_get_width(spr_title)/2-xextra-global.xoff
    var r = title.x+sprite_get_width(spr_title)/2+xextra-global.xoff
    var t = title.y-sprite_get_height(spr_title)/2-yextra
    var b = title.y+sprite_get_height(spr_title)/2+yextra
    
    while (splats &lt; total_splats)
    {
        repeat (splats_per_step)
        {
            splats++
            
            splat = instance_create(random_range(l,r),random_range(t,b),modal_splat)
            splat.x = lerp(splat.x,l+r/2,0.5)
            splat.y = lerp(splat.y,t+b/2,0.5)
            splat.bind_to_global_xoff = true

            //if rtime() &gt; 30*5
            //    bdelay = 0

            splat.birth_delay = bdelay
            splat.depth = 1
            splat.scale_born = 0
            splat.scale_lerp_real = 0.1
        }
        bdelay += binc
    }
    
    //RANDOMIZE THE GAME!
    randomize()
    random_set_seed(random(1000000))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
