<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite401</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
stat_flag = FL_NORMAL

netvars = ds_map_create()

tabs[0] = "Competitive"
tabs[1] = "Bot Mode"
tabs[2] = "Leaderboards"

stat_tab = tabs[0]

//history chart
history_chart = NO_HANDLE

//working copy of YOUR stats to be displayed on the stats page
varWrite("ppl",-1)
varWrite("kdr",-1)
varWrite("wl",-1)
varWrite("kills",-1)
varWrite("deaths",-1)
varWrite("assists",-1)
varWrite("wins",-1)
varWrite("losses",-1)
varWrite("kill_streak",-1)
varWrite("win_streak",-1)
varWrite("global_rank",-1)
varWrite("rank",-1)
varWrite("xp",-1)
varWrite("time",-1)
varWrite("points",-1)

//arrays for YOUR personal stat labels
pstats[PSTAT_KILLS] = "kills"
pstats[PSTAT_DEATHS] = "deaths"
pstats[PSTAT_ASSISTS] = "assists"
pstats[PSTAT_WINS] = "wins"
pstats[PSTAT_LOSSES] = "losses"
pstats[PSTAT_KILL_STREAK] = "kill_streak"
pstats[PSTAT_WIN_STREAK] = "win_streak"
pstats[PSTAT_TIME] = "time"

len = getLength(pstats)

pstat_labels[len-1] = -5

for (var i=0; i&lt;len; i++)
{
    pstat_labels[i] = NO_HANDLE
}

pstat_vals[len-1] = -5
for (var i=0; i&lt;len; i++)
{
    pstat_vals[i] = NO_HANDLE
}

pstat_title = NO_HANDLE
leaderboards_title = NO_HANDLE

//used for kdr, wl, ppl computations
varWrite("kdr_history","")
varWrite("ppl_history","")
varWrite("win_history","")
varWrite("kills_valid",false)
varWrite("deaths_valid",false)
varWrite("assists_valid",false)
varWrite("wins_valid",false)
varWrite("losses_valid",false)
varWrite("points_valid",false)
update_kdr = false
update_wl = false
update_ppl = false

ppl_max = POINTS_KILL*10

//meters
meters[METER_KDR] = NO_HANDLE
meters[METER_WL] = NO_HANDLE
meters[METER_PPL] = NO_HANDLE
meters[METER_RANK] = NO_HANDLE

meter_stats[METER_KDR] = "kdr"
meter_stats[METER_WL] = "wl"
meter_stats[METER_PPL] = "ppl"
meter_stats[METER_RANK] = "rank"

meter_col_outs[METER_KDR] = web_hsv(0,100,100)
meter_col_outs[METER_WL] = web_hsv(207,100,100)
meter_col_outs[METER_PPL] = web_hsv(149,100,100)
meter_col_outs[METER_RANK] = web_hsv(0,0,0)

meter_col_ins[METER_KDR] = web_hsv(0,100,100)
meter_col_ins[METER_WL] = web_hsv(207,100,100)
meter_col_ins[METER_PPL] = web_hsv(149,100,100)
meter_col_ins[METER_RANK] = web_hsv(0,0,0)

meter_descs[METER_KDR] = "KDR"
meter_descs[METER_WL] = "W/L"
meter_descs[METER_PPL] = "PPL"
meter_descs[METER_RANK] = "Rank"

meter_radius = 64*3.5
meter_swath = 135
meter_ang_i = 90+meter_swath/2
meter_ang_f = 90-meter_swath/2
meter_ang_dif = abs(meter_ang_i - meter_ang_f)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set stat flag

if in_match() and net_manager.bot_match
    stat_flag = FL_BOT
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>manage stat page modals</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///manage stat tabs ---&gt; MUST BE FIRST IN STEP TO EXIT PROPERLY
if in_match() exit

if net_manager.menu_mode = "stats"
{
    if not instance_exists(bn_stat_tab)
    {
        
        
        w = 64*2.1
        h = 72
        
        birth_delay = 1
        hue = 255
        sat = 0
        val = 0
        top = 10+h
        left = room_width/2-w/2-10
        if instance_exists(bn_logout)
        {
            var l = bn_logout.left+bn_logout.width+5+10
            var dest = l//lerp(l,room_width,0.5)
            left = dest+w//bn_stats.left+bn_stats.width/2-w/2-10
            top = bn_logout.height/2+5+h/2
        }
        
        for (var i=0; i&lt;3; i++)
        {
            ID = instance_create(left,top,bn_stat_tab)
            ID.width = w
            ID.height = h
            ID.birth_delay = birth_delay
            
            ID.color = make_colour_hsv(hue,sat,val)
            ID.active_color = make_colour_hsv(148*255/360,91*255/100,51*255/100)
            
            ID.text_halign = fa_left
            ID.text_xoff = 36+5
            ID.image = icon_friends_small
            ID.stat_tab = tabs[i]
            ID.text = ID.stat_tab
            ID.text_yoff = -2
            ID.font = fnt_hud_small
            
            if stat_tab = tabs[i]
                ID.active = true
            
            birth_delay += 10
            
            left += w+10
        }
    }
}
else //not in stats mode
{
    if instance_exists(bn_stat_tab)
        with bn_stat_tab fade_out = true
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///manage stat modals + meters
if net_manager.menu_mode = "stats"
{
    switch (stat_tab)
    {
        //competitive
        case "Competitive":
            fade_modal(modal_table)
            if instance_exists(leaderboards_title)
            {
                fade_modal(leaderboards_title)
                leaderboards_title = NO_HANDLE
            }
            
            manage_meters()
        break
        
        //bot mode
        case "Bot Mode":
            fade_modal(modal_table)
            if instance_exists(leaderboards_title)
            {
                fade_modal(leaderboards_title)
                leaderboards_title = NO_HANDLE
            }
            
            manage_meters()
        break
        
        //leaderboards
        case "Leaderboards":
            if not instance_exists(modal_table)
            {
                leaderboards = instance_create(room_width*1/2,room_height*1/2+96,modal_table)
                sendMessageReal("get_global_stats",FL_NORMAL)
            }
            
            if not instance_exists(leaderboards_title)
            {
                //recreate title
                tit = instance_create(room_width/2,room_height*1/5,bn_slabel)
                leaderboards_title = tit
                tit.text = "Worldwide   Competitive   Leaderboards"
                tit.width = 64*17
                tit.height = 64
                tit.font = fnt_pstats_title
                tit.birth_delay = 10
                tit.text_color = c_dkgray
            }
        break
    }
}
else //not in stats mode
{
    fade_modal(modal_table)
    fade_modal(bn_slabel)
    fade_modal(modal_stat_history)
    
    history_chart = NO_HANDLE
    pstat_title = NO_HANDLE
    leaderboards_title = NO_HANDLE
    
    for (var i=0; i&lt;getLength(pstat_labels[i]); i++)
    {
        fade_modal(pstat_labels[i])
        pstat_labels[i] = NO_HANDLE
    }
    
    for (var i=0; i&lt;getLength(pstat_vals[i]); i++)
    {
        fade_modal(pstat_vals[i])
        pstat_vals[i] = NO_HANDLE
    }
    
    for (var i=0; i&lt;getLength(meters); i++)
    {
        fade_modal(meters[i])
        meters[i] = NO_HANDLE
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update kdr, wl, ppl sometimes

if update_kdr and varRead("kills_valid") and varRead("deaths_valid")
{
    update_kdr = false
    var kdr = truncate(varRead("kills")/max(1,varRead("deaths")),2)
    stat_update_real("kdr",kdr,stat_flag)
    varWrite("kdr",kdr)
}

if update_wl and varRead("wins_valid") and varRead("losses_valid")
{
    update_wl = false
    var wl = truncate(varRead("wins")/max(1,varRead("losses")),2)
    stat_update_real("wl",wl,stat_flag)
    varWrite("wl",wl)
}

if update_ppl and varRead("points_valid") and varRead("deaths_valid")
{
    update_ppl = false
    var ppl = truncate(varRead("points")/max(1,varRead("deaths")),2)
    stat_update_real("ppl",ppl,stat_flag)
    varWrite("ppl",ppl)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///match end stat updates

/* this is done in compute_winloss now
if in_match()
{
    match_end_stat_updates()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room start

//set stat_flag
stat_flag = FL_NORMAL
alarm[0] = 3
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
