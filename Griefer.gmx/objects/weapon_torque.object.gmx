<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weapon_generic</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>weapon_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Constants

//bot weapon selection
varWrite("lethality",-1)
varWrite("range_rating",64*8)
varWrite("range_trump",false)
varWrite("range_trump_distance",64*8)

//graphics
myCursor = cursor_torque
varWrite("sprite",spr_torque)
varWrite("name",global.torque)
varWrite("icon",spr_torque)
varWrite("bullet_icon",icon_bullet_long)
varWrite("pose",global.torque_pose)
varWrite("muzzle_offset",132)
varWrite("scale",global.torque_scale)
varWrite("flash",flash_torque_launch)

varWrite("sound_on",false)

varWrite("traj_gravity",2)
varWrite("traj_rigidity",3)
col_on = global.torque_col
col_off = c_white
varWrite("traj_color",col_off)   //trajectory main color
varWrite("traj_width",3)          //width of main segments
varWrite("traj_resolution",1)    //frames per segment
varWrite("traj_length",64*14)      //trajectory length
varWrite("traj_alpha1",1)         //starting alpha
varWrite("traj_alpha2",1)         //alpha in middle
varWrite("traj_alpha3",0)         //alpha at end
varWrite("traj_highlight",spr_none) //trajectory highlight sprite
//varWrite("traj_highlight_color",c_white)
varWrite("traj_highlight_interval",64*1) //distance between highlights
varWrite("traj_flag",FL_DISAPPEAR)

//engined
varWrite("sound_reload",snd_reload_longshot)
varWrite("is_nade",false)
varWrite("is_secondary",false)

//specs
varWrite("clip_cap",1)
varWrite("clip",varRead("clip_cap"))
varWrite("starting_ammo",4*varRead("clip_cap"))
varWrite("max_ammo",26*varRead("clip_cap"))
varWrite("ammo",varRead("starting_ammo"))
varWrite("reload_time",ceil(0.75*30))

varWrite("charge_delay",30*2.5)
varWrite("charge_weight",2)
varWrite("discharge_delay_max",2)


//shooting mechanics
varWrite("view_scale",1.4)
varWrite("kick",20)
varWrite("bullet",bullet_torque)
varWrite("bullet_speed",62)
varWrite("control_type","left_charge")
varWrite("max_charge_time",30*3.5)
varWrite("cant_shoot_max",3)
varWrite("spread_count",1)
varWrite("spread_swath",0)
varWrite("recoil",15)
//varWrite("handling",1.25)
varWrite("view_shake_duration","short") //short, medium, long
varWrite("view_shake",8)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop charging sound
audio_stop_sound(snd_torque_charge)
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///flash
event_inherited()

if instance_exists(myFlash)
{
    myFlash.x = x
    myFlash.y = y
    
    if instance_exists(myFlash)
    {
        myFlash.x = x
        myFlash.y = y
        
        if instance_exists(myFlash.light) and instance_exists(dat_jugador)
        {
            bogus_dir = -1*dat_jugador.weapon_rot
            myFlash.light.x = varRead("myX")+trigx(varRead("muzzle_offset"),bogus_dir)
            myFlash.light.y = varRead("myY")+trigy(varRead("muzzle_offset"),bogus_dir)
            myFlash.light.rot = bogus_dir
        }
        
    } else myFlash = noone
    
} else myFlash = noone


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///flash
event_inherited()

if instance_exists(myFlash)
{
    myFlash.x = x
    myFlash.y = y
    
    if instance_exists(myFlash)
    {
        myFlash.x = x
        myFlash.y = y
        
        if instance_exists(myFlash.light) and instance_exists(dat_jugador)
        {
            bogus_dir = -1*dat_jugador.weapon_rot
            myFlash.light.x = varRead("myX")+trigx(varRead("muzzle_offset"),bogus_dir)
            myFlash.light.y = varRead("myY")+trigy(varRead("muzzle_offset"),bogus_dir)
            myFlash.light.rot = bogus_dir
        }
        
    } else myFlash = noone
    
} else myFlash = noone


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///flash
if varRead("charge") = 1
{
    varWrite("traj_color",col_on)
} else varWrite("traj_color",col_off)

if being_held() and dat_jugador = myPlayer()
{
    obj_update_real(id,"charge",FL_NORMAL)
    
    if not varRead("active") or varRead("clip") &lt; 1
    {
        varWrite("charge",0)
    }   
}

if varRead("charge") &lt;= 0 and dat_jugador = myPlayer() and varRead("sound_on") != -1
{
    obj_sendval_real(id,"sound_on",false,FL_NORMAL)
    varWrite("sound_on",-1)
}

if varRead("sound_on") = false and audio_is_playing(snd_torque_charge)
{
    audio_stop_sound(snd_torque_charge)
    varWrite("sound_on",-1)
}
    
if varRead("sound_on") = 1 and not audio_is_playing(snd_torque_charge)
{
    audio_play_sound(snd_torque_charge,2,false)
    varWrite("sound_on",-1)
}

if varRead("charge") &gt; 0
{
    if dat_jugador = myPlayer() and not audio_is_playing(snd_torque_charge)
    {
        varWrite("sound_on",1)
        obj_update_real(id,"sound_on",FL_NORMAL)
    }

    if instance_exists(myFlash)
    {
        myFlash.x = x
        myFlash.y = y
        
        if instance_exists(myFlash.light) and instance_exists(dat_jugador)
        {
            bogus_dir = -1*dat_jugador.weapon_rot
            if varRead("charge") &lt; 1
                myFlash.light.intensity = varRead("charge")*3
            else
            {
                myFlash.light.intensity = 7+random_range(-2,2)
            }
            myFlash.life = 10
            myFlash.intensity = myFlash.light.intensity
            myFlash.current_intensity = myFlash.light.intensity
            myFlash.light.x = varRead("myX")+trigx(varRead("muzzle_offset"),bogus_dir)
            myFlash.light.y = varRead("myY")+trigy(varRead("muzzle_offset"),bogus_dir)
            myFlash.light.rot = bogus_dir
        }
        
    } else myFlash = noone
    
    if myFlash = noone
    {
        noflash_counter ++
        
        //if noflash_counter &gt; 1
        {
            myFlash = instance_create(x,y,flash_torque_charging)
            objVarWrite(myFlash,"angle",1)
            noflash_counter = 0
        }
    }
} else if instance_exists(myFlash)
{
    with myFlash instance_destroy()
}   

event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop charging sound
audio_stop_sound(snd_torque_charge)
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop charging sound
audio_stop_sound(snd_torque_charge)
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>20,33</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
