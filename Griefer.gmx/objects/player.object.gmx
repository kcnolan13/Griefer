<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>character_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize player

my_doll = NO_HANDLE
alarm[1] = 2

curs_xoff = 256
curs_yoff = 256

damage_scaler = 0.75

//bot constants
play_dead = false
semi_auto_time_min = 8
semi_auto_time = 0
shooting_dist = 0
overheating = 0
overheating_max = 0
auto_shooting = false
possible_2shoot = true
shooting_prob = 0
weapon_time = 0
weapon_time_min = room_speed
//for bot weapon switching time?
switch_time = 0
switch_time_min = room_speed
//no idea?
force_switch = false
weapon_switch_delay = 0
weapon_switch_delay_max = room_speed*3

time_since_wepcont = 0
near_death = false
hide_spawn_text = false

//view shit
computed_curs = false
computed_view = false
xtest = 0
ytest = 0
xtest_prev = 0
ytest_prev = 0

//dummy vars
wall_delay = 0
hold = false

//spawn-related stuff
respawn_counter = room_speed*1.5+ceil(random_range(0,room_speed*1))
double_spawn_counter =0
respawn_flag = FL_NORMAL
double_spawn_window = 5
spawn_fail_message = ""
spawn_x = 0
spawn_y = 0
respawn_delay = room_speed*3
walking = false

xaim = 0
yaim = 0

//inherit from character generic
event_inherited()
debug_counter = 0
alarm[1] = room_speed*5
bparts_ready = false

varWrite("blood_color",global.blood_color)//make_colour_hsv(random(255),255,200))

varWrite("match_kills_previous",0)
varWrite("match_deaths_previous",0)
varWrite("match_assists_previous",0)
varWrite("match_points_previous",0)

varWrite("bot",false)
varWrite("alive",false)
varWrite("player_quit",false)
varWrite("flash_hp",100)
varWrite("fire_counter",0)

varWrite("speed_multiplier",1)

alive_counter = 0
view_scaler = 1
view_shake_counter = 0
view_shake_long = 0
view_shake_medium = 0
view_shake_short = 0

initial_weapon_spawn_delay = random(3*room_speed)

weapon_wheel_alpha_max = 4
weapon_wheel_alpha = 0
weapon_wheel_fader = 0.175

mouse_wheel_delay = 0
mouse_wheel_delay_max = 2

weapon_contemplating = NO_HANDLE
weapon_contemplation_time = 0
weapon_contemplation_time_max = 1*room_speed

recovery_time = 4*room_speed
recovery_delay = 2*room_speed
recovery_delay_counter = 0
hp_previous = 100
flash_recovery_time = 1.5*room_speed
flash_recovery_delay = 2*room_speed
flash_recovery_delay_counter = 0
flash_hp_previous = 100

animation_previous = 0
arm_pose_previous = 0
roll_dir = 0
varWrite("animation_scale",PLAYER_SCALE)
varWrite("animation_speed",0)

varWrite("hit_dir",0)
varWrite("hit_mag",0)
varWrite("hit_x",0)
varWrite("hit_y",0)

//weapon objects that belong to this character
varWrite("weapon0",NO_HANDLE)
varWrite("weapon1",NO_HANDLE)
varWrite("weapon2",NO_HANDLE)
varWrite("weapon3",NO_HANDLE)
varWrite("weapon_index",0)
varWrite("active_weapon",NO_HANDLE)

varWrite("you_dead_son",false)
varWrite("trigger_update_ignore",false)
varWrite("update_ignore_counter",0)
varWrite("update_ignore_counter_max",room_speed)
varWrite("drop_weapon_x",0)
varWrite("drop_weapon_y",0)

animation_stand()
varWrite("animation_speed",SPD_STAND)
pose_rifle()

varWrite("controllable",false)
varWrite("uniqueId",0)
varWrite("image_alpha",1)
varWrite("image_blend",c_white)
varWrite("pName","Bob The Squirrel")
varWrite("pNum",-1)
varWrite("myX",x)
varWrite("myY",y)
varWrite("hp",100)
varWrite("die",false)
varWrite("die_headshot",false)
varWrite("die_splosion",false)

varWrite("helmet0","")
varWrite("torso0","")
varWrite("leg0","")
varWrite("shin0","")
varWrite("foot0","")
varWrite("hat0","")
varWrite("shoulder0","")
varWrite("forearm0","")

//initial stats (just declared here, which doesn't actually do anything anyway)
varWrite("points",0)
varWrite("kills",0)
varWrite("deaths",0)
varWrite("assists",0)
varWrite("match_points",0)
varWrite("match_kills",0)
varWrite("match_deaths",0)
varWrite("match_assists",0)
varWrite("match_rank",0)
varWrite("get_assist",0)
varWrite("kill_streak",0)
varWrite("win_streak",0)
varWrite("rollover_kstreak",false)
varWrite("rollover_wstreak",false)

varWrite("killer","")
varWrite("assister","")

/*varWrite("i_rank",0)
varWrite("i_wins",0)
varWrite("i_losses",0)
varWrite("i_headshots",0)
varWrite("i_sprees",0)
varWrite("i_kills",0)
varWrite("i_deaths",0)
varWrite("match_rank",-1)*/

die_timer = 0

alarm[0] = 5

//physics vars
initialize_physics()

sprite_index = spr_player
visible = false
varWrite("visible",false)

printf("player created")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///find my_doll
my_doll = find_pnum_avatar(varRead("uniqueId"))
if my_doll = noone
{
    my_doll = NO_HANDLE
    alarm[1] = 1
}
else
{
    syncVarFrom(my_doll,"pNum")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///become controllable if local
if is_bot(id)
{
    //SYNC MOD VARS
    sync_mod_vars()
}

if is_my_avatar(id)
{
    if instance_exists(net_manager.my_doll)
    {
        objVarWrite(net_manager.my_doll,"uniqueId",varRead("uniqueId"))
    }
    
    varWrite("controllable",false)  //needs to wait for match to start actually
    net_manager.local_player = id
    
    varWrite("rank",objVarRead(net_manager,"rank"))
    varWrite("global_rank",objVarRead(net_manager,"global_rank"))
    
    varWrite("myX",random_range(-50,-400))
    varWrite("myY",random_range(-50,-400))
    x = varRead("myX")
    y = varRead("myY")
    obj_update_real(id,"myX",FL_NORMAL)
    obj_update_real(id,"myY",FL_NORMAL)
    
    //SYNC MOD VARS
    sync_mod_vars()
    
    //tell everyone else your initial stats
    obj_update_real(id,"match_kills",FL_NORMAL)
    obj_update_real(id,"match_deaths",FL_NORMAL)
    obj_update_real(id,"match_assists",FL_NORMAL)
    obj_update_real(id,"match_points",FL_NORMAL)
    
    //sync with local avatar (who should already know this stuff
    if varRead("points") &lt; 0
        varWrite("points",objVarRead(net_manager,"points"))
    if varRead("kills") &lt; 0
        varWrite("kills",objVarRead(net_manager,"kills"))
    if varRead("deaths") &lt; 0
        varWrite("deaths",objVarRead(net_manager,"deaths"))
    if varRead("assists") &lt; 0
        varWrite("assists",objVarRead(net_manager,"assists"))
    if varRead("headshots") &lt; 0
        varWrite("headshots",objVarRead(net_manager,"headshots"))
    if varRead("wins") &lt; 0
        varWrite("wins",objVarRead(net_manager,"wins"))
    if varRead("losses") &lt; 0
        varWrite("losses",objVarRead(net_manager,"losses"))
    if varRead("sprees") &lt; 0
        varWrite("sprees",objVarRead(net_manager,"sprees"))
}

net_manager.alarm[0] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync position and set previous stats periodically
if not varRead("trigger_update_ignore")
{
    x = varRead("myX")
    y = varRead("myY")
}

//update match_kills_previous @ 8 Hz
if net_manager.room_counter % room_speed/8 = 0
{
    varWrite("match_points_previous",varRead("match_points"))
    varWrite("match_kills_previous",varRead("match_kills"))
    varWrite("match_deaths_previous",varRead("match_deaths"))
    varWrite("match_assists_previous",varRead("match_assists"))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view stuff</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view stuff

if global.using_gamepad //or not computed_curs
compute_cursor_offset()

if global.using_gamepad //or not computed_view
framely_view_adjust()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESPAWN HANDLER
if net_manager.local_player = id and alive_counter &lt; room_speed and not pressing_left() and not pressing_right() and not rolling and not jumping and not crawling
    animation_stand()

if is_bot(id) and SUPER_DEBUG
{
    printf(varRead("pName")+" is a BOT! respawning in: "+respawn_counter)
}   

if respawn_counter &gt; 0 and (is_my_avatar(id) or is_bot(id))
{
    if is_bot(id) and DEBUG printf("bot respawn counting down")
    
    respawn_counter = sub_real(respawn_counter, 1)
    
    if not respawn_counter
    {
        
        //FIGURE OUT WHERE TO RESPAWN
        compute_respawn_coordinates(id, respawn_flag)   //computes spawn_x, spawn_y
        objVarWrite(id,"alive",true)
        respawn_flag = FL_NORMAL    //set afterwards on purpose
        double_spawn_counter = double_spawn_window
        
        if net_manager.local_player = id
            net_manager.rag_target = NO_HANDLE
        
        objVarWrite(id,"myX",spawn_x)
        objVarWrite(id,"myY",spawn_y)
        objVarWrite(id,"hp",100)
        objVarWrite(id,"alive",true)
        obj_update_real(id,"alive",FL_NORMAL)
        varWrite("speed_multiplier",1)
        varWrite("assister","")
        varWrite("killer","")
        varWrite("animation_speed",0)
        varWrite("fire_counter",0)
        obj_update_real(id,"fire_counter",FL_NORMAL)
        obj_update_string(id,"killer",FL_NORMAL)
        obj_update_string(id,"assister",FL_NORMAL)
        
        //make sure everybody else knows about where he's spawning
        obj_update_real(id,"myX",FL_NORMAL)
        obj_update_real(id,"myY",FL_NORMAL)
        
        hsp = 0
        vsp = 0
        rolling = 0
        crawling = 0
        animation_stand()
        varWrite("animation_speed",SPD_STAND)
        
        if net_manager.starting_match
        {
            x = objVarRead(id,"myX")
            y = objVarRead(id,"myY")
            
            with (id) 
            {
                scr_unstick_guy()
            }
            
            x = objVarRead(id,"myX")
            y = objVarRead(id,"myY")
            
        } else {
            //spawn his weapons
            spawn_my_weapons()
        }
        
        //send twice because it's hella important
        obj_update_real(id,"hp",FL_NORMAL)
        obj_update_real(id,"hp",FL_NORMAL)
        animation_stand()
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawning counters

if double_spawn_counter and (is_my_avatar(id) or is_bot(id))
{
    double_spawn_counter--
    
    //with (local_player)
    {
        if not double_spawn_counter
        {
            varWrite("visible",true)
            varWrite("controllable",true)
        }
        
        if is_my_avatar(id)    
            net_manager.hide_spawn_text = false
            
        var overlapping_player = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,player,true,true)
        if instance_exists(overlapping_player) and not is_local_teammate(overlapping_player) and varRead("myX") &gt; 0 and varRead("myY") &gt; 0
        {
            double_spawn_counter = 0
            if is_my_avatar(id)
                net_manager.hide_spawn_text = true
            printf("Overlapping Players! Another.id spawn computation is in order ... ")
            //another.id respawn coordinate computation is needed --&gt; allow a little delay time to be safe
            respawn_counter = random_range(1,15)
            respawn_flag = FL_RANDOM
        }
    }
}

//trigger another.id spawn if we've got overlapping guys
if not respawn_counter and net_manager.starting_match
{
    if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,player,true,true) and varRead("myX") &gt; 0 and varRead("myY") &gt; 0
    {
        printf("Overlapping Players! Another.id spawn computation is in order ... ")
        //another.id respawn coordinate computation is needed --&gt; allow a little delay time to be safe
        respawn_counter = random_range(1,room_speed)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle view shaking
if not varRead("controllable") or is_bot(id) exit

view_shake_long /= 1.15
view_shake_medium /= 1.4
view_shake_short /= 2

view_shake = view_shake_long + view_shake_medium + view_shake_short

if abs(view_shake) &lt; 0.3
view_shake = 0

if view_shake &gt; 15 view_shake = 15

//view_angle[0] = random_range(-1*view_shake,view_shake)
view_xoff = floor(random_range(-3*view_shake,3*view_shake))
view_yoff = floor(random_range(-3*view_shake,3*view_shake))

if view_xoff or view_yoff
{
    //printf("::: doing some view shake: "+string(view_xoff)+", "+string(view_yoff))
}

view_xview += view_xoff
view_yview += view_yoff
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync position
if not varRead("trigger_update_ignore")
{
    x = varRead("myX")
    y = varRead("myY")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cursor offset computation

if not is_bot(id)
{
    if not global.using_gamepad //or  global.using_gamepad 
    {
        cursor.x = mouse_x
        cursor.y = mouse_y
    }
    else
    {
        if (gamepad_axis_check(global.devno,gp_axisrh) or gamepad_axis_check(global.devno,gp_axisrv))
        {
            if varRead("alive")
            {
                var ang_lerp = 1
                
                var addx = floor(global.cvals[C_LOOK_SENS]*gamepad_stick_val(gp_axisrh))
                var addy = floor(global.cvals[C_LOOK_SENS]*gamepad_stick_val(gp_axisrv))
                var ang = point_direction(x,y,cursor.x+addx,cursor.y+addy)
                
                if point_distance(x,y,cursor.x+addx,cursor.y+addy) &lt; (global.cursor_offset)
                {
                    curs_xoff = floor(curs_xoff+addx)
                    curs_yoff = floor(curs_yoff+addy)
                }
                else
                {
                    var new_ang = lerp(global.cursor_dir,ang,ang_lerp)
                    curs_xoff = floor(trigx(global.cursor_offset,new_ang))
                    curs_yoff = floor(trigy(global.cursor_offset,new_ang))
                }
            }
            global.cursor_dir = floor(point_direction(x,y,cursor.x,cursor.y))
        }
        
        var tx = floor(x+curs_xoff)
        var ty = floor(y+curs_yoff)
            
        cursor.x = x+curs_xoff//mouse_x+256
        cursor.y = y+curs_yoff//mouse_y+256
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view stuff</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view stuff

computed_curs = false
computed_view = false

if global.using_gamepad //or not computed_curs
compute_cursor_offset()

if global.using_gamepad or not computed_view
framely_view_adjust()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bparts_ready

debug_counter++
if not bparts_ready and is_string(varRead("helmet0"))
{       
    if varRead("helmet0") != "" and varRead("torso0") != ""
    and varRead("leg0") != "" and varRead("shin0") != ""
    and varRead("foot0") != "" and varRead("hat0") != ""
    and varRead("shoulder0") != "" and varRead("forearm0") != ""
    {
        varWrite("helmet0",bpart_extract_sprite(varRead("helmet0")))
        varWrite("torso0",bpart_extract_sprite(varRead("torso0")))
        varWrite("leg0",bpart_extract_sprite(varRead("leg0")))
        varWrite("shin0",bpart_extract_sprite(varRead("shin0")))
        varWrite("foot0",bpart_extract_sprite(varRead("foot0")))
        varWrite("hat0",bpart_extract_sprite(varRead("hat0")))
        varWrite("shoulder0",bpart_extract_sprite(varRead("shoulder0")))
        varWrite("forearm0",bpart_extract_sprite(varRead("forearm0")))
        bparts_ready = true
        
        //send bodyparts to other.id players?
        
    } else {
        if DEBUG
        {
            printf("bparts not ready for player #"+varRead("uniqueId"))
            printf(varRead("pName")+" : "+varRead("helmet0")+", "+varRead("foot0")+", "+varRead("hat0")+", "+varRead("torso0")+", "+varRead("forearm0")+", "+varRead("shoulder0")+", "+varRead("leg0")+", "+varRead("shin0")+", ")
        }
    }
}

if is_bot(id) and net_manager.room_counter &gt; 5
    bparts_ready = true
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MUTUAL</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///counters and get assist and player quit
if not instance_exists(weapon_contemplating)
    time_since_wepcont += real_speed(1)
else time_since_wepcont = 0

if weapon_switch_delay
    weapon_switch_delay -= real_speed(1)

if weapon_switch_delay &lt; 0
    weapon_switch_delay = 0
    

//if alive_counter % room_speed = 0 and net_manager.local_player = id
//    printf("hp = "+varRead("hp"))
    
if varRead("player_quit")
{
    varWrite("myX",-50)
    varWrite("myY",-50)
    varWrite("visible",false)
    varWrite("controllable",false)
}


if net_manager.local_player = id
{
    if varRead("hp") &lt; 100
    {
        with challenge_manager
        {
            ninja_time = 0
            untouched_kills = 0
        }
    } else
    {
        with challenge_manager
        {
            ninja_time += real_speed(1)
            if ninja_time &gt; acc_data("ninja",COL_NEEDED)*room_speed
            {
                //printf("::: ninja acc completed -- data in col_needed was: "+string(acc_data("ninja",COL_NEEDED)))
                complete_accolade("ninja")
                ninja_time = 1
                
                /*if acc_data("ninja",COL_TOTAL) &gt;= ninjas_needed and not challenge_is_complete(global.ninja_name)
                {
                    complete_challenge(global.ninja_name)
                }*/
            }
        }
    }
    if varRead("hp") &lt; 25
    {
        if varRead("alive") and alive_counter &gt; 10
            near_death = true
        else
            near_death = false
    } else if varRead("hp") &gt; 90 and near_death
    {
        near_death = false
        with challenge_manager
        {
            complete_accolade("survivor")
            /*if acc_data("survivor",COL_TOTAL) &gt;= near_deaths_needed and not challenge_is_complete(global.muscle)
            {
                complete_challenge(global.muscle_name)
            }*/
        }
    }
    
    if not in_flame(id)
    {
        obj_update_real(id,"fire_counter",FL_NORMAL)
        if varRead("fire_counter")
            varSub("fire_counter",1)
    }

        if not input_check(mapped_control(C_MOVE_LEFT)) and not input_check(mapped_control(C_MOVE_RIGHT)) and varRead("animation") = "walk"
        {
            walking = false
            printf("manual standing override")
            animation_stand()
        }

    if varRead("flash_hp") &lt; 75
    {
        //printf("flash_hp = "+varRead("flash_hp"))
        
        if not audio_is_playing(snd_flashed)
            audio_play_sound(snd_flashed,4,true)
            
    } else if audio_is_playing(snd_flashed) audio_stop_sound(snd_flashed)
}

if varRead("alive")
{
    if varRead("hp") &gt; 0
    {
        varWrite("visible",true)
        visible = true
    }
    
    alive_counter++
    if alive_counter &lt; room_speed*1.5 and (net_manager.local_player = id or is_bot(id))
    {
        //guarantee that you spawn with your starting weapons
        ensure_weapons_spawned()
    }
}
else 
{
    alive_counter = 0
    varWrite("flash_hp",100)
    flash_recovery_delay_counter = 0
}

if (varRead("get_assist") &gt; 0) and (net_manager.local_player = id or master_of(id))
{
    varSub("get_assist",1)
    varAdd("match_assists",1)
    varAdd("match_points",POINTS_ASSIST)
    varAdd("assists",1)
    obj_update_real(id,"match_assits",FL_NORMAL)
    obj_update_real(id,"match_points",FL_NORMAL)
    
    if myPlayer().id = id
    with challenge_manager
    {
        match_assists++
        spree_assists++
        
        if spree_assists = 3
            complete_accolade("3ass")
        else if spree_assists = 5
            complete_accolade("5ass")
        
        //if match_assists &gt;= santa_assists and not challenge_is_complete("Santa Hat")
          //  complete_challenge("Santa Hat")
            
        //if match_assists &gt;= iron_assists and not challenge_is_complete("Iron")
          //  complete_challenge("Iron")
        
    }   
    
    if not is_bot(id)
    {
        boom_delay = compute_boom_delay()
        boom = boom_boom_pow("+"+string(POINTS_ASSIST)+" Assist",global.action_word_color)
        boom.fnt = fnt_boom
        boom.scale = 1.25
        boom.birth_delay = boom_delay
        add_xp(XP_ASSIST,true,true,false)
        stat_update_real("assists",varRead("assists"),stat_manager.stat_flag)
    }
}

if hp_previous != varRead("hp")
{
    recovery_delay_counter = recovery_delay
}

if flash_hp_previous != varRead("flash_hp")
{
    flash_recovery_delay_counter = flash_recovery_delay
}

if varRead("hit_x") and varRead("hit_y") and varRead("hit_mag") &gt; 0 and varRead("hit_dir") != -99 and net_manager.local_player = id
{
    if instance_exists(hit_indicator)
    {
        if not in_ink(id) and not in_flame(id) and not varRead("fire_counter")
            audio_bullet_hit()
            
        //printf("setting hit vals")
        hit_indicator.alpha += varRead("hit_mag")*HIT_MAG_SCALER
        hit_indicator.dir = varRead("hit_dir")
        if not varRead("fire_counter")
            bloodspray_player(varRead("hit_x"),varRead("hit_y"),varRead("hit_mag")/100,varRead("hit_dir"),varRead("blood_color"))
    } else
    {
        printf("ERROR: no hit indicator")
    }
    
    varWrite("hit_mag",0)
    varWrite("hit_dir",-99)
    varWrite("hit_x",0)
    varWrite("hit_y",0)
}

if initial_weapon_spawn_delay
{
    if is_my_avatar(id)
    {
        initial_weapon_spawn_delay--
        if not initial_weapon_spawn_delay
        {
            printf("spawning weapons")
            //spawn initial weapons
            spawn_my_weapons()
            printf("weapons spawned")
        }
    } else {
        initial_weapon_spawn_delay = 0
    }
}

if recovery_delay_counter
{
    recovery_delay_counter -= real_speed(1)
    
    if recovery_delay_counter &lt; 1
        recovery_delay_counter = 0
        
} else if varRead("hp") &lt; 100
{
    varAdd("hp",100/recovery_time)
    
    if varRead("hp") &gt;= 99
    {
        varWrite("assister","")
        varWrite("killer","")
        obj_update_string(id,"killer",FL_NORMAL)
        obj_update_string(id,"assister",FL_NORMAL)
        varWrite("hp",100)
    }
}

if flash_recovery_delay_counter
{
    flash_recovery_delay_counter -= real_speed(1)
    
    if flash_recovery_delay_counter &lt; 1
        flash_recovery_delay_counter = 0
        
} else if varRead("flash_hp") &lt; 100
{
    varAdd("flash_hp",100/flash_recovery_time)
    
    if varRead("flash_hp") &gt;= 99
    {
        varWrite("assister","")
        obj_update_string(id,"assister",FL_NORMAL)
        varWrite("flash_hp",100)
    }
}

flash_hp_previous = varRead("flash_hp")
hp_previous = varRead("hp")

if die_timer &gt; 0
    die_timer -= real_speed(1)
else
    die_timer = 0

if weapon_wheel_alpha &gt; 0
{
    weapon_wheel_alpha -= weapon_wheel_fader
    
    if weapon_wheel_alpha &lt; 0
    weapon_wheel_alpha = 0
}

if mouse_wheel_delay &gt; 0
    mouse_wheel_delay --

if weapon_contemplating &gt; -1
    weapon_contemplation_time ++
else
    weapon_contemplation_time = 0

if weapon_contemplation_time &gt; weapon_contemplation_time_max
{
    weapon_contemplation_time = 0
    weapon_contemplating = NO_HANDLE
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync vars
if not varRead("update_ignore_counter")
{
    if not varRead("trigger_update_ignore")
    {
        image_blend = varRead("image_blend")
        image_alpha = varRead("image_alpha")
        
        visible = varRead("visible")
        
        x = varRead("myX")
        y = varRead("myY")
    }
    
    if varRead("trigger_update_ignore")
    {
        varWrite("trigger_update_ignore",false)
        varWrite("update_ignore_counter",varRead("update_ignore_counter_max"))
    }
    
} else {
    if DEBUG
        printf("player #"+varRead("uniqueId")+" ignoring var updates: "+varRead("update_ignore_counter")+" frames left")
    varSub("update_ignore_counter",1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>LOCAL PLAYER</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///death handler --&gt; receive this signal from players that have killed you
if varRead("you_dead_son") and (net_manager.local_player = id or master_of(id))
{
    player_death_handler()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics and keyboard control

if PBUG
    pName = varRead("pName")

///basic physics
blahd = in_snare(id)
if blahd and point_distance(x,y,blahd.x,blahd.y) &lt;= point_distance(x+hsp,y,blahd.x,blahd.y)
{
    hsp *= 0.1
}

if varRead("controllable") or (net_manager.starting_match and varRead("myX") &gt; 0 and varRead("myY") &gt; 0) or (objVarRead(net_manager,"end_match_coming") and not position_meeting(x,bbox_bottom+3,solid_generic) and standing_2way = false)
    scr_basic_physics()
     
if varRead("controllable")
{
    if vsp &gt; -6
    jumping = false
    varWrite("sprite_index",sprite_index)
    
    if not is_bot(id)
    {
        //THIS IS WHERE SHIT GOES DOWN
        framely_player_controls()
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ARTIFICIAL INTELLIGENCE
if is_bot(id) and not play_dead and (not instance_exists(modal_controls) or modal_controls.fade_out) and varRead("controllable") and not net_manager.starting_match and varRead("alive")
{
    var dat_rank = varRead("rank")+1
    
    //AI override adjustment
    if myPlayer() = id
    {
        dat_rank += 10
        if dat_rank &gt; 25
            dat_rank = 25
    }
    
    var max_rank = array_length_1d(global.rank_names)
    var per_active = dat_rank/max_rank*1.5
    var per_reflexes = dat_rank/max_rank*2
    ai_retarcus(per_active, per_reflexes)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite and animation control
if (varRead("controllable")) or objVarRead(net_manager,"end_match_coming")
    {
    
    if use_jumping_spr and (collision_rectangle(bbox_left+5,bbox_top+5,bbox_right-5,bbox_bottom+5,block,false,false) or collision_rectangle(bbox_left+5,bbox_top+5,bbox_right-5,bbox_bottom+10,block2_top,false,false))
    {
        use_jumping_spr = false
        varWrite("animation_index",0)
        if not rolling
        {
            animation_stand()
            varWrite("animation_speed",SPD_STAND)
        }
    }
    
    //adjust sprite_index
    if crawling = 1 or rolling = 1 or slide_left = 1 or slide_right = 1
        sprite_index = spr_player_crawl
    else
        sprite_index = spr_player
    
    //don't go too fast crawling
    if (crawling = 1 &amp;&amp; rolling = 0 &amp;&amp; abs(hsp)&gt;speed_crawl/mass)
    hsp = speed_crawl*sign(hsp)/mass
    
    if collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom+5,block,true,true) || standing_2way = true || floating_2way = true
    if not crawling and not rolling
    {
        if walking
        {animation_walk()}
        else
        {animation_stand() varWrite("animation_speed",SPD_STAND)}
    }
    
    if (slide_left = 0 &amp;&amp; slide_right = 0 &amp;&amp; rolling = 0)
    if !collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom+36,block,true,true) &amp;&amp; standing_2way = false &amp;&amp; floating_2way = false
    if crawling = 0
    {
        if vsp&lt;18
        {
            if floating_2way = false
            {
                use_jumping_spr = true
                varWrite("animation_index",4) //JUMPING
                varWrite("animation_speed",0)
            }
            else
            {
                animation_walk()
            }
        }
        else
        {
            animation_walk()
        }
    }
    else
    {animation_crawl() varWrite("animation_speed",0)}
    
    //make damn well sure he's crawling
    if sprite_index = spr_player_crawl and varRead("animation") != "crawl" and rolling = 0 and varRead("animation") != "roll" 
    {
        if not in_air or slide_left or slide_right or collision_rectangle(bbox_left,bbox_top-50,bbox_right,bbox_bottom-40,block,true,true)
               
        {
            ///printf("::: FORCING CRAWL")
            animation_crawl()
        }
        else
        {
            ///printf("::: FORCING JUMP")
            animation_walk()
            var ysub = 47
            if not standing_2way and not floating_2way
                ysub = 47
                
            varSub("myY",ysub)
            y = varRead("myY")
            sprite_index = spr_player
            
            x = varRead("myX")
            scr_unstick_guy()
            x = varRead("myX")
            
            if standing_2way or floating_2way
            {
                scr_pull_up(ysub)
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wall sliding
if (varRead("controllable")) or objVarRead(net_manager,"end_match_coming")
{
    ///walljumping
    if wall_delay &gt; 0 
    {
        wall_delay = sub_real(wall_delay,1)
        return false
    }
    
    if bail_slide_timer
    {
        bail_slide_timer = sub_real(bail_slide_timer,1)
    }
    
    can_slide = true
    
        //first of all, let's bail if you're too close to the ground
        if collision_rectangle(bbox_left+2,bbox_top,bbox_right-2,bbox_bottom+100,block,true,true) || collision_rectangle(bbox_left+2,bbox_bottom,bbox_right-2,bbox_bottom+100,block2_top,true,true)
        {slide_right = 0; slide_left = 0; can_slide = false}
        
        if can_slide
        {
            //don't get stuck on top corners
            if collision_rectangle(bbox_left+4,bbox_top+42,bbox_right+4,bbox_bottom-42,block,true,true) &amp;&amp; (collision_rectangle(bbox_left+4,y-10,bbox_right+4,y-9,block,true,true)&amp;&amp;collision_rectangle(bbox_left+4,y+20,bbox_right+4,y+25,block,true,true))
            {
     
                if (slide_left = 0)
                {
                    bail_slide_timer = 0
                    slide_left = 1
                    ID = collision_rectangle(bbox_left+4,bbox_top+42,bbox_right+4,bbox_bottom-42,block,true,true)
                    varWrite("myX",ID.bbox_left-3-sprite_get_width(sprite_index)/2)
                }
                    
                hsp = 0
                
                if gfric_max != 2
                {grav = 0.5 if vsp&gt;12 vsp=12}
                else
                {if vsp&lt;0 grav=grav_slide else grav=grav_slide if vsp&gt;slide_speed*mass vsp=slide_speed*mass}
                
                animation_wall()
                varWrite("animation_xscale",-1)
            }
            else slide_left = 0
            
            if !collision_rectangle(bbox_left+2,bbox_top,bbox_right-2,bbox_bottom+10,block,true,true)
            if collision_rectangle(bbox_left-4,bbox_top+42,bbox_right-4,bbox_bottom-42,block,true,true) &amp;&amp; (collision_rectangle(bbox_left-4,y-10,bbox_right-4,y-9,block,true,true)&amp;&amp;collision_rectangle(bbox_left-4,y+20,bbox_right-4,y+25,block,true,true))
            {
                
                if slide_right = 0
                {
                    bail_slide_timer =0
                    slide_right = 1
                    ID = collision_rectangle(bbox_left-4,bbox_top+42,bbox_right-4,bbox_bottom-42,block,true,true)
                    varWrite("myX",ID.bbox_right+1+sprite_get_width(sprite_index)/2)
                }
                
                hsp = 0
                
                if gfric_max != 2
                {grav = 0.5 if vsp&gt;12 vsp=12}
                else
                {if vsp&lt;0 grav=grav_slide else grav=grav_slide if vsp&gt;slide_speed*mass vsp=slide_speed*mass}
                
                animation_wall()
                varWrite("animation_xscale",1)
            }
            else slide_right = 0
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///come out of combat rolls + roll_timer
if roll_timer
{
    roll_timer = sub_real(roll_timer,1)
    
    if slide_left or slide_right
        roll_timer = 0
}
if (varRead("controllable")) or objVarRead(net_manager,"end_match_coming")
{
    if redirect_counter &gt; 0
    {
        redirect_counter = sub_real(redirect_counter,1)
        
        if varRead("speed_multiplier") &lt; 1 and rolling = 1
        {
            hsp *= varRead("speed_multiplier")
        }
        
        if abs(hsp) &lt; 1 and rolling = 1 and not in_snare(id) and varRead("speed_multiplier") &gt; 0.2
        {
            hsp = roll_speed*roll_dir*varRead("speed_multiplier")
        }
        
        if redirect_counter &lt; 1
            {
                if (!collision_rectangle(bbox_left,bbox_top-50,bbox_right,bbox_bottom-40,block,true,true))
                {
                    if (slide_left = 0 &amp;&amp; slide_right = 0)
                    {
                        animation_walk()
                        var ysub = 47
                        if not standing_2way and not floating_2way
                            ysub = 47
                            
                        varSub("myY",ysub)
                        y = varRead("myY")
                        sprite_index = spr_player
                        
                        x = varRead("myX")
                        scr_unstick_guy()
                        x = varRead("myX")
                        
                        if standing_2way or floating_2way
                        {
                            scr_pull_up(ysub)
                        }
                    }
                    varWrite("animation_speed",0)
                    rolling = 0
                    crawling = 0
                }
                else
                {
                    if (slide_left = 0 &amp;&amp; slide_right = 0)
                    animation_crawl()
                    varWrite("animation_speed",0)
                    crawling = 1
                    rolling = 0
                }
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>REMOTE PLAYERS</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pose and animation syncing
//if not varRead("controllable")
{
    if not varRead("controllable") and not objVarRead(net_manager,"end_match_coming")
        sprite_index = varRead("sprite_index")
        
    sync_poses_and_animations()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MUTUAL</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop here and lose controllability if end_match_coming
if objVarRead(net_manager,"end_match_coming")
{
    varWrite("controllable",false)
    //varWrite("image_alpha",0.1)
    //varWrite("image_blend",c_blue)
    varWrite("animation_speed",SPD_STAND)
    animation_stand()
    if crawling or rolling
    {
        varSub("myY",35)
        crawling = 0
        rolling = 0
    }
    exit
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stuck detection and correction
if collision_rectangle(bbox_left,bbox_top+2,bbox_right,bbox_bottom-2,block,true,true) and not slide_left and not slide_right
scr_unstick_guy()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>new physics system</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///process bullet collisions
///only process collision if player is tangible
for (var i=0; i&lt;instance_number(bullet_generic); i++)
{
    datBullet = instance_find(bullet_generic,i)
    
    if instance_place(x,y,datBullet)
    {
        if objVarRead(net_manager,"end_match_coming")
        {
            continue
        }
        if varRead("visible")
        {
            from_player = find_player(objVarRead(datBullet.id,"senderId"))
            if DEBUG
                printf("bullet hit "+varRead("pName")+" ... from "+objVarRead(from_player,"pName"))
            ///only process collision if was a bullet shot from the local player and you are not him
            if objVarRead(datBullet.id,"local") and (
                (net_manager.local_player != id  and not is_local_teammate(id) and not net_manager.bot_match)
                 or (net_manager.bot_match and not are_teammates(id,from_player) and from_player != id)
             )
            {
            
                if not datBullet.id.object_index = splosion_smoke
                audio_bullet_hit()
                
                if DEBUG
                    printf(varRead("pName")+" and "+objVarRead(from_player,"pName")+" are teammates?? = "+are_teammates(id,from_player))
                //if you are not already dying(?)
                if die_timer=0
                {
                    //YOU SIR, HAVE BEEN SHOT
                    
                    killah = from_player
                    if instance_exists(killah) and killah != id
                    {
                        var cand = objVarRead(killah,"pName")
                        if cand != varRead("killer")
                        {
                            varWrite("assister",varRead("killer"))
                            varWrite("killer",cand)
                            obj_update_string(id,"killer",FL_NORMAL)
                            obj_update_string(id,"assister",FL_NORMAL)
                        }
                    } else if killah = id varWrite("killer","")
                    
                    recovery_delay_counter = recovery_delay
                
                    //determine damage falloff
                    shot_range = point_distance(objVarRead(datBullet.id,"myX"),objVarRead(datBullet.id,"myY"),objVarRead(datBullet.id,"xStart"),objVarRead(datBullet.id,"yStart"))
                    var falloff = compute_falloff(datBullet.id,shot_range)
                        
                    is_headshot = bullet_in_head(datBullet.id,objVarRead(datBullet.id,"headshot_difficulty"))
                    
                    if is_headshot
                    {
                        dmg = objVarRead(datBullet.id,"damage_head")*falloff*damage_scaler
                        
                        if shot_range &lt; objVarRead(datBullet.id,"headshot_distance")
                            death_type = "die_headshot"
                        else
                            death_type = objVarRead(datBullet.id,"body_death_type")
                            
                        if SPBUG
                        {
                            printf("ERROR (not): HEADSHOT  ...  damage: "+string(truncate(dmg,2))+"  ...  base: "+string(truncate(dmg/falloff,2))+"  ...  falloff: "+string(truncate(falloff,2)))
                        }
                            
                    }
                    else
                    {
                        dmg = objVarRead(datBullet.id,"damage_body")*falloff*damage_scaler
                        
                        if shot_range &lt; objVarRead(datBullet.id,"gib_distance")
                            death_type = "die_shotgun"
                        else
                            death_type = objVarRead(datBullet.id,"body_death_type")
                            
                        if SPBUG
                        {
                            printf("ERROR (not): BODYSHOT  ...  damage: "+string(truncate(dmg,2))+"  ...  base: "+string(truncate(dmg/falloff,2))+"  ...  falloff: "+string(truncate(falloff,2)))
                        }
                                   
                    }
                    
                    varSub("hp",dmg)
                    
                    obj_sendval_real(id,"hp",dmg,FL_DECREMENT)
                    
                    if not is_bot(id)
                    {
                        if SUPER_DEBUG
                            printf("sending networked hit params")
                        obj_sendval_real(id,"hit_mag",dmg,FL_INCREMENT)
                        obj_sendval_real(id,"hit_dir",objVarRead(datBullet.id,"direction"),FL_NORMAL)
                        obj_sendval_real(id,"hit_x",datBullet.id.x,FL_NORMAL)
                        obj_sendval_real(id,"hit_y",datBullet.id.y,FL_NORMAL)
                        if SUPER_DEBUG
                            printf("sent networked hit params")
                    }
                    
                    if is_bot(from_player) and net_manager.local_player = id
                    {
                        varAdd("hit_mag",dmg)
                        varWrite("hit_dir",objVarRead(datBullet.id,"direction"))
                        varWrite("hit_x",datBullet.id.x)
                        varWrite("hit_y",datBullet.id.y)
                    }
                    
                    if varRead("hp") &gt; 0
                        bloodspray_player(datBullet.id.x,datBullet.id.y,dmg/100,objVarRead(datBullet.id,"direction"),varRead("blood_color"))
                    
                    if varRead("hp") &lt;= 0
                    {
                        //work towards completing a challenge
                        //printf("thinking about invoking challenge_bullet_kill")
                        if not is_bot(from_player)
                        {
                            //printf("invoking challenge_bullet_kill")
                            challenge_bullet_kill(net_manager.local_player, id, datBullet.object_index, death_type)
                        } //else printf("decided against it")
                    
                        //prevent from making multiple kill requests
                        die_timer = room_speed
                        
                        if not is_bot(from_player)
                        {
                            printf("bullet kill from_player was not a bot --&gt; you get a kill")
                            //increment local player's kills
                            //if not net_manager.bot_match
                                objVarAdd(net_manager.local_player,"kills",1)
                            
                            objVarAdd(net_manager.local_player,"match_kills",1)
                            
                            add_xp(XP_KILL,true,true,false)
                            
                            //send local player's kills to server and datBullet.id clients
                            obj_update_real(net_manager.local_player,"match_kills",FL_NORMAL)
                            stat_update_real("kills",objVarRead(net_manager.local_player,"kills"),stat_manager.stat_flag)
                        }
                        else
                        {
                            printf("awarding a kill to bot: "+objVarRead(from_player,"pName"))
                            objVarAdd(from_player,"kills",1)
                            objVarAdd(from_player,"match_kills",1)
                        }
                        
                        //actually kill the homie
                        kill_player(id,death_type,from_player,objVarRead(datBullet.id,"direction"),FL_NO_FORCE,find_instrument_of_death(datBullet.object_index),"")
                    }
                    
                    
                    //NOW destroy the bullet... not before
                    with datBullet.id {
                        if object_index != splosion_smoke
                        instance_destroy()
                    }
                    
                }
            }
            //destroy the bullet if it was not local and has been around for more than a few frames
            else if datBullet.id.counter &gt; 2 and not are_teammates(id,find_player(objVarRead(datBullet.id,"senderId")))
            {
                with datBullet.id {
                    if DEBUG
                        printf("squashing useless bullet")
                    instance_destroy()
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view stuff</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view stuff

if global.using_gamepad or not computed_curs
compute_cursor_offset()

if global.using_gamepad //or not computed_view
framely_view_adjust()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///next weapon
if not varRead("controllable") or is_bot(id) exit
wheel_down()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///previous weapon
if not varRead("controllable") or is_bot(id) exit
wheel_up()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw me and my name
if not bparts_ready exit

//draw stupid
//draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha)

if net_manager.show_cout
{
    draw_text(x,y-140,"uniqueId: "+string(varRead("uniqueId")))
    draw_text(x,y-100,"pNum: "+string(varRead("pNum")))
}

event_inherited()

draw_set_font(fnt_hud)
draw_set_halign(fa_center)
draw_set_valign(fa_center)



if net_manager.local_player = id or is_local_teammate(id) or net_manager.bot_override
{
    draw_set_font(fnt_hud_big)
    draw_set_color(c_white)
    draw_namerank(varRead("pName"),varRead("rank"),x-32,y-100,1,c_white)
    draw_set_font(fnt_hud)
    
    /*draw_text(x,y-200,"rank: "+varRead("rank"))
    draw_text(x,y-180,"global rank: "+varRead("global_rank"))
    draw_text(x,y-160,"match kills: "+varRead("match_kills"))
    draw_text(x,y-120,"match deaths: "+varRead("match_deaths"))
    draw_text(x,y-100,"killer: "+varRead("killer"))
    draw_text(x,y-80,"assister: "+varRead("assister"))*/
    
}

if (net_manager.room_counter &gt; room_speed/4)
{
    
    draw_set_color(c_white)
    
    if DEBUG
    {
        draw_set_halign(fa_left)
        draw_text(x+sprite_get_width(sprite_index)/2,y-20,"uniqueId: "+varRead("uniqueId"))
        draw_text(x+sprite_get_width(sprite_index)/2,y-60,"arm_animation_index = "+varRead("arm_animation_index"))
        draw_text(x+sprite_get_width(sprite_index)/2,y-40,"arm_pose: "+varRead("arm_pose"))
    
    
        if net_manager.local_player = id or is_local_teammate(id)
            draw_set_color(c_blue)
        else
            draw_set_color(c_red)
        
        draw_set_halign(fa_center)
        draw_text(x,y-80,"hp: "+ceil(varRead("hp")))
        
        draw_set_color(c_white)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drop weapon
if not varRead("controllable") or is_bot(id) exit

press_x()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
if not varRead("controllable") or is_bot(id) exit

press_w()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kneel or Stand
if not varRead("controllable") or is_bot(id) or in_snare(id) exit

press_s()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///previous weapon
if not varRead("controllable") or is_bot(id) exit

press_e()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///next weapon
if not varRead("controllable") or is_bot(id) exit

press_q()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select weapon
if not varRead("controllable") or is_bot(id) exit

if torque_charging() return false

weapon_wheel_alpha = weapon_wheel_alpha_max
while (varRead("weapon_index") != 3)
{
if net_manager.local_player = id
    audio_play_sound(snd_scroll3,2,false)
    next_weapon()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select weapon
if not varRead("controllable") or is_bot(id) exit

if torque_charging() return false

weapon_wheel_alpha = weapon_wheel_alpha_max
while (varRead("weapon_index") != 1)
{
if net_manager.local_player = id
    audio_play_sound(snd_scroll3,2,false)
    next_weapon()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select weapon
if not varRead("controllable") or is_bot(id) exit

if torque_charging() return false

weapon_wheel_alpha = weapon_wheel_alpha_max
while (varRead("weapon_index") != 2)
{
if net_manager.local_player = id
    audio_play_sound(snd_scroll3,2,false)
    next_weapon()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select weapon
if not varRead("controllable") or is_bot(id) exit

if torque_charging() return false

weapon_wheel_alpha = weapon_wheel_alpha_max
while (varRead("weapon_index") != 0)
{
if net_manager.local_player = id
    audio_play_sound(snd_scroll3,2,false)
    next_weapon()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select weapon
if not varRead("controllable") or is_bot(id) or time_since_wepcont &lt; 5 return false

if instance_exists(varRead("active_weapon"))
{
    var badWep = varRead("active_weapon")
    if string(objVarRead(badWep,"name")) = global.torque
    {
        if objVarRead(badWep,"charge") &gt; 0
        {
            printf("ERROR: cannot quick switch to pistol ... torque bow is charging")
            return false
        }
    }
}

weapon_wheel_alpha = weapon_wheel_alpha_max
while (varRead("weapon_index") != 1)
{
if net_manager.local_player = id
    audio_play_sound(snd_scroll3,2,false)
    next_weapon()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Roll
if not varRead("controllable") or is_bot(id) exit
press_shift()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop
if not varRead("controllable") or is_bot(id) exit

release_w()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stand still
if not varRead("controllable") or is_bot(id) exit

release_d()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stand still
if not varRead("controllable") or is_bot(id) exit

release_a()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
