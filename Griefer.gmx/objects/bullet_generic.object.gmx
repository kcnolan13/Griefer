<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
netvars = ds_map_create()

depth = -95

stationary_counter = 0
have_hit_target = false
spr_light_mask_hitscan_simple = 0

//dummy vars
bounces = 0

//graphics
varWrite("flash_hitscan",flash_hitscan_pistol)
varWrite("sprite",spr_bullet)
traj_draw = false
traj_length = 64*8
traj_intensity = 2
traj_yscale = 0.4
traj_xscale = 0.4
traj_life = 20
traj_color = make_color_rgb(255,205,148)
traj_intensity_divisor = 1.25
traj_intensity_flicker = 0
traj_scale_divisor = 1
traj_scale_flicker = 0
traj_sprite = spr_light_mask_hitscan_simple
traj_xscale_divisor = 2


//damage
varWrite("damage_body",1)
varWrite("damage_head",2)
varWrite("headshot_difficulty",1)

//damage falloff
varWrite("falloff_x1",64*4)
varWrite("falloff_y1",1)
varWrite("falloff_x2",64*8)
varWrite("falloff_y2",1)
varWrite("falloff_x3",64*12)
varWrite("falloff_y3",1)

//engine
audio_scaler = 1
varWrite("first_in_burst",false)
varWrite("sound",snd_pistol)
varWrite("is_bullet",true)
varWrite("body_death_type","die")
varWrite("gib_distance",-1)
varWrite("headshot_distance",sqrt(room_width*room_width+room_height*room_height))
varWrite("hitscan",false)
varWrite("myX",x)
varWrite("myY",y)
varWrite("xStart",x)
varWrite("yStart",y)
varWrite("local",false)
varWrite("direction",0)
varWrite("speed",0)
varWrite("senderId",MY_PLAYER_NULL)
varWrite("is_bullet",true)
varWrite("local",false)
varWrite("image_blend",c_white)
varWrite("deceleration",0)
varWrite("gravity",0)
varWrite("min_speed",20)
init_net_physics()
hsp = -999
vsp = -999
counter = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free net vars and create traj object if necessary

if traj_draw
{
    var ID = instance_create(x,y,flash_hitscan_simple_generic)
    objVarWrite(ID,"xscale",traj_xscale)
    objVarWrite(ID,"angle",(varRead("direction")+180) mod 360)
    ID.yscale = traj_yscale
    ID.intensity = traj_intensity
    ID.life = traj_life
    ID.color = traj_color
    ID.intensity_divisor = traj_intensity_divisor
    ID.intensity_flicker = traj_intensity_flicker
    ID.scale_divisor = traj_scale_divisor
    ID.scale_flicker = traj_scale_flicker
    ID.sprite = traj_sprite
    ID.xscale_divisor = traj_xscale_divisor
}

ds_map_destroy(netvars)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jump to net x y

x = varRead("myX")
y = varRead("myY")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jump to net x y
x = varRead("myX")
y = varRead("myY")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jump to net x y and transform

image_angle = varRead("direction")
counter ++

if traj_draw
    visible = true

if varRead("speed") = 0
{
    stationary_counter ++
    if stationary_counter &gt; 2
    {
        instance_destroy()
        exit
    }
}

if not varRead("hitscan")
{
    if varRead("speed") &gt; 0
    {
        if vsp = -999 or hsp = -999
        {
            hsp = trigx(varRead("speed"),varRead("direction"))
            vsp =  trigy(varRead("speed"),varRead("direction"))
            add_x = real_speed(hsp)
            add_y = real_speed(vsp)
        } else {
            //NORMAL CASE
            decel_x = trigx(varRead("deceleration"),varRead("direction"))
            decel_y = trigy(varRead("deceleration"),varRead("direction"))
            
            var test_speed = point_distance(x,y,x+real_speed(hsp),y+real_speed(vsp))
            
            if test_speed &lt; real_speed(varRead("min_speed"))
            {
                decel_x = trigx(test_speed-varRead("min_speed"),varRead("direction"))
                decel_y = trigy(test_speed-varRead("min_speed"),varRead("direction"))
            }
            
            hsp -= decel_x
            vsp += real_speed(varRead("gravity")) - decel_y
            varWrite("speed",point_distance(x,y,x+hsp,y+vsp))
            if abs(hsp) &gt; 0.05 and abs(vsp) &gt; 0.05
                varWrite("direction",point_direction(x,y,x+hsp,y+vsp))
            
            add_x = real_speed(hsp)
            add_y = real_speed(vsp)
        }
    } else 
    {
        add_x = 0
        add_y = 0
    }
    
    if is_local_player(varRead("senderId")) and counter &gt; 1
    {
        var inst = hitscan_targets(varRead("myX"), varRead("myY"), varRead("myX")+trigx(varRead("speed"),varRead("direction")), varRead("myY")+trigy(varRead("speed"),varRead("direction")), shootable_generic, true,true, find_player(varRead("senderId")))
        if inst and not have_hit_target
        {
            if SUPER_DEBUG
                printf("Hitting Target from STEP EVENT")
            hit_target(inst,collision_x,collision_y)
        }
        else
        {
            varAdd("myX",add_x)
            varAdd("myY",add_y)
        }
    }
    else
    {
        var inst = hitscan_targets(varRead("myX"), varRead("myY"), varRead("myX")+trigx(varRead("speed"),varRead("direction")), varRead("myY")+trigy(varRead("speed"),varRead("direction")), shootable_generic, true,true, find_player(varRead("senderId")))
        if inst
        {
            varWrite("speed",0)
            varWrite("myX",collision_x)
            varWrite("myY",collision_y)
        } else
        {
            varAdd("myX",add_x)
            varAdd("myY",add_y)
        }
    }
}

x = varRead("myX")
y = varRead("myY")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>COLLISION CHECKING</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///hit blocks

datBlock = instance_place(x,y,block)
if instance_exists(datBlock)
{
    hit_block(datBlock)
}

datBlock = instance_place(x,y,block2_top)
if instance_exists(datBlock)
{
    hit_block(datBlock)
}

if not instance_exists(id)
    exit
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>counter</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw sprite + direction + trajectory (maybe)
depth = -96

if traj_draw
    image_blend = traj_color

draw_sprite_ext(varRead("sprite"),image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)

if traj_draw and (varRead("local") or counter &gt; 1)
{
    var dat_length = min(point_distance(varRead("myX"),varRead("myY"),varRead("startX"),varRead("startY")),traj_length)
    traj_xscale = dat_length/300
    ///draw a simple line
    draw_set_color(traj_color)
    draw_set_alpha(traj_intensity)
    if traj_sprite = spr_none
        draw_line_width(x,y,x+trigx(-300*traj_xscale,varRead("direction")),y+trigy(-300*traj_xscale,varRead("direction")),traj_yscale)
    else
        draw_sprite_ext(traj_sprite,0,x,y,traj_xscale,traj_yscale,(varRead("direction")+180) mod 360,traj_color,traj_intensity)
    draw_set_alpha(1)
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>26,6</point>
    <point>26,26</point>
  </PhysicsShapePoints>
</object>
