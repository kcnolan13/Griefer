<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>modal_window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

force_page = 1
force_row = 0
high_row = 0
page_max = 0

netvars = ds_map_create()

varWrite("create_pages",true)
varWrite("create_grid",true)
varWrite("row_offset",0)
varWrite("force_page",false)

page_orderby = "stats."+"true_skill"

//table pages
pages[0] = NO_HANDLE    page_flags[0] = FL_FIRST        page_offsets[0] = GARBAGE
pages[1] = NO_HANDLE    page_flags[1] = FL_PREVIOUS     page_offsets[1] = GARBAGE
pages[2] = NO_HANDLE    page_flags[2] = 1               page_offsets[2] = -2
pages[3] = NO_HANDLE    page_flags[3] = 2               page_offsets[3] = -1
pages[4] = NO_HANDLE    page_flags[4] = 3               page_offsets[4] = 0
pages[5] = NO_HANDLE    page_flags[5] = 4               page_offsets[5] = 1
pages[6] = NO_HANDLE    page_flags[6] = 5               page_offsets[6] = 2
pages[7] = NO_HANDLE    page_flags[7] = FL_NEXT         page_offsets[7] = GARBAGE
pages[8] = NO_HANDLE    page_flags[8] = FL_LAST         page_offsets[8] = GARBAGE
//end table pages

cursor_depressed = false
mouse_lasty = 0
cursor_sens = 10

row_draw_num = 0
extra_stats = 3

label = "button"+string(id)
active = false
clicked = false
is_sens = false
snap_2view = true
width = global.table_width*2+32
height = view_hview*1/2+64*2.5+2
row_height = global.row_height+8
row_vsep = global.row_vsep+2

hovrow = -1
hovrow_counter = 0
hovrow_delay = 0
show_hovrow = false

first_sort = false

bn_top = NO_HANDLE
bn_bottom = NO_HANDLE

text_color = global.table_font_color
header_text_color = global.table_font_color

header_color = global.table_header_color
color = global.you_all_color
color_highlighted = web_hsv(228,58,80)

scale = 1
alpha = 0
cols = -1
rows = -1
birth_delay = 5
sort_col = -1

scale_lerp_real = 0.2
alpha_max = 1
alpha_highlight = 1
scale_die = 1
scale_highlighted = 1

rows_used = -1

s_thresh = 96
s_index = 0
s_index_max = 0

halign = fa_center
valign = fa_center

grid = NO_HANDLE
grid_header = NO_HANDLE


s_left = 0//left+width+10
s_width = 0//32
s_right = 0//s_left+s_width
s_top = 0//top+64
s_bottom = 0//top+height-64
s_height = 0//s_bottom - s_top
s_curs_height = 0//lerp_real(height/(row_height*s_index_max),1,0.3)*s_height
s_curs_percent = 0//s_index/s_index_max
s_curs_top = 0//s_top+s_curs_percent*(s_height-s_curs_height)
s_curs_bottom = 0//s_curs_top+s_curs_height
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free ds_grid and destroy pages

for (var i=0; i&lt;getLength(pages); i++)
{
    if instance_exists(pages[i])
    {
        with pages[i] instance_destroy()
    }
}

if ds_exists(grid,ds_type_grid)
    ds_grid_destroy(grid)
    
if ds_exists(grid_header,ds_type_grid)
    ds_grid_destroy(grid_header)
    
if ds_exists(netvars,ds_type_map)
    ds_map_destroy(netvars)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust for aligns
if halign = fa_center
    x -= width/2
if valign = fa_center
    y -= height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///behavior
event_inherited()

if not instance_exists(id)
    exit

if varRead("force_page")
{
    force_page = varRead("force_page")
    varWrite("force_page",false)
    with modal_button
    {
        if is_page
        {
            active = false
            if page_offset != GARBAGE
            {
                var pg = max(3,other.force_page)+page_offset
                page_flag = pg
                text = string(pg)   
            }
        }
    }
}

if varRead("force_row")
{
    force_row = varRead("force_row")
    printf("::: row forced to: "+string(force_row))
    
    varWrite("force_row",false)
    s_index = row_height*force_row
    s_index = constrict(s_index,0,s_index_max)
}

if varRead("create_pages") and popped_in and rows_used &gt; 0
{
    varWrite("create_pages",false)
    var pg_font = fnt_hud
    var pg_crop_pad = 14
    var pg_spacer = 5
    var pgs_string = ""
    var num_pgs = getLength(page_flags)
    for (var i=0; i&lt;getLength(page_flags); i++)
    {
        pgs_string += page_flag_2str(page_flags[i])
    }
    draw_set_font(pg_font)
    
    var xadder = -1/2*(string_width(pgs_string)+(2*pg_crop_pad+pg_spacer)*(num_pgs-1))
    var bdelay = 3
    var binc = 3
    
    var prev_width = 0
    
    for (var i=0; i&lt;getLength(pages); i++)
    {
        if not instance_exists(pages[i]) or pages[i] = NO_HANDLE
        {
            page_width = 64
            page_height = 32
            ID = instance_create(x+xadder,top-page_height,bn_typical)
            ID.font = pg_font
            ID.active = true
            pages[i] = ID
            ID.is_page = true
            ID.height = page_height
            ID.auto_crop = true
            ID.crop_pad = pg_crop_pad
            ID.page_offset = page_offsets[i]
            ID.page_flag = page_flags[i]
            ID.page_orderby = "stats."+"true_skill"
            ID.submit_action = scr_bn_page_leaderboards
            ID.birth_delay = bdelay
            ID.color = c_black
            ID.active_color = highlight_color
            bdelay += binc
            
            ID.text = page_flag_2str(page_flags[i])
            
            //this must be done in order
            with (ID) 
            {
                other.temp_width = compute_auto_crop()
            }
            
            if i &lt; getLength(pages)-1
            {
                xadder += ID.width/2+(string_width(page_flag_2str(page_flags[i+1]))+2*pg_crop_pad)/2+pg_spacer
            }
            
        } 
        else if instance_exists(pages[i]) and fade_out {
            //fade out pages when the grid dies
            pages[i].fade_out = true
            pages[i] = NO_HANDLE
        }
    }
}

if hovrow &gt; -1
{
    hovrow_counter ++
    if hovrow_counter &gt; hovrow_delay
        show_hovrow = true
    else show_hovrow = false
}
else show_hovrow = false

if cols &lt; 0 or rows &lt; 0 exit

if not first_sort and ds_exists(grid,ds_type_grid)
{
    var pname = ds_grid_get(grid,0,ds_grid_height(grid)-1)
    
    //default sort by xp when ready
    if is_string(pname) and string_length(pname) &gt; 0
    {
        first_sort = true
        ds_grid_sort(grid,2,false)
    }
}

if grid_header = NO_HANDLE
{
    grid_header = ds_grid_create(cols,1)
    bn_top = instance_create(left+width+32+10,top+32,bn_tbottom)
    bn_top.parent_table = id
    bn_bottom = instance_create(left+width+32+10,top+height+6,bn_tbottom)
    bn_bottom.parent_table = id
    bn_bottom.img_index = 1
    bn_bottom.is_top = false
    
    //NOW WOULD BE THE TIME TO OBTAIN COLUMN NAMES
    ds_grid_add(grid_header,0,0,"username")
    ds_grid_add(grid_header,1,0,"rank")
    ds_grid_add(grid_header,2,0,"true_skill")
    ds_grid_add(grid_header,3,0,"xp")
    ds_grid_add(grid_header,4,0,"ppl")
    ds_grid_add(grid_header,5,0,"kdr")
    ds_grid_add(grid_header,6,0,"wl")
    ds_grid_add(grid_header,7,0,"time")
    ds_grid_add(grid_header,8,0,"kills")
    //ds_grid_add(grid_header,8,0,"deaths")
    ds_grid_add(grid_header,9,0,"assists")
    ds_grid_add(grid_header,10,0,"wins")
    //ds_grid_add(grid_header,11,0,"losses")
    ds_grid_add(grid_header,11,0,"kill_streak")
    ds_grid_add(grid_header,12,0,"win_streak")
    ds_grid_add(grid_header,13,0,"global_rank")
    ds_grid_add(grid_header,14,0,"helmet0")
    ds_grid_add(grid_header,15,0,"hat0")
}

//CREATE THE GRID WHEN YOU HAVE THE TECHNOLOGY!!
if grid = NO_HANDLE and varRead("create_grid")
{
    modal_aligns()
    
    grid = ds_grid_create(cols,rows) //+1 for the index to the left of columns
    
    s_index_max = max(1,(rows+2)*row_height - height)
    
    cols -= extra_stats
    
    //create ascending array
    for (var i=0; i&lt;ds_grid_width(grid); i++)
    {
        ascending[i] = false
    }
    
}

if global.using_gamepad 
{
    if gamepad_button_check_pressed(global.devno,global.cvals[C_JUMP]) 
    or gamepad_button_check_pressed(global.devno,global.cvals[C_SHOOT])
    {
        event_perform(ev_mouse,ev_global_left_press)
    }
    
    if gamepad_button_check_released(global.devno,global.cvals[C_JUMP]) 
    or gamepad_button_check_released(global.devno,global.cvals[C_SHOOT])
    {
        event_perform(ev_mouse,ev_global_left_release)
    }
    
    if gamepad_button_check(global.devno,global.cvals[C_JUMP]) 
    or gamepad_button_check(global.devno,global.cvals[C_SHOOT])
    {
        event_perform(ev_mouse,ev_global_left_button)
    }
}

if clicked
    clicked --
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///release stupid cursor

cursor_depressed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not modal_highlighted(id) and not rect_highlighted(s_left,s_top,s_right,s_bottom)
{
    exit_child = true
    exit
}

if clicked exit
    clicked = 2

//SORT GRID BY COLUMNS
check_sort_col = false
col_high = sort_col_highlighted()
if col_high &gt; -1 and ds_exists(grid,ds_type_grid)
{
    //ds_grid_sort(grid,col_high,ascending[col_high])
    
    var col_high_name = string(ds_grid_get(grid_header,col_high,0))
    
    switch (col_high_name)
    {
        case "username":
            page_orderby = "stats."+"username"
            sort_col = 0
        break
        
        default:
            page_orderby = "stats."+string_lower(col_high_name)
            sort_col = col_high
        break
    }
    
    //all pages will now order by this column as well
    with (modal_button)
    {
        if is_page
        {
            page_orderby = other.page_orderby
        }
    }
    
    page_flag = FL_FINDME
    //ascending[col_high] ^= 1
    //print_ds_grid(grid)
    s_index = 0
    audio_play_sound(snd_click,2,false)
    
    //page the leaderboards!
    scr_bn_page_leaderboards()
}

if not cursor_depressed and rect_highlighted(s_left,s_curs_top,s_right,s_curs_bottom)
{
    audio_play_sound(snd_click,2,false)
    cursor_depressed = true
    mouse_lasty = cursor.y
}
else if not cursor_depressed and rect_highlighted(s_left,s_top,s_right,s_bottom)
{
    audio_play_sound(snd_click,2,false)
    
    //clicks in the general scroll region
    if cursor.y &gt; s_curs_bottom
        s_index += cursor_sens*8
    
    if cursor.y &lt; s_curs_top
        s_index -= cursor_sens*8
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free ds_grid

if ds_exists(grid,ds_type_grid)
    ds_grid_destroy(grid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the stuff

//if ds_exists(grid,ds_type_grid) and nth_frame(30)
  //  print_ds_grid(grid)
  
highlight_color = web_hsv(228,58,80)

if birth_delay &gt; 0 or cols &lt; 0 or rows &lt; 0 or s_index_max &lt; 1 or row_height &lt; 1
{
    if nth_frame(60)
        printf(":::WARNING: can't draw modal_table")
    exit
}

draw_set_alpha(alpha)

modal_aligns()

//DRAW THE GRID

//always draw header
ydraw = top
draw_modal_row(left,ydraw,header_color,header_text_color,alpha,0,grid_header)

//don't draw any rows if there are none to be drawn
if rows_used &lt; 1
{
    if nth_frame(60)
        printf(":::WARNING: can't draw modal_table")
    exit
}

ydraw += row_height*1.5

row_offset = round_nearest(s_index,row_height)/row_height

//all the rows
row_draw_num = 0
for (var i=row_offset; i&lt;ds_grid_height(grid); i++)
{
    var col = color
    
    if string(ds_grid_get(grid,0,i)) = objVarRead(net_manager,"pName")
        col = color_highlighted
        
    draw_modal_row(left,ydraw,col,text_color,alpha,i,grid)
    ydraw += row_height+row_vsep
    row_draw_num++
    
    if ydraw - top &gt; height
        break
}

//SCROLL AROUND
/*
if modal_highlighted(id) and cursor.y &gt; top+row_height+8
{
    if abs(cursor.y-top) &lt; s_thresh and s_index &gt; 0
        s_index -= cursor_sens*2
        
    if abs(ydraw-cursor.y) &lt; s_thresh and s_index &lt; s_index_max
        s_index += cursor_sens*2
}*/

if cursor_depressed
{
    ydif = cursor.y - mouse_lasty
    mouse_lasty = cursor.y
    
    s_index += ydif*(s_index_max/s_height)
}

if mouse_wheel_up()
{
    s_index -= cursor_sens*3
} else if mouse_wheel_down()
{
    s_index += cursor_sens*3
}

//keep scroll area within bounds
s_index = constrict(s_index,0,s_index_max)

//draw scroll bar
s_left = left+width+10
s_width = 32
s_right = s_left+s_width
s_top = top+64
s_bottom = top+height-64+10
s_height = s_bottom - s_top
s_curs_height = lerp_real(height/max(1,(row_height*s_index_max)),1,0.3)*s_height
s_curs_height = constrict(s_curs_height,0,s_height)
s_curs_percent = s_index/max(1,s_index_max)
s_curs_top = s_top+s_curs_percent*(s_height-s_curs_height)
s_curs_bottom = s_curs_top+s_curs_height

//draw border
draw_set_color(c_dkgray)
draw_rectangle(s_left,s_top,s_right,s_bottom,false)

//draw cursor
if rect_highlighted(s_left,s_curs_top,s_right,s_curs_bottom) or cursor_depressed
    draw_set_color(c_ltgray)
else
    draw_set_color(c_gray)

draw_rectangle(s_left,s_curs_top,s_right,s_curs_bottom,false)

//draw popups
if hovrow &gt; -1 and show_hovrow and not instance_exists(modal_dialogue)
{
    //show popup

    draw_player_popup_ext(cursor.x,cursor.y,ds_grid_get(grid,0,hovrow),
        ds_grid_get(grid,1,hovrow),ds_grid_get(grid,13,hovrow),ds_grid_get(grid,2,hovrow),real(ds_grid_get(grid,14,hovrow)),real(ds_grid_get(grid,15,hovrow)),1,false)
    
    if input_check_pressed(mapped_control(C_JUMP)) or mouse_check_button_pressed(mb_left)
    {
        show_player_stats(ds_grid_get(grid,0,hovrow))
    }
}

//printf("::: s_left="+string(s_left)+", s_curs_top="+string(s_curs_top)+", s_right="+string(s_right)+", s_curs_bottom="+string(s_curs_bottom))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>0,0</point>
  </PhysicsShapePoints>
</object>
