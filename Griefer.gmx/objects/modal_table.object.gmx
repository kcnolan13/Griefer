<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>modal_window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
label = "button"+string(id)
active = false
clicked = false
is_sens = false
snap_2view = true
width = global.table_width*2+64*2
height = view_hview*1/2+64
row_height = global.row_height
row_vsep = global.row_vsep+2

bn_top = NO_HANDLE
bn_bottom = NO_HANDLE

text_color = global.table_font_color
header_text_color = global.table_font_color

header_color = global.table_header_color
color = global.you_all_color

scale = 1
alpha = 0
cols = -1
rows = -1
birth_delay = 5

scale_lerp = 0.2
alpha_max = 1
alpha_highlight = 1
scale_die = 1
scale_highlighted = 1

rows_used = 0

s_thresh = 96
s_index = 0
s_index_max = 0

halign = fa_center
valign = fa_center

grid = NO_HANDLE
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free ds_grid

if ds_exists(grid,ds_type_grid)
    ds_grid_destroy(grid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust for aligns
if halign = fa_center
    x -= width/2
if valign = fa_center
    y -= height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///behavior
event_inherited()

if cols &lt; 0 or rows &lt; 0 exit

//CREATE THE GRID WHEN YOU HAVE THE TECHNOLOGY!!
if grid = NO_HANDLE
{
    grid = ds_grid_create(cols,rows)
    s_index_max = rows*row_height - height
    bn_top = instance_create(left+width+48,top+32,bn_tbottom)
    bn_top.parent_table = id
    bn_bottom = instance_create(left+width+48,top+height-32,bn_tbottom)
    bn_bottom.parent_table = id
    
    //NOW WOULD BE THE TIME TO OBTAIN COLUMN NAMES
    ds_grid_add(grid,0,0,"username")
    ds_grid_add(grid,1,0,"rank")
    ds_grid_add(grid,2,0,"xp")
    ds_grid_add(grid,3,0,"ppl")
    ds_grid_add(grid,4,0,"kdr")
    ds_grid_add(grid,5,0,"wl")
    ds_grid_add(grid,6,0,"time")
    ds_grid_add(grid,7,0,"kills")
    ds_grid_add(grid,8,0,"deaths")
    ds_grid_add(grid,9,0,"assists")
    ds_grid_add(grid,10,0,"wins")
    ds_grid_add(grid,11,0,"losses")
    ds_grid_add(grid,12,0,"kill_streak")
    ds_grid_add(grid,13,0,"win_streak")
}

if global.using_gamepad 
{
    if gamepad_button_check_pressed(global.devno,global.cvals[C_JUMP]) 
    or gamepad_button_check_pressed(global.devno,global.cvals[C_SHOOT])
    {
        event_perform(ev_mouse,ev_global_left_press)
    }
    
    if gamepad_button_check(global.devno,global.cvals[C_JUMP]) 
    or gamepad_button_check(global.devno,global.cvals[C_SHOOT])
    {
        event_perform(ev_mouse,ev_global_left_button)
    }
}

if clicked
    clicked --
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free ds_grid

if ds_exists(grid,ds_type_grid)
    ds_grid_destroy(grid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the stuff
if birth_delay &gt; 0 or cols &lt; 0 or rows &lt; 0
    exit

draw_set_alpha(alpha)

left = x
top = y

if halign = fa_center
    left -= width*scale/2
if halign = fa_right
    left -= width*scale/2
    
if valign = fa_center
    top -= height*scale/2
if valign = fa_bottom
    top -= height*scale/2

//DRAW THE GRID

//always draw header
ydraw = top
draw_modal_row(left,ydraw,header_color,header_text_color,alpha,0)

ydraw += row_height*1.5

var ist = round_nearest(s_index,row_height)/row_height+1

//all the rows
for (var i=ist; i&lt;ds_grid_height(grid); i++)
{
    draw_modal_row(left,ydraw,color,text_color,alpha,i)
    ydraw += row_height+row_vsep
    
    if ydraw - top &gt; height
        break
}

//SCROLL AROUND
if modal_highlighted(id)
{
    if abs(cursor.y-top) &lt; s_thresh and s_index &gt; 0
        s_index -= 5
        
    if abs(ydraw-cursor.y) &lt; s_thresh and s_index &lt; s_index_max
        s_index += 5
}

//keep scroll area within bounds
s_index = constrict(s_index,0,s_index_max)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>0,0</point>
  </PhysicsShapePoints>
</object>
