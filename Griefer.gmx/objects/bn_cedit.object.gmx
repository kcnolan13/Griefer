<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>modal_button</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inherit and define properties
was_highlighted = false
recompute_sens_percent = false
capture_timer = 0
life = 0
event_inherited()
text = "Some Text"
alpha_max = 0.75
halign = fa_center
valign = fa_center
myLabel = noone
xs = 0
xf = 0
sens_divs = 20

sens_col = make_colour_hsv(255*2/3,0,210)
sens_bg = make_colour_hsv(0,0,20)

sp = 4
is_sens = false
is_yesno = false
is_onoff = false
sens_val = 0
sens_low = 0
sens_high = 0
sens_percent = 50
sens_update = false

alarm[0] = 1

exit_child = false

hue = 0
sat = 0
val = 0
notif_scale = 1.25

label_name = "blah"
text_normal = text
text_capturing = "ESC to Cancel"
capturing = false
using_gamepad = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust for aligns
if halign = fa_center
    x -= width/2
if valign = fa_center
    y -= height/2
    
text_normal = text

//printf("::: "+string(label_name)+" initialized with sense val: "+string(sens_val))

if is_sens
{
    sens_percent = (sens_val-sens_low)/(sens_high - sens_low)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///capture input
if not modal_highlighted(id) and was_highlighted
{
    was_highlighted--
}

if string_upper(text) = "YES" or string_upper(text) = "NO"
{
    is_yesno = true
    is_onoff = false
    is_sens = false
}

if string_upper(text) = "ON" or string_upper(text) = "OFF"
{
    is_onoff = true
    is_yesno = false
    is_sens = false
}

if not is_sens
{
    if not capturing
        capture_timer = 0
    else
        capture_timer ++

    if capturing and capture_timer &gt; room_speed/2
    {
        capture_mapping_input()
    }
    
    if instance_exists(myLabel) and not visible
    {
        visible = true
        myLabel.visible = true
    }
    
}
else
{
    xs = drew_left+sp
    xf = drew_right-sp
    
    if instance_exists(myLabel) 
    {
        if not global.using_gamepad
        {
            visible = false
            myLabel.visible = false
        } else
        {
            visible = true
            myLabel.visible = true
        }
        
    }
    
    if string(label_name) = global.cactions[C_LOOK_SENS]
    {
        if global.using_gamepad
        {
            sens_low = global.match_cursor_speed_low
            sens_high = global.match_cursor_speed_high
        }
        else
        {
            sens_low = global.nogp_match_cursor_speed_low
            sens_high = global.nogp_match_cursor_speed_high
        }
    }
    else
    {
        if global.using_gamepad
        {
            sens_low = global.cursor_speed_low
            sens_high = global.cursor_speed_high
        }
        else
        {
            sens_low = global.nogp_cursor_speed_low
            sens_high = global.nogp_cursor_speed_high
        }
    }
    
    //is a sensitivity input
    if sens_update
    {
        sens_update --   
        
        if not sens_update
        {
            //update the control values for this field
            map_control(label_name,sens_val)
        }
    }
    
    if recompute_sens_percent
    {
        sens_percent = (sens_val-sens_low)/(sens_high - sens_low)
    }   
    
    if sens_val &gt; sens_high
        sens_val = sens_high
    if sens_val &lt; sens_low
        sens_val = sens_low
    
}

if instance_exists(myLabel) and myLabel.text = global.cactions[C_SWAP_STICKS]
{
    if global.using_gamepad
    {
        if not visible
        {
            scale = 0
            alpha = 0
            popped_in = false
        }  
        visible = true
    }
    else
    {
        visible = false
    }
    if global.cvals[C_SWAP_STICKS]
    {
        text = "True"
        text_normal = "True"
    } else
    {
        text = "False"
        text_normal = "False"
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dat ish
event_inherited()
label = text
life++

if life &gt; 1
{
    if not capturing
        text = text_normal
    else
        text = text_capturing
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dat ish
if not modal_highlighted(id)
{
    exit_child = true
    exit
}

if clicked exit
    clicked = 2

printf("clicked: "+label)
audio_play_sound(snd_click,2,false)

if not is_onoff and not is_yesno
{
    if instance_exists(myLabel) and myLabel.text != global.cactions[C_SWAP_STICKS]
    {
        text = "Capturing ..."
        capturing = true
    }
    else
    {
        global.cvals[C_SWAP_STICKS] ^= 1
        
        if global.using_gamepad
            transmit_control_map(FL_GAMEPAD)
        else
            transmit_control_map(FL_KEYBOARD)
    }
}
else
{
    if string_upper(text) = "YES"
        text = "No"
    else if string_upper(text) = "NO"
        text = "Yes"
    else if string_upper(text) = "ON"
        text = "OFF"
    else if string_upper(text) = "OFF"
        text = "ON"
        
    //ADJUST THE REAL SETTING VARIABLES BASED ON MYLABEL TEXT
    
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sensitivity

if is_sens and modal_highlighted(id) or was_highlighted
{
    was_highlighted = 2
    //var xf = (x + 2*width*scale/2)
    sens_percent = ceil(sens_divs*(cursor.x-xs)/(xf-xs))
        if sens_percent &lt; 1
            sens_percent = 1
        if sens_percent &gt; sens_divs
            sens_percent = sens_divs
    sens_percent = sens_percent/sens_divs
    
    sens_val = (sens_high - sens_low)*sens_percent+sens_low
    sens_update = 5
    
    if sens_val &gt; sens_high
        sens_val = sens_high
    if sens_val &lt; sens_low
        sens_val = sens_low
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set text to "" for sensitivity controls
if is_sens
{
    text = ""
    text_normal = ""
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw is_sens

if is_sens and popped_in
{   
        
   // sens_percent = (sens_val-sens_low)/(sens_high - sens_low)
        
    if sens_percent &lt; 0
        sens_percent = 0
    if sens_percent &gt; 1
        sens_percent = 1
    
    //printf(":::sens_val = "+string(sens_val)+", sens_high = "+string(sens_high)+", sens_low = "+string(sens_low)+", sens_percent="+string(sens_percent))
        
    more_text = string(ceil(sens_divs*sens_percent))
    header_text = ""
    
    draw_set_alpha(alpha+0.2)
    draw_set_color(sens_bg)
    draw_rectangle(xs,top+sp,xf,top+height*scale-sp,false)
    draw_set_color(sens_col)
    draw_rectangle(xs,top+sp,xs+(xf-xs)*sens_percent,top+height*scale-sp,false)
    draw_set_font(fnt_hud_big)
    
    if sens_percent &lt; 0.5
         draw_set_color(c_white)
    else draw_set_color(c_black)
    
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
        
    xpos = left+width*scale/2
    ypos = top+height*scale/2-10
    xpos += text_xoff*scale
    ypos += text_yoff*scale
    draw_text_ext_transformed(xpos,ypos,more_text,10,width*scale,scale,scale,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///escape cancels control capture
capturing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>0,0</point>
  </PhysicsShapePoints>
</object>
