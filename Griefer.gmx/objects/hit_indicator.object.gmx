<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hit_indicator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-97</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
alpha = 0
draw_radius1 = 1024/6
draw_radius2 = 1024/3.5
dir = 0
alpha_divisor = 1.05
indicator_scale = 0.5

threshold_critical = 40
draw_alpha1 = 0
draw_alpha2 = 0
draw_alpha3 = 0
draw_alpha4 = 0
draw_alpha5 = 0

draw_y = 0
draw_x = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust params
if alpha &gt; 0
{
    alpha /= alpha_divisor
    if alpha &lt; 0.001
        alpha = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the hit indicator
//printf("entering indicator draw")

if instance_exists(net_manager.local_player) and objVarRead(net_manager.local_player,"alive")
{
    
    hp = floor(objVarRead(net_manager.local_player,"hp"))
    
    if not net_manager.local_player.respawn_counter
    {
    
        draw_x = net_manager.local_player.x
        draw_y = net_manager.local_player.y
    
        draw_alpha1 = (100-hp)/100
        
        if hp &lt; threshold_critical
        {
            draw_alpha2 = (threshold_critical-hp)/threshold_critical
            if DEBUG
                printf("hp is critical. 2nd indicator kicking in.")
        } 
        else 
        {
            draw_alpha2 = 0
        }
    }
    else
    {
        if net_manager.local_player.respawn_counter &lt; 0.75*net_manager.local_player.respawn_delay
        {
            draw_alpha1 /= alpha_divisor
            draw_alpha2 /= 1+3*(alpha_divisor-1)
        }
    }
    
    draw_sprite_ext(spr_hit_indicator,0,draw_x+trigx(draw_radius1,dir+180),draw_y+trigy(draw_radius1,dir+180),indicator_scale,indicator_scale,dir+180,c_white,draw_alpha1)
    draw_sprite_ext(spr_hit_indicator3,0,draw_x+trigx(draw_radius2,dir+180),draw_y+trigy(draw_radius2,dir+180),indicator_scale,indicator_scale,dir+180,c_white,draw_alpha2)
    
} else if in_match(){
    if not instance_exists(net_manager.local_player)
        printf("ERROR: no local player")
    /*else if not objVarRead(net_manager.local_player,"alive")
        printf("WARNING: cursor knows localplayer is not alive: alive val: "+string(objVarRead(net_manager.local_player,"alive")))*/
}

//OLD FADE CODE
/*if alpha &gt; 0
{
    if instance_exists(net_manager.local_player)
    {
        if objVarRead(net_manager.local_player,"hp") &gt; 0
        {
            draw_x = net_manager.local_player.x
            draw_y = net_manager.local_player.y
        }
    } else
    {
        draw_x = view_xview+view_wview/2
        draw_y = view_yview+view_hview/2
    }
    //printf("drawing indicator")
    draw_sprite_ext(spr_hit_indicator,0,draw_x+trigx(draw_radius,dir+180),draw_y+trigy(draw_radius,dir+180),0.5,0.5,dir+180,c_white,alpha)
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>60,178</point>
    <point>178,178</point>
  </PhysicsShapePoints>
</object>
