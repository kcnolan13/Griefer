<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_challenge_generic</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///general challenge properties
completed_num = 0
is_progression = false
is_challenge = true
is_competitive = false
is_bot_mode = false
dat_blend_mode = bm_normal

completed_quietly = false

regen_delay= 0

surf_slot = surface_create(72*2,72*2)
alarm[1] = random_range(30/2,30*2)

draw_allow = 0

name = "challenge_generic"
description = "do nothing... to noone..."
disabled = false
alarm[0] = 1
completed = false
challenge_index = 0
new = false
scl = 0.75

auto_frame_offset = ceil(random_range(1,4))
auto_frame_counter = auto_frame_offset

progress_varname = ""
progress = 0
progress_max = 0

left = 0
right = 0
top = 0
bottom = 0

xp = 250

spacer = 2
shown_completed = false
tripped_end_match = false
color_incomplete = global.challenge_color_incomplete
color_complete = c_white
icon_incomplete = icon_lock2
icon_complete = spr_head
color = c_white
icon = spr_head
font = fnt_hud_big
show_number = 0

popup_xoff = 0
popup_xoff_extra = 0
popup_yoff_original = -55
popup_yoff = popup_yoff_original
popup_yoff_extra = 0
popup_hsp = 0
popup_vsp = 0
sweep_delay = 2.5*30
sweep_counter = 0

popup_show = false           
txt_show = false

txt_alpha_idle = 0.35
txt_alpha_highlighted = 0.8
txt_alpha = txt_alpha_idle
txt_alpha_target = txt_alpha
txt_alpha_lerp_real = 0.25

txt_scale_idle = 72/global.challenge_slot_width
txt_scale_highlighted = txt_scale_idle*1.35
txt_scale = txt_scale_idle
txt_scale_target = txt_scale
txt_scale_lerp_real = 0.75

popup_alpha_idle = 0.5
popup_alpha_highlighted = 1
popup_alpha_lerp_real = 0.1
popup_alpha = popup_alpha_idle
popupa_alpha_target = popup_alpha

hover_counter = 0
hover_delay = 5
hovering = false

played_highlight_sound = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free surfaces
if surface_exists(surf_slot)
    surface_free(surf_slot)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw slot to surface at the highest scale expected (2?)
if not surface_exists(surf_slot)
{
    surf_slot = surface_create(net_manager.armory_sl*2,net_manager.armory_sl*2)
    if not surface_exists(surf_slot)
    {
        printf("ERROR: challenge_generic cannot find surf_slot in alarm[1] ... trying to regenerate")
        return false
    }
    else
    {
        //printf(":::WARNING: had to regenerate surf_slot for challenge_generic")
    }
}

surface_set_target(surf_slot)

    draw_clear(c_black)
    draw_set_color(c_white)
    draw_set_alpha(1)

    tempscale = 2
    var drawspr = icon
    var square_xmid = 72/2*tempscale
    var square_ymid = 72/2*tempscale
    var proper_scale = tempscale*scale_2icon(drawspr)//*64/72
    var spr_xoff = (sprite_get_width(drawspr)/2-sprite_get_xoffset(drawspr))*proper_scale
    var spr_yoff = (sprite_get_height(drawspr)/2-sprite_get_yoffset(drawspr))*proper_scale
    
    draw_bpart_slot_ext(0, 0, tempscale, color, 1)
    draw_set_blend_mode(bm_normal)
    draw_sprite_ext(drawspr,0,0+square_xmid-spr_xoff,0+square_ymid-spr_yoff,proper_scale,proper_scale,0,c_white,10)
    
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync reward with icon
rewards[0] = icon
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///challenge auto completion
auto_frame_counter --
if auto_frame_counter &lt; 1
{
    auto_frame_counter = auto_frame_offset
    if in_match() and progress_varname != "" and not match_starting() //reduce frames checked to save performance a bit
    {
        var grav = net_manager.stat_gravatar
        if instance_exists(grav) and instance_exists(myAvatar()) and playerName(grav) != playerName(myAvatar())
        {
            printf(":::WARNING: cannot complete challenge while looking at another player ("+playerName(grav)+")'s stats")
        }
        else //yes you can complete this challenge!
        {
            if is_competitive
                progress = acc_data(progress_varname,COL_TOTAL)
            else if is_bot_mode
                progress = acc_data(progress_varname,COL_BOT_TOTAL)
            else if is_challenge
                progress = acc_data(progress_varname,COL_TOTAL) + acc_data(progress_varname,COL_BOT_TOTAL)
            
            progress_max = acc_data(progress_varname,COL_CHAL_NEEDED)
            
            if progress &gt; progress_max or completed
                progress = progress_max
                
            if progress &gt;= progress_max and not completed and progress_max &gt; 0
            {
                printf("::: auto completing challenge: "+string(name))
                if abs(rtime() - net_manager.starting_match_delay) &lt; auto_frame_offset*3
                    completed_quietly = true
                complete_challenge(name)
            }
        }
    }
}

if nth_frame(120) and room = rm_lobby or room = rm_menu and progress_varname != "" and menmode() = "challenges"
{
    var grav = net_manager.stat_gravatar
    if not (instance_exists(grav) and instance_exists(myAvatar()) and playerName(grav) != playerName(myAvatar()))
    {
        if is_competitive
            progress = acc_data(progress_varname,COL_TOTAL)
        else if is_bot_mode
            progress = acc_data(progress_varname,COL_BOT_TOTAL)
        else if is_challenge
            progress = acc_data(progress_varname,COL_TOTAL) + acc_data(progress_varname,COL_BOT_TOTAL)
        
        progress_max = acc_data(progress_varname,COL_CHAL_NEEDED)
        
        if progress &gt; progress_max or completed
            progress = progress_max   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show it when you complete a challenge
if global.using_gamepad 
{
    if gamepad_button_check_pressed(global.devno,global.cvals[C_JUMP]) 
    or gamepad_button_check_pressed(global.devno,global.cvals[C_SHOOT])
    {
        event_perform(ev_mouse,ev_global_left_press)
    }
}

if completed
{
    icon = icon_complete
    color = color_complete
}
else
{
    //icon = icon_complete
    //color = color_complete
    icon = icon_complete
    color = color_complete
}

if in_match() and completed and not completed_quietly and (not shown_completed or (not tripped_end_match and objVarRead(net_manager,"end_match_coming")))
{
    printf(":::SHOW POPUP TRIGGERED FOR: "+name)
    if objVarRead(net_manager,"end_match_coming")
        tripped_end_match = true
        
    popup_show = true
    popup_alpha = 0.1//popup_alpha_idle
    popup_alpha_target = popup_alpha_highlighted
    sweep_counter = sweep_delay
    popup_hsp = 0//5
    popup_xoff = 0
    popup_yoff = popup_yoff_original
    shown_completed = true
}

if in_match() and popup_show
{
    x = WVIEW-(global.challenge_popup_width)*scl+popup_xoff+popup_xoff_extra
    y = HVIEW-(global.challenge_popup_height)*scl+popup_yoff+popup_yoff_extra
    
    show_number = 0
    
    for (var i=0; i&lt;instance_number(challenge_generic); i++)
    {
        CHA = instance_find(challenge_generic,i)
        if CHA.popup_show and not CHA.completed_quietly
        {
            if CHA.id != id
                show_number ++
            else
                break
        }
    }
    
    popup_yoff = popup_yoff_original-72*show_number
    
    if sweep_counter
    {
        sweep_counter = sub_real(sweep_counter,1)
    }
 
    if not sweep_counter and not match_ending()
    {
        popup_alpha_target = 0
        
        popup_xoff_extra += popup_hsp
        popup_yoff_extra += popup_vsp
        
        if popup_alpha &lt; 0.1
        {
            popup_show = false
            popup_xoff = 0
            popup_yoff = popup_yoff_original
            popup_hsp = 0
            popup_alpha = popup_alpha_idle
        }
    }
}

if popup_show
{
    popup_alpha = lerp_real(popup_alpha, popup_alpha_target, popup_alpha_lerp_real)
    
    if popup_alpha &lt; 0.05
        popup_show = false
}

if txt_show
{
    txt_alpha = lerp_real(txt_alpha,txt_alpha_target,txt_alpha_lerp_real)
    txt_scale = lerp_real(txt_scale,txt_scale_target,txt_scale_lerp_real)
    
    if txt_alpha &lt; 0.05
        txt_show = false
}
else
{
    txt_scale = txt_scale_idle
    txt_alpha = txt_alpha_idle
}

if hovering
{
    cursor_highlight()
    txt_alpha_target = txt_alpha_highlighted
    txt_scale_target = txt_scale_highlighted
    hover_counter += real_speed(1)
} else if hover_counter &gt; 0
{
    hover_counter = sub_real(hover_counter,1)
    txt_alpha_target = txt_alpha_idle
    txt_scale_target = txt_scale_idle
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///regen surface when needed
if not surface_exists(surf_slot) and not regen_delay
{
    //regen challenge slot surfaces
    alarm[1] = ceil(random_range(5,15))
    regen_delay = 30
    //printf("::: calling for a challenge surface regen")
}
else if regen_delay
{
    regen_delay --
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///redeem your gear
if not instance_place(x,y,cursor) exit

if not in_match() and net_manager.menu_mode = "challenges" and completed
{
    var goto_armory = false
    new = false
    for (var i=0; i&lt;getLength(rewards); i++)
    {
        if not bpart_has_armor_lists(rewards[i]) and not bpart_has_cache(rewards[i])
        {
            audio(snd_pan4,GAIN_PAN)
            destList = global.cache
            
            /* screw this for now
            limbType = bpart_lookup(rewards[i],global.BPART_LIMB_TYPE)
            bpartList = get_bpart_list(limbType)
            listInd = get_bpart_list_index(limbType)
            if ds_list_size(bpartList) = 0 or not instance_exists(bpartList[| 0])
            {
                //instantiate right into your gear
                net_manager.armory_disabled[listInd] = false
                destList = bpartList
            }*/
            
            blah = instantiate_bpart(rewards[i],global.src_challenge, destList)
            blah.txt_new = net_manager.txt_new
            blah.col_new = net_manager.col_challenge
            blah.new = true
            goto_armory = true
        }
    }
    
    if goto_armory
    {
        net_manager.menu_mode = "armory"
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear popup_show
popup_show = false
completed_num = 0
global.challenges_this_match = 0

if in_match() and completed
    shown_completed = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free surfaces
if surface_exists(surf_slot)
    surface_free(surf_slot)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw popups in game, at end game, txt in menu, and popups in menu
if room = rm_menu or room = rm_lobby
{
    /*draw_set_alpha(1)
    draw_set_color(c_red)
    draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,true)*/
    image_xscale =2 
    image_yscale =2
    //printf(net_manager.menu_mode)
    if net_manager.menu_mode = "challenges"
    {
        txt_show = true
        //printf("drawing bpart_slot_complete @ "+x+", "+y)
        var off = (txt_scale*72-72)/2
        
        //if draw_allow = 1
        draw_bpart_slot_complete_ext(id, x-off, y-off, txt_scale, txt_alpha)
            
        if new
        {
            draw_notification(1,x-off+global.noffset*txt_scale,y-off+global.noffset*txt_scale,txt_scale,color_complete,1)
        }
        
        //done in popup_drawer now
        //draw_mod_notification(x+72-global.moffset,y+global.moffset,icon)
        
        if cursor.x &gt;= x and cursor.y &gt;= y and cursor.x &lt;= bbox_right and cursor.y &lt;= bbox_bottom
            //and not challenge_manager.challenge_showing_popup
        {
            hovering = true
        }
        else
        {
            hovering = false
            played_highlight_sound = false
            //hover_counter = 0
        }
        
        if hovering and not played_highlight_sound
        {
            played_highlight_sound = true
            audio(snd_scroll,GAIN_HIGHLIGHT)
        }
        
        if hover_counter &gt; hover_delay and instance_place(x,y,cursor)
        {
            //draw the popup for this challenge
            popup_show = true
            popup_alpha = popup_alpha_highlighted
            popup_alpha_target = popup_alpha
            icon = icon_complete
            
            //done in popup_drawer now
            //draw_popup_challenge(cursor.x, cursor.y, name, "", desc, icon, color_complete, 1,1)
            
            //determine whether to use the surface or not
            
            
            depth = -103
            if new
                new = false
        } else 
        {
            popup_show = false
            popup_alpha = 0
            depth = -96
        }
    }
    else
    {
        txt_show = false
        popup_show = false
    }
}

//BEHAVIOR FOR IN MATCH
if in_match() and popup_show and not is_progression and not completed_quietly
{
    var endmatch_offset = 0
    var descr = description
    if match_ending()
    {
        //endmatch_offset = 64
        //descr = ""
        popup_xoff_extra = 0
    }
    
    var dy = y+(popup_yoff+popup_yoff_extra)*scl
    if dy &lt; 64 dy = 64
    if dy &gt; HVIEW-64 dy = HVIEW-64
    draw_popup_challenge(x+(popup_xoff+popup_xoff_extra+endmatch_offset)*(1+(1-scl)), dy, name, "", descr, icon, color, popup_alpha,scl)
    //printf("::: show_number = "+string(show_number)+", id="+string(id)+", popup_xoff="+string(popup_xoff)+", popup_xoff_extra="+string(popup_xoff_extra))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="33">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blend mode

dat_blend_mode++
    if dat_blend_mode &gt; bm_src_alpha_sat
dat_blend_mode = bm_zero

alarm[1] = 1
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw allow
draw_allow ++
if draw_allow &gt; 3
    draw_allow = 0
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
