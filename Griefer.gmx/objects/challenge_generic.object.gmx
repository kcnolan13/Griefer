<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_challenge_generic</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///general challenge properties
completed_num = 0
is_progression = false
is_challenge = true
is_weapon = false
name = "challenge_generic"
description = "do nothing... to noone..."
disabled = false
alarm[0] = 1
completed = false
challenge_index = 0
new = false

xp = 250

spacer = 4
shown_completed = false
tripped_end_match = false
color_incomplete = global.challenge_color_incomplete
color_complete = c_white
icon_incomplete = icon_lock2
icon_complete = spr_head
color = c_white
icon = spr_head
font = fnt_hud_big

popup_xoff = 0
popup_yoff_original = -68
popup_yoff = popup_yoff_original
popup_hsp = 0
popup_vsp = 0
sweep_delay = 2.5*room_speed
sweep_counter = 0

popup_show = false           
txt_show = false

txt_alpha_idle = 0.35
txt_alpha_highlighted = 0.8
txt_alpha = txt_alpha_idle
txt_alpha_target = txt_alpha
txt_alpha_lerp = 0.5

txt_scale_idle = 72/global.challenge_slot_width
txt_scale_highlighted = txt_scale_idle*1.35
txt_scale = txt_scale_idle
txt_scale_target = txt_scale
txt_scale_lerp = 0.5

popup_alpha_idle = 0.5
popup_alpha_highlighted = 1
popup_alpha_lerp = 0.1
popup_alpha = popup_alpha_idle
popupa_alpha_target = popup_alpha

hover_counter = 0
hover_delay = 10
hovering = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync reward with icon
rewards[0] = icon
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update offsets
if in_match() and popup_show
{
    x = view_xview+view_wview-global.challenge_popup_width-net_manager.armory_ysep+popup_xoff
    y = view_yview+view_hview-global.challenge_popup_height-net_manager.armory_ysep+popup_yoff
    
    col_id = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,challenge_generic,false,true)
    if instance_exists(col_id) and id &lt; col_id.id
    {
        popup_yoff -= (bbox_bottom-bbox_top)*spacer
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update offsets
if in_match() and popup_show
{
    x = view_xview+view_wview-global.challenge_popup_width-net_manager.armory_ysep+popup_xoff
    y = view_yview+view_hview-global.challenge_popup_height-net_manager.armory_ysep+popup_yoff
    
    col_id = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,challenge_generic,false,true)
    if instance_exists(col_id) and id &lt; col_id.id
    {
        popup_yoff -= (bbox_bottom-bbox_top)*spacer
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show it when you complete a challenge
if global.using_gamepad 
{
    if gamepad_button_check_pressed(global.devno,global.cvals[C_JUMP]) 
    or gamepad_button_check_pressed(global.devno,global.cvals[C_SHOOT])
    {
        event_perform(ev_mouse,ev_global_left_press)
    }
}

if completed
{
    icon = icon_complete
    color = color_complete
}
else
{
    //icon = icon_complete
    //color = color_complete
    icon = icon_complete
    color = color_complete
}

if in_match() and completed and (not shown_completed or (not tripped_end_match and objVarRead(net_manager,"end_match_coming")))
{
    printf("SHOW POPUP TRIGGERED FOR: "+name)
    if objVarRead(net_manager,"end_match_coming")
        tripped_end_match = true
        
    if tripped_end_match
    {
        popup_yoff_original += 64*2.5-48
    }
        
    popup_show = true
    popup_alpha = popup_alpha_idle
    popup_alpha_target = popup_alpha_highlighted
    sweep_counter = sweep_delay
    popup_hsp = 5
    popup_xoff = 0
    popup_yoff = popup_yoff_original
    shown_completed = true
}

if in_match() and popup_show
{
    x = view_xview+view_wview-global.challenge_popup_width-net_manager.armory_ysep+popup_xoff
    y = view_yview+view_hview-global.challenge_popup_height-net_manager.armory_ysep+popup_yoff
    
    col_id = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,challenge_generic,false,true)
    if instance_exists(col_id) and id &lt; col_id.id
    {
        popup_yoff -= (bbox_bottom-bbox_top)*spacer
    }
    
    if sweep_counter
        sweep_counter --
        
    if not sweep_counter
    {
        popup_xoff += popup_hsp
        popup_yoff += popup_vsp
        
        if x &gt; room_width+64
        {
            popup_show = false
            popup_xoff = 0
            popup_yoff = popup_yoff_original
            popup_hsp = 0
            popup_alpha = popup_alpha_idle
        }
    }
}

if popup_show
{
    popup_alpha = lerp(popup_alpha, popup_alpha_target, popup_alpha_lerp)
    
    if popup_alpha &lt; 0.05
        popup_show = false
}

if txt_show
{
    txt_alpha = lerp(txt_alpha,txt_alpha_target,txt_alpha_lerp)
    txt_scale = lerp(txt_scale,txt_scale_target,txt_scale_lerp)
    
    if txt_alpha &lt; 0.05
        txt_show = false
}
else
{
    txt_scale = txt_scale_idle
    txt_alpha = txt_alpha_idle
}

if hovering
{
    txt_alpha_target = txt_alpha_highlighted
    txt_scale_target = txt_scale_highlighted
    hover_counter ++
} else if hover_counter
{
    hover_counter --
    txt_alpha_target = txt_alpha_idle
    txt_scale_target = txt_scale_idle
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///redeem your gear
if not instance_place(x,y,cursor) exit

if not in_match() and net_manager.menu_mode = "challenges" and completed
{
    var goto_armory = false
    new = false
    for (var i=0; i&lt;getLength(rewards); i++)
    {
        if not bpart_has_armor_lists(rewards[i]) and not bpart_has_cache(rewards[i])
        {
            
            destList = global.cache
            
            /* screw this for now
            limbType = bpart_lookup(rewards[i],global.BPART_LIMB_TYPE)
            bpartList = get_bpart_list(limbType)
            listInd = get_bpart_list_index(limbType)
            if ds_list_size(bpartList) = 0 or not instance_exists(bpartList[| 0])
            {
                //instantiate right into your gear
                net_manager.armory_disabled[listInd] = false
                destList = bpartList
            }*/
            
            blah = instantiate_bpart(rewards[i],global.src_challenge, destList)
            blah.txt_new = net_manager.txt_new
            blah.col_new = net_manager.col_challenge
            blah.new = true
            goto_armory = true
        }
    }
    
    if goto_armory
    {
        net_manager.menu_mode = "armory"
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear popup_show
popup_show = false
completed_num = 0
global.challenges_this_match = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw popups in game, at end game, txt in menu, and popups in menu
if room = rm_menu or room = rm_lobby
{
    /*draw_set_alpha(1)
    draw_set_color(c_red)
    draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,true)*/
    image_xscale =2 
    image_yscale =2
    //printf(net_manager.menu_mode)
    if net_manager.menu_mode = "challenges"
    {
        txt_show = true
        //printf("drawing bpart_slot_complete @ "+x+", "+y)
        var off = (txt_scale*72-72)/2
        draw_bpart_slot_complete_ext(id, x-off, y-off, txt_scale, txt_alpha)
        if new
        {
            draw_notification(1,x-off+global.noffset*txt_scale,y-off+global.noffset*txt_scale,txt_scale,color_complete,1)
        }
        draw_mod_notification(x+72-global.moffset,y+global.moffset,icon)
        
        if cursor.x &gt;= x and cursor.y &gt;= y and cursor.x &lt;= bbox_right and cursor.y &lt;= bbox_bottom
            and not challenge_manager.challenge_showing_popup
        {
            hovering = true
        }
        else
        {
            hovering = false
        }
        
        if hover_counter &gt; hover_delay and instance_place(x,y,cursor)
        {
            //draw the popup for this challenge
            popup_show = true
            popup_alpha = popup_alpha_highlighted
            popup_alpha_target = popup_alpha
            icon = icon_complete
            
            var desc = description
            
            if completed
            {
                for (var i=0; i&lt;getLength(rewards); i++)
                {
                    if not bpart_has_armor_lists(rewards[i]) and not bpart_has_cache(rewards[i])
                    {
                        desc = "Click To Redeem!"
                    }
                }
            }
            
            draw_popup_challenge(cursor.x, cursor.y, name, desc, icon, color_complete, 1)
            
            //determine whether to use the surface or not
            //if completed
            {
                mod_ind = bpart_mod_index(icon)
                with popup_drawer
                {
                    mod_ind = other.mod_ind
                    icon_ref = other.icon
                    
                    if mod_ind &gt; GARBAGE and surface_exists(surf_popup)
                    {
                        surface_set_target(surf_popup)
                        draw_clear_alpha(c_black,0)
                        draw_set_color(c_white)
                        draw_set_alpha(1)
                        
                        col = c_white
                        
                        if bpart_mod_var(icon_ref) = "blood_color"
                        {
                            col = bpart_mod_val(icon_ref)
                            draw_set_color(c_white)
                            //draw some blood to the popup surface.... also draw the fancy text
                            draw_splats(global.popup_width-40,40,0.6,col,1)
                        }
                        
                        //draw the fancy text
                        surface_reset_target()
                        
                        draw_set_alpha(1)
                        draw_surface(surf_popup,other.left+(global.challenge_popup_width-global.popup_width),other.top)
                        
                        var t = global.mod_descriptions[mod_ind]
                        var tcol = c_white
                            if do_fancy_text_black(col)
                                tcol = c_black
                        var tscale = 1*global.notification_scale
                        var trot = -45
                        var toff = 32
                        draw_set_color(tcol)
                        draw_set_font(fnt_mod)
                        draw_set_halign(fa_center)
                        draw_set_valign(fa_center)
                        draw_text_ext_transformed(other.right-toff,other.top+toff,t,24,global.popup_width,tscale,tscale,trot)
                        draw_set_font(fnt_hud)
                    }
                }
            }
            
            depth = -103
            if new
                new = false
        } else 
        {
            popup_show = false
            popup_alpha = 0
            depth = -96
        }
    }
    else
    {
        txt_show = false
        popup_show = false
    }
}

//BEHAVIOR FOR IN MATCH
if in_match() and popup_show and not is_progression
{
    if net_manager.match_countdown
        y = view_yview+view_hview-global.challenge_popup_height+popup_yoff_original-completed_num*spacer*(bbox_bottom-bbox_top)
        
    draw_popup_challenge(x, y, name, description, icon, color, popup_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
