<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>character_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
netvars = NO_HANDLE

bound_bn_ready = instance_create(x,y,bn_ready)
bound_bn_ready.bound_avatar = id

shuffling = 0
shuffling_max = room_speed*2
shuffling_toff = room_speed

lobby_scale_decrementor = 0.2
prescaled = false
anim_prescaled = 1

spam_pnum = 0

event_inherited()
printf("A DUDE IS BEING MADE")
varWrite("pNum_override",-1)
varWrite("pNum",0)
varWrite("animation_scale",3)
varWrite("player_quit",false)
varWrite("bot",false)
animation_previous = 0
arm_pose_previous = 0
my_bot = 0

force_jumped = false

mouse_wheel_delay = 0
mouse_wheel_delay_max = 2

varWrite("gear_to_lose",false)
varWrite("gear_to_steal",false)
varWrite("stolen_gear_source",global.src_empty)
varWrite("lost_gear_source",global.src_empty)
varWrite("uniqueId",-52)
varWrite("true_skill",-1)
varWrite("global_rank",-1)

varWrite("rank",0)

//bparts
bparts_all_init()
bparts_ready[0] = false
bparts_ready[1] = false
bparts_ready[2] = false
bparts_ready[3] = false
bparts_ready[4] = false
bparts_ready[5] = false
bparts_ready[6] = false
bparts_ready[7] = false
bparts_ready[8] = false
bparts_ready[9] = false

randomize()

wep_index = ceil(random_range(weapon_placeholder1+1,weapon_placeholder2-1))
assume_weapon(wep_index)


animation_stand()
varWrite("visible",false)
varWrite("animation_speed",SPD_STAND)
varWrite("ready",false)
visible = false
alarm[0] = room_speed*10
alarm[1] = 1
alarm[2] = room_speed
//set xy to reasonable numbers
//alarm[3] = room_speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>printf("AVATAR DESTROY TRIGGERED")
if instance_exists(bound_bn_ready)
{
    with bound_bn_ready instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set x,y to a reasonable number
if x &gt; room_width*2
{
    printf("::: alarm[3] setting x,y to reasonable numbers")
    varWrite("myX",room_width*1/2)
    varWrite("myY",room_height-5*room_height)
    x = varRead("myX")
    y = varRead("myY")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync mod vars recurringly
if not in_match()
{
    sync_mod_vars()
}

alarm[2] = room_speed*5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///print debug
printf("::: "+string(varRead("pName"))+" was instantiated with uniqueId #"+string(varRead("uniqueId")))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pNum_override

/*if spam_pnum
{
    spam_pnum --
    printf("::: SPAM -- "+string(varRead("pName"))+"'s avatar has pNum="+string(varRead("pNum"))+", override="+string(varRead("pNum_override")))
}
*/
if varRead("pNum_override") &gt; -1
{
    if varRead("pNum") != varRead("pNum_override")
    {
        printf("::: "+varRead("pName")+"'s Avatar is overwriting pNum: "+string(varRead("pNum"))+" ---&gt; "+string(varRead("pNum_override")))
        varWrite("pNum",varRead("pNum_override"))
    }
}
/*
if keyboard_check_pressed(vk_enter)
{
    printf("::: "+varRead("pName")+"'s avatar has pNum "+string(varRead("pNum")))
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shuffling
if shuffling //and x &gt; 0 and x &lt; room_width
{
    shuffling--
    event_perform(ev_alarm,2)
    alarm[2] = 5
    
    image_alpha = 0.35
    
    if not shuffling
    {    
        image_alpha = 1
        //play swoosh in sound?
    }
    
    //scale down while shuffling
    varWrite("animation_scale",lerp(varRead("animation_scale"),2.15,1))
    
    var shuffle_frames = ceil(lerp(0.05,3,(shuffling_max-shuffling)/shuffling_max))
    
    if shuffle_frames = 0
        shuffle_frames = 1
        
    //shuffle name and gear and rank and whatnot
    if nth_frame(2)
    {
        var avg_rank = floor(global.num_ranks/2)
        var num_bots = instance_number(avatar) -1
        var points = floor(random_range(avg_rank*num_bots*2/3,avg_rank*num_bots*3/2))

        //select name and rank
        var name = string(generate_name(0.01))
    
        if not instance_exists(myAvatar())
        {
            printf("ERROR: cannot shuffle in avatar step --&gt; no myAvatar() to cross-check name hashes with")
            return false
        }
    
        rank = floor(max(0,min(random_range(0,global.num_ranks-1),global.num_ranks-1)))
        if random(1) &lt; 0.5
            rank = floor(rank/2)
        if rank &gt; global.num_ranks - 10 and random(1) &lt; 0.5
            rank -= 15
        if rank &lt; 5 and random(1) &lt; 0.5
            rank += 5
            
        if hash_string(name) = objVarRead(myAvatar(),"uniqueId")
        {
            while (hash_string(name) = objVarRead(myAvatar(),"uniqueId"))
            {
                name = string(generate_name(0.01))
            }
        }
            
        points -= rank
        global_rank = 99999

        varWrite("uniqueId",hash_string(name))
        varWrite("pName",name)
        varWrite("rank",rank)
        varWrite("global_rank",global_rank)
    
        same_armor_probability = random_range(0,1.5)
        armor_set = armor_set_diceroll(rank)
    
        //select some gear for the bot to wear
        for (var j=0; j&lt;array_length_1d(global.bpart_limb_types); j++)
        {
            var new_limb
            
            if j=4 and random(1) &gt; 0.15+rank/array_length_1d(global.rank_names)
                new_limb = spr_hat
            else
            {
            
                var sameprob = same_armor_probability
                if j=0
                    sameprob = sameprob/6
            
                if random(1) &lt; sameprob and j &lt; 8
                    new_limb = armor_set_limb(armor_set,global.bpart_limb_types[j]) 
                else
                    new_limb = random_diceroll_limbtype(global.bpart_limb_types[j])
            }
            
            varWrite(global.bpart_limb_types[j]+"0",new_limb)
        }
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///quit handling.... and more now

varWrite("pName",string(varRead("pName")))
if room = rm_lobby
{
    if nth_frame(10)
        printf(string(varRead("pName"))+"'s uID: "+string(varRead("uniqueId")))
}
if instance_exists(net_manager.my_doll) and net_manager.my_doll != id and string(varRead("pName")) = string(objVarRead(net_manager,"pName")) and room = rm_lobby
{
    printf("DUPLICATE DOLL DETECTED")
    /*if net_manager.room_counter &gt; room_speed*3
    {
        printf("DUPLICATE DOLL DESTROYED")
        instance_destroy()
        exit
    }*/
}

if net_manager.menu_mode = "lottery_steal" and not is_my_avatar(id)
{
    x = room_width*10
    y = room_width*10
}

if net_manager.my_doll = id
{
    /*printf("player_quit = "+varRead("player_quit"))
    printf("visible = "+visible)
    printf("myX = "+varRead("myX"))
    printf("myY = "+varRead("myY"))*/
}   
if varRead("player_quit")
{
    printf("DESTROYING PLAYER WHO QUIT: "+varRead("pName"))
    instance_destroy()
    exit
    
    x = -600
    y = -600
    visible = false
    varWrite("myX",-600)
    varWrite("myY",-600)
    varWrite("visible",false)
    if (in_match() or room = rm_menu)
    {
        printf("DESTROYING PLAYER WHO QUIT: "+varRead("pName"))
        instance_destroy()
        exit
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dat ish
if mouse_wheel_delay &gt; 0
mouse_wheel_delay --

//talk sometimes
if is_bot(id)
{
    if random(1) &lt; 1/(room_speed*120)
    {
        //new_chat_feed_message(varRead("pName"),"","Are you sucking my cock or is it just me?")
    }
    
    if not in_match() and not varRead("ready") and not shuffling
    {
        varWrite("ready",true)
        if instance_exists(bound_bn_ready)
        {
            bound_bn_ready.ready = true
        } else {
            printf("ERROR: bound_bn_ready doesn't exist (avatar step event)")
        }
    }
}

if in_match()
{
    x = room_width+400
    y = -400
}

if room = rm_menu and net_manager.my_doll != id
{
    x = room_width+400
    y = -400
}

/*printf("hat0 = "+varRead("hat0"))
printf("y = "+y)
printf("x = "+x)
printf("pName="+varRead("pName"))
printf("visible="+visible)
printf("helmet0="+varRead("helmet0"))
printf("leg0="+varRead("leg0"))*/

if ( room = rm_menu or room = rm_lobby) and visible = false and net_manager.room_counter &gt; room_speed*1
{
    varWrite("visible",true)
    visible = true
}

//sync match stats with local players
if not is_bot(id) and instance_exists(net_manager.local_player) and in_match() and net_manager.room_counter &gt; room_speed*2 and varRead("pName") = objVarRead(net_manager,"pName")
{
    varWrite("match_points",objVarRead(net_manager.local_player,"match_points"))
    varWrite("match_kills",objVarRead(net_manager.local_player,"match_kills"))
    varWrite("match_deaths",objVarRead(net_manager.local_player,"match_deaths"))
    varWrite("match_assists",objVarRead(net_manager.local_player,"match_assists"))
    //send these at 2 Hz, no need for 30 Hz
    if nth_frame(15)
    {
        obj_update_real(id,"match_points",FL_NORMAL)
        obj_update_real(id,"match_kills",FL_NORMAL)
        obj_update_real(id,"match_deaths",FL_NORMAL)
        obj_update_real(id,"match_assists",FL_NORMAL)
        //obj_update_real(id,"match_rank",FL_NORMAL)
    }
    varWrite("points",objVarRead(net_manager.local_player,"points"))
    varWrite("kills",objVarRead(net_manager.local_player,"kills"))
    varWrite("deaths",objVarRead(net_manager.local_player,"deaths"))
}

if is_bot(id) and instance_exists(my_bot) and in_match() and net_manager.room_counter &gt; room_speed*2
{
    syncVarFrom(my_bot,"match_points")
    syncVarFrom(my_bot,"match_kills")
    syncVarFrom(my_bot,"match_deaths")
    syncVarFrom(my_bot,"match_assists")
    syncVarFrom(my_bot,"kills")
    syncVarFrom(my_bot,"deaths")
    syncVarFrom(my_bot,"points")
}

//NO LOITERING!!
if room = rm_menu and id != net_manager.my_doll
{
    if net_manager.room_counter &gt; room_speed*3 or net_manager.previous_room = rm_lobby or net_manager.came_from_match
    {
        printf("destroying avatar for loitering")
        printf("avatar's pName: "+string(varRead("pName"))+", net_man's pName: "+string(objVarRead(net_manager,"pName")))
        instance_destroy()
        exit
    } else 
    {
        x = room_width*4
        y = room_height*4
    }  
}

//STEAL OR LOSE GEAR (HANDLERS FOR LOCAL PLAYER ONLY)
/*
if id != net_manager.my_doll
{
    if varRead("gear_to_lose")
    {
        lose_gear(varRead("gear_to_lose"))
    }
    
    if varRead("gear_to_steal") and varRead("stolen_gear_source") != global.src_empty
    {
        steal_gear(varRead("gear_to_steal"), varRead("stolen_gear_source"))
    }
}*/

if is_bot(id) and room = rm_lobby
{
    if varRead("prop0") = spr_none
        pose_pistol()
        
    if varRead("gear_to_lose")
    {
        bot_lose_gear(varRead("gear_to_lose"))
    }
    
    if varRead("gear_to_steal") and varRead("stolen_gear_source") != global.src_empty
    {
        bot_steal_gear(varRead("gear_to_steal"))
    }

}

varWrite("animation_speed",SPD_STAND)

if not bparts_ready[0]
{
    for (var i=0; i&lt;1; i++)
    {
        if not bparts_ready[i] and room != rm_login
        {
            bparts_ready[i] = bparts_get_ready(i)
        }
    }
}

if rtime() &lt; room_speed
    with net_manager
    {
        if other.id != my_doll
        {
            if other.id.x &lt; room_width/2
            {
                objVarWrite(other.id,"rot_true",345)
                objVarWrite(other.id,"animation_xscale",1)
            }
            else
            {
                objVarWrite(other.id,"rot_true",195)
                objVarWrite(other.id,"animation_xscale",-1)
            }
        }
    }

if room = rm_lobby and net_manager.room_counter &gt; room_speed
{
    if is_my_avatar(id)
    {
        //sync uniqueID with netMan's
            //varWrite("uniqueId",objVarRead(net_manager,"uniqueId"))

        obj_pname_update_real(id,"rot_true",FL_NORMAL)
        if nth_frame(3) obj_pname_update_real(id,"active_weapon_sprite",FL_NORMAL)
        //obj_pname_update_real(id,"animation_speed",FL_NORMAL)
        //obj_pname_update_real(id,"arm_animation_speed",FL_NORMAL)
        //obj_pname_update_real(id,"animation_index",FL_NORMAL)
        if nth_frame(3) obj_pname_update_real(id,"active_weapon_prescaler",FL_NORMAL)
        if nth_frame(1) obj_pname_update_real(id,"animation_xscale",FL_NORMAL)
        if nth_frame(3) obj_pname_update_string(id,"arm_pose",FL_NORMAL)
        if nth_frame(room_speed) obj_pname_update_real(id,"true_skill",FL_NORMAL)
        if nth_frame(room_speed) obj_pname_update_real(id,"global_rank",FL_NORMAL)
    }

}

if room = rm_menu or room = rm_lobby
{
    varWrite("arm_animation_speed",0)
    varWrite("arm_animation_index",0)
    sync_poses_and_animations()
}

if room = rm_lobby and force_jumped = false and varRead("uniqueId") &gt; -30
{
    force_jumped = true
    with net_manager
    {
        av_padding = room_width/instance_number(avatar)
        //get the instance number of this player
        for (var i=0; i&lt;instance_number(avatar); i++)
        {
            temp = instance_find(avatar,i)
            if temp = other.id
                break
        }
        other.id.x = av_padding*(objVarRead(temp,"pNum")+0.5)
        other.id.y = 0
    }
}


//INHERITED EVENT, OF COURSE
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync prop with active_weapon_sprite and arm_pose
if real(varRead("prop0")) &gt; 0 and room = rm_menu or room = rm_lobby
{
    varWrite("active_weapon_sprite",varRead("prop0"))
    
    switch real(varRead("prop0"))
    {
        case spr_prop_none:
            varWrite("arm_pose",global.pistol_pose)
            varWrite("active_weapon_prescaler",global.pistol_scale)
        break
        
        case spr_prop:
            varWrite("arm_pose",global.pistol_pose)
            varWrite("active_weapon_prescaler",global.pistol_scale)
        break
        
        case spr_pistol:
            varWrite("arm_pose",global.pistol_pose)
            varWrite("active_weapon_prescaler",global.pistol_scale)
        break
        
        case spr_rifle:
            varWrite("arm_pose",global.rifle_pose)
            varWrite("active_weapon_prescaler",global.rifle_scale)
        break
        
        case spr_torque:
            varWrite("arm_pose",global.torque_pose)
            varWrite("active_weapon_prescaler",global.torque_scale)
        break
        
        case spr_shotgun:
            varWrite("arm_pose",global.shotgun_pose)
            varWrite("active_weapon_prescaler",global.shotgun_scale)
        break
        
        case spr_frag:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_flame:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.flame_scale)
        break
        
        case spr_snare:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.snare_scale)
        break
        
        case spr_smoke:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_flashbang:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_ink:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_sticky:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_longshot:
            varWrite("arm_pose",global.longshot_pose)
            varWrite("active_weapon_prescaler",global.longshot_scale)
        break
    
        case spr_smg:
            varWrite("arm_pose",global.smg_pose)
            varWrite("active_weapon_prescaler",global.smg_scale)
        break
        
        case spr_lmg:
            varWrite("arm_pose",global.lmg_pose)
            varWrite("active_weapon_prescaler",global.lmg_scale)
        break

        case spr_vulcan:
            varWrite("arm_pose",global.vulcan_pose)
            varWrite("active_weapon_prescaler",global.vulcan_scale)
        break    
        
        case spr_boom:
            varWrite("arm_pose",global.boom_pose)
            varWrite("active_weapon_prescaler",global.boom_scale)
        break
        
        case spr_rocket:
            varWrite("arm_pose",global.rocket_pose)
            varWrite("active_weapon_prescaler",global.rocket_scale)
        break  
        
        case spr_double:
            varWrite("arm_pose",global.double_pose)
            varWrite("active_weapon_prescaler",global.double_scale)
        break  
        
        case spr_stomper:
            varWrite("arm_pose",global.stomper_pose)
            varWrite("active_weapon_prescaler",global.stomper_scale)
        break  
        
        case spr_boltok:
            varWrite("arm_pose",global.boltok_pose)
            varWrite("active_weapon_prescaler",global.boltok_scale)
        break   
        
        case spr_tickler:
            varWrite("arm_pose",global.tickler_pose)
            varWrite("active_weapon_prescaler",global.tickler_scale)
        break 
        
        case spr_thumper:
            varWrite("arm_pose",global.thumper_pose)
            varWrite("active_weapon_prescaler",global.thumper_scale)
        break 
        
        case spr_carbine:
            varWrite("arm_pose",global.carbine_pose)
            varWrite("active_weapon_prescaler",global.carbine_scale)
        break 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy if player_quit
if room = rm_lobby
{
    if varRead("player_quit") and net_manager.my_doll != id
        instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go invisible if in a match
event_inherited()

visible = false
varWrite("visible",false)

if is_bot(id) and not in_match()
{
    shuffling = shuffling_max+shuffling_toff*(varRead("pNum")-1)
}

if in_match()
{
    varWrite("match_points",0)
    varWrite("points",0)
}
else
{
    alarm[0] = room_speed
}
    
if room = rm_menu
{
    //varWrite("uniqueId",-52)
    y = -64*5
    x = room_width*4/5
}

if room = rm_lobby and not net_manager.came_from_match and net_manager.my_doll != id and not is_bot(id)
{
    printf("DESTROYING WEIRD EXTRA AVATAR")
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create his player on match start if he's a bot
if is_bot(id) and in_match()
{
    my_bot = instance_create(random(room_width), -4*room_height,player)
    syncVar(my_bot,"bot")
    syncVar(my_bot,"uniqueId")
    syncVar(my_bot,"pNum")
    syncVar(my_bot,"rank")
    syncVar(my_bot,"pName")
    syncVar(my_bot,"global_rank")
    
    my_bot.weapon_switch_delay_max /= 3*varRead("rank")/array_length_1d(global.rank_names)+1
    
    for (var i=0; i&lt;9; i++)
    {
        syncVar(my_bot,global.bpart_limb_types[i]+"0")
    }
    
    printf(":::created bot player: "+string(objVarRead(my_bot,"pName"))+", pNum="+string(objVarRead(my_bot,"pNum")))
}

if is_bot(id) and room = rm_lobby
{
    //pick an appropriate rank based on the player's rank
    if not instance_exists(net_manager.my_doll)
        printf("MY_DOLL HAS DISAPPEARED AT START OF ROOM!")
        
    var cand_rank = objVarRead(net_manager.my_doll,"bot_rank")
    
    //pick a value within 1 of this rank
    /*cand_rank = floor(random_range(cand_rank-1,cand_rank+1.99))
    if cand_rank &lt; 0 cand_rank = 0
    varWrite("rank",cand_rank)*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
//if varRead("player_quit") exit
//printf("dude_x = "+string(varRead("dude_x"))+", dude_y = "+string(varRead("dude_y"))+", x = "+string(x)+", y = "+string(y))

if net_manager.show_cout
{
    //draw_text(x,y-290,"global_rank: "+varRead("global_rank"))
    //draw_text(x,y-260,"rank: "+varRead("rank"))
    draw_text(x,y-230,"uniqueId: "+string(varRead("uniqueId")))
    draw_text(x,y-200,"pNum: "+string(varRead("pNum")))
    //draw_text(x,y-200,"player_quit: "+varRead("player_quit"))
    if net_manager.show_cout or room = rm_lobby and rtime() &lt; room_speed*3
        printf("::: AVATAR "+string(varRead("pName"))+": uniqueId = "+string(varRead("uniqueId"))+", pNum = "+string(varRead("pNum"))+", x="+string(x)+", y="+string(y))
}

prescaled = false
if room = rm_lobby and net_manager.menu_mode = "lobby"
{
    anim_prescale = varRead("animation_scale")
    prescaled = true
    varWrite("animation_scale",real(varRead("animation_scale"))-(instance_number(avatar)-1)*lobby_scale_decrementor)
}

if not is_my_avatar(id) and net_manager.show_cout
{
    printf("::: pName="+string(varRead("pName"))+", animation_index="+string(varRead("animation_index"))+", arm_animation_index="+string(varRead("arm_animation_index"))
        +", animation_xscale="+string(varRead("animation_xscale"))+" arms_posing="+string(varRead("arms_posing"))
        +", animation="+string(varRead("animation"))+", arm_pose="+string(varRead("arm_pose"))
        +", weapon_x="+string(weapon_x)+", weapon_xoffset_temp="+string(weapon_xoffset_temp)
        +", weapon_y="+string(weapon_y)+", weapon_yoffset_temp="+string(weapon_yoffset_temp)
        +", weapon_rot="+string(weapon_rot))
    printf("::: teammate? "+string(are_teammates(id,myAvatar())))
}

if not in_match()
    event_inherited()

if prescaled
{
    varWrite("animation_scale",anim_prescale)
}
/*draw_text(x,y-180,"global rank: "+varRead("global_rank"))
//draw_text(x,y-160,"kills: "+varRead("kills"))
//draw_text(x,y-120,"deaths: "+varRead("deaths"))
draw_text(x,y-160,"wins: "+varRead("wins"))
draw_text(x,y-140,"losses: "+varRead("losses"))*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create ragdoll

rag_create_doll(0.1,random_range(5,10),random(360))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,31</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
