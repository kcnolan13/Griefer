<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_light_mask_flash</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///configure light

//visuals
sprite = spr_light_mask_point;
intensity = 10
xscale = 0.4
yscale = 0.4
life = 20                         
color = make_color_rgb(255,205,148)
intensity_divisor = 1
intensity_flicker = 0
scale_divisor = 1
scale_flicker = 0

loc = true

//NET VARS
netvars = ds_map_create()
varWrite("angle",0)
varWrite("xscale",-1)
varWrite("yscale",-1)
varWrite("image_blend",c_white)

//engine
visible = false
sprite_index = spr_none
current_xscale = xscale
current_yscale = yscale
current_intensity = intensity
delay = 1
enabled = false
prev_xscale = -1
prev_yscale = -1
prev_angle = -1
prev_intensity = -1

//spawn the light
light = glr_lightsimple_create(sprite, 0, x, y, color, 1, 1)

//if SUPER_DEBUG
    //printf("glare light count: "+glr_light_get_count())

if object_index = flash_generic
    flash_update_light()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free net vars
ds_map_destroy(netvars)
glr_lightsimple_destroy(light)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dissipate
if delay
delay --

//printf("angle = "+varRead("angle"))

light.loc = loc
glr_lightsimple_set_rotation(light,varRead("angle"))
prev_angle = varRead("angle")


if not enabled and not delay
{
    glr_lightsimple_set_intensity(light,intensity)
    glr_lightsimple_set_active(light,true)
    enabled = true
    current_xscale = xscale
    current_yscale = yscale
    
    if SUPER_DEBUG
        printf("glare light count = "+glr_lightsimple_get_count())
}

if varRead("xscale") &gt; 0
{
    //if DEBUG
       // printf("muzzle flash xscale override: "+varRead("xscale"))
    xscale = varRead("xscale")
    current_xscale = xscale
    varWrite("xscale",-1)
}

if varRead("yscale") &gt; 0
{
    //if DEBUG
       // printf("muzzle flash yscale override: "+varRead("yscale"))
    yscale = varRead("yscale")
    current_yscale = yscale
    varWrite("yscale",-1)
}

if enabled
{
    if object_index != splosion_ink and object_index != splosion_snare and object_index != splosion_flame
        life --
    
    if not life or current_intensity &lt; 0.25 
    {
        if object_index != splosion_ink and object_index != splosion_snare and object_index != splosion_flame
            instance_destroy()
        else
            {
                intensity = 0
                current_intensity = 0
                enabled = false
            }
            
        return false
    }
    
    current_intensity /= intensity_divisor
    current_intensity_flicker = random_range(-intensity_flicker,intensity_flicker)
    
    if current_intensity+current_intensity_flicker &lt; 0
        glr_lightsimple_set_active(light,false)
    else
        glr_lightsimple_set_active(light,true)
        
    current_xscale /= scale_divisor
    current_yscale /= scale_divisor
    current_scale_flicker = random_range(-scale_flicker,scale_flicker)
    
    if prev_xscale != current_xscale+current_scale_flicker or prev_yscale !=  current_yscale+current_scale_flicker
        {
            glr_lightsimple_set_scaling(light,current_xscale+current_scale_flicker, current_yscale+current_scale_flicker)
            prev_xscale = current_xscale+current_scale_flicker
            prev_yscale = current_yscale+current_scale_flicker
        }
        
    if prev_intensity != current_intensity+current_intensity_flicker
    {
        glr_lightsimple_set_intensity(light,current_intensity+current_intensity_flicker)
        prev_intensity = current_intensity+current_intensity_flicker
    }
    
    //if SUPER_DEBUG
        //printf("light --&gt; "+"x="+x+",y="+y+",intensity="+real_current_intensity+",scale="+(current_xscale+current_scale_flicker)+",active="+glr_light_get_active(light))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>123,143</point>
    <point>191,191</point>
  </PhysicsShapePoints>
</object>
