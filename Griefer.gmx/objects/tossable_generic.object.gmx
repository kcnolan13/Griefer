<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tossable_generic</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up for physics
netvars = ds_map_create()

//dummy vars
audio_scaler = 0
bounces = 0
spd = 0

hsp = 0
vsp = 0
grav = 0
dir = 0

//depth = -25
fakedirection = random_range(0,360)
rotation = sign(fakedirection)
rspeed = random_range(0,25)
image_alpha = 8
sprite_2draw = spr_head
varWrite("scale",PLAYER_SCALE)
sprite_index = spr_tossable_generic
counter = 0
varWrite("play_stick_sound",false)
varWrite("sound_bounce",snd_frag_land)
varWrite("myX",x)
varWrite("myY",y)
varWrite("gravity",2)
varWrite("is_bullet",false)
varWrite("local",false)
varWrite("image_blend",c_white)
varWrite("spawner",-1)
varWrite("been_picked_up",false)
varWrite("rigidity",3)
rigidity = 3
splode_now = false
have_hit_target = false
splosion = splosion_frag
cook_time = -1
start_cook_on_hit = false
sticky = false
stuck = false
stuck_player = noone
stuck_xoff = 0
stuck_yoff = 0
stuck_ang = 0
stuck_xscaler = 1
dir_perm = 0
varWrite("dir_override",dir_perm)

varWrite("stuck",false)
varWrite("stuck_pnum",-1)
varWrite("stuck_xoff",0)
varWrite("stuck_yoff",0)
varWrite("stuck_ang",0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sticky stuck
if sticky and stuck and varRead("local")
    sticky_stuck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sticky stuck
if sticky and stuck and varRead("local")
    sticky_stuck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dah ish --&gt; most of it computed by everyone
if varRead("play_stick_sound")
{
    audio_play_sound(snd_sticky_stuck,2,false)
    varWrite("play_stick_sound",false)
}
depth = -80

//LOCAL BEHAVIOR
if varRead("local")
{
    if cook_time &gt; 0 and (not start_cook_on_hit or have_hit_target)
    {
        cook_time --
        
        if SUPER_DEBUG
            printf("Cheffing up a fat one : T-Minus "+cook_time/room_speed+" sec.")
            
        if not cook_time &gt; 0 or splode_now
        {
            if DEBUG
                printf("wait for it ...")
            scr_unstick_tossable()
            
            if stuck and instance_exists(stuck_player)
            {
                varWrite("myX",stuck_player.x)
                varWrite("myY",stuck_player.y)
            }
            
            ID = instance_create_for_everyone(varRead("myX"),varRead("myY"),splosion)
            if sticky and stuck
            {
                ID.is_stick_kill = true
                printf("::: tossable_generic called for a stick_kill!")
            }
            objVarWrite(ID,"senderId",varRead("senderId"))
            objVarWrite(ID,"local",true)
            obj_update_real(ID,"senderId",FL_NORMAL)
            
            if object_index = bullet_flame
            {
                ID2 = instance_create_for_everyone(varRead("myX"),varRead("myY"),splosion_flame_instant)
                objVarWrite(ID2,"senderId",varRead("senderId"))
                objVarWrite(ID2,"local",true)
                obj_update_real(ID2,"senderId",FL_NORMAL)
            }
            
            if stuck
            {
                with (ID)
                {
                    event_perform(ev_alarm,0)
                    alarm[0] = 0
                }
            }
            instance_destroy_for_everyone(id)
        }
    }   
}

//UNIVERSAL BEHAVIOR
if not sticky or varRead("local")
{
    if varRead("speed") != -1 and not stuck
    {
        hsp = trigx(varRead("speed"),varRead("direction"))
        vsp = trigy(varRead("speed"),varRead("direction"))
        varWrite("speed",-1)
    }
    
    if varRead("gravity") != -1 and not stuck
    {
        grav = varRead("gravity")
        varWrite("gravity",-1)
    }
    
    if varRead("direction") != -1  and not stuck
    {
        dir = varRead("direction")
        varWrite("direction",-1)
    }
    
    if varRead("rigidity") != -1 and not stuck
    {
        rigidity = varRead("rigidity")
        varWrite("rigidity",-1)
    }
}

if sticky and not varRead("local")
{
    hsp = 0
    vsp = 0
    grav = 0
    dir = varRead("direction")
}

counter++

if not stuck //and (not sticky or varRead("local"))
{
    vsp += grav
    recalc_tossable_vector()
}

if spd &gt; 0 and not stuck and object_index != bullet_torque
{
    fakedirection += rspeed*sign(rotation)*random_range(0.1,max(1,spd)/spd)
}

if not stuck and object_index = bullet_torque
    dir_perm = point_direction(x,y,x+hsp,y+vsp)


if spd &gt; 0
{
    if object_index = bullet_smoke or object_index = bullet_boom or object_index = bullet_thumper or object_index = bullet_rocket or object_index = bullet_flashbang or sticky or object_index = bullet_flame or object_index = bullet_snare or object_index = bullet_ink
        var inst = hitscan_targets(varRead("myX"), varRead("myY"), varRead("myX") + hsp, varRead("myY") + vsp, shootable_generic, true,false,find_player(varRead("senderId")))
    else var inst = collision_line_first(varRead("myX"), varRead("myY"), varRead("myX") + hsp, varRead("myY") + vsp, solid_generic, true,true)
    if inst //and not have_hit_target
    {
        if DEBUG
            printf("HitBouncing Triggered: FROM STEP EVENT")
            
        have_hit_target = true
        if not audio_is_playing(varRead("sound_bounce")) and not stuck
            audio(varRead("sound_bounce"),1)
        
        if inst.object_index != player or (object_index = bullet_torque and not varRead("hitscan"))
            hit_bounce_target(inst,collision_x,collision_y)
        
        if object_index = bullet_smoke or object_index = bullet_boom or (object_index = bullet_thumper and inst.object_index = player) or object_index = bullet_rocket or (object_index = bullet_flashbang and inst.object_index = player) or object_index = bullet_ink or object_index = bullet_flame or object_index = bullet_snare
            splode_now = true

        if inst.object_index = player and sticky and not stuck and (object_index != bullet_torque or varRead("hitscan"))
        {
            if varRead("local")
            {
                play_stick_sound()
                if object_index = bullet_sticky
                    challenge_manager.sticky_kills ++
                //else if object_index = bullet_torque
                //    challenge_manager.torque_kills++
            }
            //audio_play_sound(snd_sticky_stuck,2,false)
            printf("STUCK!!!")
            stuck_player = inst
            stuck_xoff = 0//x - inst.x
            stuck_yoff = y - inst.y
            stuck_xscaler = objVarRead(inst,"animation_xscale")
            stuck = true
            stuck_ang = inst.torso_rot*-1
        } else if object_index = bullet_torque and not stuck and inst.object_index != player and not varRead("hitscan")
        {
            if bounces &gt;= max_bounces
            {
                //audio_play_sound(snd_sticky_stuck,2,false)
                stuck = true
                stuck_xoff = x
                stuck_yoff = y
            }
            else
            {
                bounces++
            }
        }

    }
    else
    {
        varAdd("myX",hsp)
        varAdd("myY",vsp)
    }
}
else if not stuck
{
        varAdd("myX",hsp)
        varAdd("myY",vsp)
        if SUPER_DEBUG
            printf("no speed, unsticking")
        scr_unstick_tossable()
        if !instance_position(x,bbox_bottom+1,solid_generic)
        varWrite("gravity",2)
}


x = varRead("myX")
y = varRead("myY")
//printf("sticky at "+x+", "+y)

if DEBUG and counter &lt; 5
    printf("there is a Tossable Generic at "+x+", "+y)
    
    
if not varRead("local")
{
    dir_perm = varRead("dir_override")
}

if varRead("local")
{
    obj_update_real(id,"myX",FL_NORMAL)
    obj_update_real(id,"myY",FL_NORMAL)
    obj_sendval_real(id,"dir_override",dir_perm,FL_NORMAL)
}

if sticky and stuck and varRead("local")
    sticky_stuck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy after a while
if counter &gt; room_speed*4
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw sprite_2draw
//draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
if object_index != bullet_torque
    var draw_ang = fakedirection
else var draw_ang = dir_perm

draw_sprite_ext(sprite_2draw,image_index,x,y,image_xscale*varRead("scale"),image_yscale*varRead("scale"),draw_ang,image_blend,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,31</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
