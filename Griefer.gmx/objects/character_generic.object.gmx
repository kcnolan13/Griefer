<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>shootable_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///basic player code
netvars = ds_map_create()

varWrite("bot",false)

surf_splat = NO_HANDLE
create_splat_surface()

//dummy vars
shoulderl_xoffset_temp = 0
shoulderl_yoffset_temp = 0
shoulderr_xoffset_temp = 0
shoulderr_yoffset_temp = 0
forearml_xoffset_temp = 0
forearml_yoffset_temp = 0
forearmr_xoffset_temp = 0
forearmr_yoffset_temp = 0
shoulderl_x = 0
shoulderl_y = 0
shoulderl_rot = 0
shoulderr_x = 0
shoulderr_y = 0
shoulderr_rot = 0
forearml_rot = 0
forearml_x = 0
forearml_y = 0
forearmr_rot = 0
forearmr_x = 0
forearmr_y = 0
weapon_x = 0
weapon_y = 0
weapon_xoffset =0
weapon_yoffset = 0
weapon_rot = 0
hat_x = 0
hat_y = 0
hat_yoffset_temp = 0
hat_xoffset_temp = 0
dummy_counter = 0

//drawing vars
forearml_drawx = 0
forearml_drawy = 0
forearml_drawr = 0
forearmr_drawx = 0
forearmr_drawy = 0
forearmr_drawr = 0
shoulderl_drawx = 0
shoulderl_drawy = 0
shoulderl_drawr = 0
shoulderr_drawx = 0
shoulderr_drawy = 0
shoulderr_drawr = 0
head_drawx = 0
head_drawy = 0
head_drawr = 0
hat_drawx = 0
hat_drawy = 0
hat_drawr = 0
torso_drawx = 0
torso_drawy = 0
torso_drawr = 0
legl_drawx = 0
legl_drawy = 0
legl_drawr = 0
legr_drawx = 0
legr_drawy = 0
legr_drawr = 0
shinl_drawx = 0
shinl_drawy = 0
shinl_drawr = 0
shinr_drawx = 0
shinr_drawy = 0
shinr_drawr = 0
footl_drawx = 0
footl_drawy = 0
footl_drawr = 0
footr_drawx = 0
footr_drawy = 0
footr_drawr = 0

pose_pistol()

xaim = 0
yaim = 0

varWrite("sprite_index",spr_player)
varWrite("head0",spr_head)
varWrite("torso0",spr_torso)
varWrite("leg0",spr_leg)
varWrite("shin0",spr_shin)
varWrite("foot0",spr_foot)
varWrite("hat0",spr_hat)
varWrite("shoulder0",spr_shoulder)
varWrite("forearm0",spr_forearm)
varWrite("prop0",spr_prop)
varWrite("active_weapon_sprite",spr_rifle)
varWrite("active_weapon_prescaler",1)
varWrite("active_weapon",NO_HANDLE)
varWrite("nades",0)
varWrite("controllable",false)

varWrite("dude_x",0)
varWrite("dude_y",0)

varWrite("cant_shoot",0)

varWrite("rot_true",0)

//make these networkable
varWrite("arm_pose","pose_pistol")
varWrite("animation","walk")
varWrite("animation_index",0)
varWrite("animation_length",24)
varWrite("animation_speed",1)
varWrite("animation_scale",2.5)
varWrite("animation_direction",1)
varWrite("arms_posing",true)
varWrite("animation_xscale",-1)
varWrite("arm_rot_extra",0)
varWrite("kick",0)
varWrite("arm_y_extra",0)

//arm pose animations
varWrite("arm_animation_index",0)
varWrite("arm_animation_length",1)
varWrite("arm_animation_speed",1)
varWrite("arm_animation_direction",1)


stiff_neck = 3

loop_counter = 0
offset_scale = 1

torso_x = 0
torso_y = 0
torso_rot = 0

hat_x = 0
hat_y = 0
hat_rot = 0

head_x = 0
head_y = 0
head_rot = 0

shoulderl_x = 0
shoulderl_y = 0
shoulderl_rot = 0
shoulderl_xs = 0
shoulderl_ys = 0
shoulderl_rots = 0
shoulderl_xoffset = 0
shoulderl_yoffset = 0

shoulderr_x = 0
shoulderr_y = 0
shoulderr_rot = 0
shoulderr_xs = 0
shoulderr_ys = 0
shoulderr_rots = 0
shoulderr_xoffset = 0
shoulderr_yoffset = 0

forearml_x = 0
forearmr_y = 0
forearmr_rot = 0
forearml_xs = 0
forearml_ys = 0
forearml_rots = 0
forearml_xoffset = 0
forearml_yoffset = 0

forearmr_x = 0
forearmr_y = 0
forearmr_rot = 0
forearmr_xs = 0
forearmr_ys = 0
forearmr_rots = 0
forearmr_xoffset = 0
forearmr_yoffset = 0

weapon_x = 0
weapon_y = 0
weapon_rot = 0
weapon_xoffset = 0
weapon_yoffset = 0
weapon_xoffset_temp = 0
weapon_yoffset_temp = 0

legl_x = 0
legl_y = 0
legl_rot = 0
legl_xoffset = 0
legl_yoffset = 0


legr_x = 0
legr_y = 0
legr_rot = 0
legr_xoffset = 0
legr_yoffset = 0

shinl_x = 0
shinl_y = 0
shinl_rot = 0
shinl_xoffset = 0
shinl_yoffset = 0

shinr_x = 0
shinr_y = 0
shinr_rot = 0
shinr_xoffset = 0
shinr_yoffset = 0

footl_x = 0
footl_y = 0
footl_rot = 0
footl_xoffset = 0
footl_yoffset = 0

footr_x = 0
footr_y = 0
footr_rot = 0
footr_xoffset = 0
footr_yoffset = 0

rag_init_exclusions()



//set up initial animation and arm pose
animation_walk()
pose_rifle()

initialize_physics()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free net vars and destroy splat surface
free_splat_surface()
ds_map_destroy(netvars)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make visible again
varWrite("visible",true)
visible = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///META STUFF
if not in_match()
{
    if not surface_exists(surf_splat)
        create_splat_surface()
}

dummy_counter ++
if varRead("visible") and (varRead("dude_x") or varRead("dude_y"))
{
    //printf("lerping")
    x = lerp(x,varRead("dude_x"),0.3)
    y = lerp(y,varRead("dude_y"),0.3)
}

if is_string(varRead("myX")) or is_string(varRead("myY"))
{
    printf("ERROR: COORDS not supposed to be string: "+string(varRead("myX"))+", "+string(varRead("myY")))
    varWrite("myX",real(varRead("myX")))
    varWrite("myY",real(varRead("myY")))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///compute limb and weapon offsets for every frame

//either add to or subtract from the animation index
varAdd("animation_index", varRead("animation_speed")*varRead("animation_direction"))

//printf(varRead("animation_index")+" : "+varRead("animation_speed")+" : "+varRead("animation_direction"))

if varRead("kick") &gt; 0
{
    varWrite("kick",varRead("kick")/1.5)
    if varRead("kick") &lt; 1
        varWrite("kick",0)
}

framely_limb_computations()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///record vars for net sending
if varRead("controllable")
{
    //varWrite("rot_true",rot_true) ---&gt; has to be done in-line
    varWrite("arm_y_extra",varRead("arm_y_extra"))
    varWrite("arm_rot_extra",varRead("arm_rot_extra"))
}

if varRead("cant_shoot")
varSub("cant_shoot",1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///increment kick
if object_index = character_generic and not varRead("cant_shoot")
{
    varWrite("kick",varRead("kick")+15)
    varWrite("cant_shoot",4)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free splat surface
free_splat_surface()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw all limbs at appropriate position based on animation_index
if not varRead("visible") exit

if object_index = die_generic and dummy_counter &lt; 2 exit

if not in_match()
{
    if varRead("animation_index") &lt; 12
        shadow_scale = 0.5+0.05*varRead("animation_index")/12
    else
        shadow_scale = 0.55-0.05*(varRead("animation_index")-12)/12
        
    if varRead("dude_y")
        shadow_y = varRead("dude_y")
    else
        shadow_y = y 
        
    shadow_y += 64*3.35*varRead("animation_scale")/3
    
    if varRead("blood_color") = global.blood_color
        draw_sprite_ext(spr_doll_shadow,0,x,shadow_y,shadow_scale,shadow_scale,0,c_white,0.8)
    else if surface_exists(surf_splat)
    {
        surface_set_target(surf_splat)
        draw_clear_alpha(c_black,0)    
        draw_set_alpha(1)
        draw_splats(splat_width/2,0,0.75,varRead("blood_color"),1)
        surface_reset_target()
        draw_surface(surf_splat,x-splat_width/2-10,shadow_y)
    }
}


calc_limb_draws()

//left arm
draw_limb("forearm0",forearml_drawx,forearml_drawy,forearml_drawr)
draw_limb("shoulder0",shoulderl_drawx,shoulderl_drawy,shoulderl_drawr)

//left leg
draw_limb("leg0",legl_drawx,legl_drawy,legl_drawr)
draw_limb("shin0",shinl_drawx,shinl_drawy,shinl_drawr)
draw_limb("foot0",footl_drawx,footl_drawy,footl_drawr)

//torso
draw_limb("torso0",torso_drawx,torso_drawy,torso_drawr)

//right leg
draw_limb("leg0",legr_drawx,legr_drawy,legr_drawr)
draw_limb("shin0",shinr_drawx,shinr_drawy,shinr_drawr)
draw_limb("foot0",footr_drawx,footr_drawy,footr_drawr)

if (varRead("animation") != "die_headshot")
{
    //head
    draw_limb("helmet0",head_drawx,head_drawy,head_drawr)
    
    //hat
    var helm = varRead("helmet0") 
    if not is_hatless(helm)
        draw_limb("hat0",hat_drawx,hat_drawy,hat_drawr)
}

//weapon
if varRead("arms_posing") and (varRead("arm_pose") != "nade" or (varRead("nades") &gt; 0 or !in_match()))
    draw_limb("active_weapon_sprite",weapon_x+varRead("animation_scale")*weapon_xoffset_temp,weapon_y+varRead("animation_scale")*weapon_yoffset_temp,-1*weapon_rot)

//right arm
draw_limb("forearm0",forearmr_drawx,forearmr_drawy,forearmr_drawr)
draw_limb("shoulder0",shoulderr_drawx,shoulderr_drawy,shoulderr_drawr)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,31</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
