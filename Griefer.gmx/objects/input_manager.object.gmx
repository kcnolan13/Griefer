<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite404</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialization

axes[0] = gp_axislh
axes[1] = gp_axislv
axes[2] = gp_axisrh
axes[3] = gp_axisrv

pressed[0] = false
pressed[1] = false
pressed[2] = false
pressed[3] = false

released[0] = false
released[1] = false
released[2] = false
released[3] = false

pressed_counter[0] = 0
pressed_counter[1] = 0
pressed_counter[2] = 0
pressed_counter[3] = 0

set_pressed[0] = 0
set_pressed[1] = 0
set_pressed[2] = 0
set_pressed[3] = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync control scheme at start

if global.using_gamepad
{
    refresh_control_scheme(FL_GAMEPAD)
}
else refresh_control_scheme(FL_KEYBOARD)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set pressed when triggered
for (var i=0; i&lt;4; i++)
{
    if set_pressed[i]
        pressed[i] = true  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gamepad cursor control
if global.using_gamepad
{
    if in_match()
    {
        //printf("::: global.cursor_dir = "+string(global.cursor_dir))
        //printf("::: cursor @ "+string(cursor.x)+", "+string(cursor.y))
    } else
    {
        if gamepad_axis_check(global.devno,gp_axisrh) or gamepad_axis_check(global.devno,gp_axisrv)
        {
            cursor.x += global.cvals[C_MOUSE_SENS]*gamepad_stick_val(gp_axisrh)
            cursor.y += global.cvals[C_MOUSE_SENS]*gamepad_stick_val(gp_axisrv)
        }
        else if gamepad_axis_check(global.devno,gp_axislh) or gamepad_axis_check(global.devno,gp_axislv)
        {
            cursor.x += global.cvals[C_MOUSE_SENS]*gamepad_stick_val(gp_axislh)
            cursor.y += global.cvals[C_MOUSE_SENS]*gamepad_stick_val(gp_axislv)
        }
        
        //keep cursor within bounds
        if cursor.x &gt; room_width    cursor.x = room_width
        if cursor.x &lt; 0             cursor.x = 0
        if cursor.y &gt; room_height   cursor.y = room_height
        if cursor.y &lt; 0             cursor.y = 0
            
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///detect gamepads

var gp_num = gamepad_get_device_count()
var success = false

for (var i=0; i&lt;gp_num-1; i++)
{
    if gamepad_is_connected(i)
    {
        if not global.using_gamepad and not global.forced_control_scheme
        {
            printf("::: GAMEPAD CONNECTED")
            refresh_control_scheme(FL_GAMEPAD)
            set_gamepad_deadzones()
        }
        global.gamepad_connected = true
        global.devno = i
        success = true
        break
    }
}

if not success and global.using_gamepad
{
    global.using_gamepad = false
    global.forced_control_scheme = false
    printf("::: GAMEPAD DISCONNECTED")
    refresh_control_scheme(FL_KEYBOARD)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculate axis pressed/released

for (var i=0; i&lt;4; i++)
{
    if pressed_counter[i]
        pressed_counter[i] --
        
    //only release for one frame
    if released[i]
        released[i] = false
        
    if pressed[i] and not pressed_counter[i] and not gamepad_axis_check(global.devno,axes[i])
    {
        pressed[i] = false
        released[i] = true
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
