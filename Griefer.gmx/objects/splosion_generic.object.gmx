<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_splosion_generic</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>flash_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///configure splosion
netvars = NO_HANDLE
event_inherited()

is_stick_kill = false

//DAMAGE
radius = 360
varWrite("falloff_x1",radius/4)
varWrite("falloff_y1",1)
varWrite("falloff_x2",radius/2)
varWrite("falloff_y2",0.75)
varWrite("falloff_x3",radius)
varWrite("falloff_y3",0)

//visuals
sprite = spr_light_mask_splosion;
rubble_obj = rubble
intensity = 10
xscale = radius/360
yscale = radius/360
life = 20                           //make sure around long enough to deal damage
color = make_color_rgb(255,205,148)
intensity_divisor = 1.5
intensity_flicker = 0.2
scale_divisor = 1.025
scale_flicker = 0.05

//engine
alarm[0] = 1
varWrite("senderId",-1)
varWrite("local",false)
varWrite("body_death_type","die")
varWrite("gib_distance",radius/4)

if DEBUG
    printf("BOOM!!")
    
glr_lightsimple_set_rotation(light, 90)
light.splosion_light = true
    
//sync muzzle flash with light params
if object_index = splosion_generic
    flash_update_light()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deal damage (only if local)
//create rubble
dat_rubble = instance_create(x,y,rubble_obj)
dat_rubble.xscale = xscale/2.5
dat_rubble.yscale = yscale/2.5

from_player = find_player(varRead("senderId"))

if object_index = splosion_ink exit

if not varRead("local") and not net_manager.bot_match
{
    if DEBUG
        printf("abstaining from explosion damage computation: NOT LOCAL")
    
    return false
}

if objVarRead(net_manager,"end_match_coming")
{
    exit
}

if not is_bot(from_player)
    challenge_manager.frag_kills = 0
    
for (var i=0; i&lt;instance_number(player); i++)
{
    dat_playa = instance_find(player,i)
    if (not are_teammates(dat_playa, from_player) or dat_playa = from_player) 
    and dat_playa.die_timer=0 and objVarRead(dat_playa,"visible")
        damage_splosion()
}

if object_index != splosion_flame and object_index != splosion_smoke
        and object_index != splosion_ink and object_index != splosion_snare
        and object_index != splosion_flashbang
        and object_index != splosion_flame_instant
{
    for (var i=0; i&lt;instance_number(rag_generic); i++)
    {
        dat_rag = instance_find(rag_generic,i)
        if point_distance(x,y,dat_rag.x,dat_rag.y) &lt; radius and (not collision_line(x,y,dat_rag.x,dat_rag.y,block,true,false) and not collision_line(x,y,dat_rag.x,dat_rag.y,block2_top,true,false))
        {
            dat_rag.xfor = trigx(FORCE_SPLOSION*2,point_direction(x,y,dat_rag.x,dat_rag.y))
            dat_rag.yfor = trigy(FORCE_SPLOSION*2,point_direction(x,y,dat_rag.x,dat_rag.y))
            
            //if random(1) &lt; 0.2
              //  bloodspray_player(dat_rag.x,dat_rag.y,75,random(360),dat_rag.blood_color)
                    
            with (dat_rag)
            {
                //sometimes fracture
                if random(1) &lt; 0.25
                {
                    var loops = 0
                    for (var i=0; i&lt;getLength(joints); i++)
                    {
                        if joints[i] != NO_HANDLE
                        {
                            if not audio_is_playing(snd_gnashed)
                                audio(snd_gnashed,0.65)
                            printf(":::disconnecting joint "+string(i))
                            physics_joint_delete(joints[i])
                            bleed_time = random_range(4*30,5*30)
                            bleed_strength_delay = bleed_time*2/3
                            bleed_strength_dec = 0.25
                            bleed_strength = random_range(16,18)
                            joints[i] = NO_HANDLE
                        }
                        loops++
                        if loops &gt; 10
                            break
                    }
                    joints = 0
                    joints[0] = NO_HANDLE
                }
            
                physics_apply_force(x,y,xfor,yfor)
            }
        }
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
