<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mantel_helmet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
xmark1 = 0
xmark2 = 0
ymark1 = 0
ymark2 = 0
markind = 0

xp_done_counter = 0
xp_done_counter_max = 30*15

lottery_x = room_width*5/6+28
lottery_y = room_height*1/5

av_head = NO_HANDLE
av_txt = NO_HANDLE
av_namerank = NO_HANDLE

rank_before_match = 0
xp_2earn = 0
xp_2draw = 0
xp_replay = 0
alpha = 0
fade_delay = 0
dec = 0.025
scale = 1
earn_lerp_real = 0.125
alpha_lerp_real = 0.1
fraction_full = 0
fraction_really_full = 0
real_xp = 0
xp = 0
rank = 0
xp_before_match = 0
modal_prom = NO_HANDLE
mw = NO_HANDLE  //modal window
aw = NO_HANDLE //armory window
accw = NO_HANDLE //accolade window
earn_pauser = 0

//xp vars to be periodically computed
xp_next = 0
xp_prev = 0
xp_this_rank = 0
xp_earned = 0
xp_needed = 0

alpha_override = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///regen post match visuals

//dont regen head if going to get promoted again
if (xp_next - xp) &gt;= 0 and net_manager.menu_mode = "lottery_steal" and room = rm_lobby
    regen_postmatch_visuals()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync before match vars
xp_before_match = xp
rank_before_match = rank
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///disable xp_replay if not in lottery_steal mode
if net_manager.menu_mode != "lottery_steal" and xp_replay and rtime() &gt; 30
{
    xp_replay = false
    xp = objVarRead(net_manager,"xp")
    rank = objVarRead(net_manager,"rank")
    recompute_xp_vars()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///recompute xp vars


if room = rm_lobby
{
    if net_manager.menu_mode = "lottery_steal" and xp_2earn &lt; 1
        xp_done_counter += real_speed(1)
    else
        xp_done_counter = 0
}

xp = objVarRead(net_manager,"xp")

if not xp_replay
{
    rank = objVarRead(net_manager,"rank")
}

if rank &lt; 0
    rank = 0
    
if xp &lt; 0
    xp = 0
    
recompute_xp_vars()

//printf("ERROR: xp = "+string(xp)+", xp_next = "+string(xp_next)+", xp_prev = "+string(xp_prev))

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///earn xp

if room = rm_menu and alpha &lt; 1
    earn_pauser = 5

if xp_2earn &gt; 0
{
    if not earn_pauser
    {
        if rank = objVarRead(net_manager,"rank") and (xp_next - xp) &gt; -100
            xp_2earn = lerp_real(xp_2earn,0,earn_lerp_real)
        else
        {
            //printf("::: xp_2earn = "+string(xp_2earn))
            if rank+1 &lt; getLength(global.rank_names)
                xp_2earn -= (global.rank_xp[rank+1] - global.rank_xp[rank])/30
            else
                xp_2earn -= 200
                
            if xp_2earn &lt; 0
                xp_2earn = 0
        }
    }
    else
        earn_pauser --
    
    if xp_2earn &lt; 1 and rank = objVarRead(net_manager,"rank")
    {
        xp_2earn = 0
        xp_replay = false
    }
    
    if not alpha_override   
        alpha = 1+dec*fade_delay
}
else if alpha &gt; 0 and not alpha_override
{
    alpha -= dec
    if alpha &lt; 0.05
        alpha = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get promoted
//printf("ERROR: xp_2earn = "+string(xp_2earn)+", xp = "+string(xp)+", xp_next = "+string(xp_next)+", av?  "+string(is_my_avatar(net_manager.my_doll)))
if xp_needed &lt;= 0 and not earn_pauser and is_my_avatar(net_manager.my_doll)
{   
    rank ++
    recompute_xp_vars()
    
    //if not xp_replay
    xp_2earn = xp-xp_prev
    
    if in_match()
        earn_pauser = 30*3
    else
    {
        earn_pauser = 30*3
        if room = rm_lobby
        {
            with bn_postmatch_done cant_fade = true
            clear_postmatch_visuals()
            with bn_postmatch_done cant_fade = false
            
            alarm[1] = earn_pauser-10
        }
    }
    
    //increment actual rank if not replaying earnings
    if not xp_replay
    {
        progression_level_up(rank)
        with net_manager
        {
            if varRead("rank") &lt; array_length_1d(global.rank_names)-1
                varAdd("rank",1)  
                mega_stat_update("rank",varRead("rank"))
        }
        
        with net_manager.my_doll
        {
            syncVarFrom(net_manager,"rank")
        }
    }

    //AVATAR HEAD + NAMERANK
    tyoff = -64*1.5
    
    //extra yoffset in match
    if in_match() tyoff -= 48
    
    fade_delay = 0 // ---&gt; updated in promoted_modal()
    promoted_modal(WVIEW/2,HVIEW/4+tyoff,fa_center,fa_top,1,net_manager.my_doll)
    birth_delay = 1*30
    
    slot_width = 72
    slot_scale = 1.5*slot_width/72
    
    if get_rank_unlock_sprite(rank) != spr_none and not in_match()
    {
        // "Unlocked:"
        uyoff = -12
        ID = instance_create(WVIEW/2,HVIEW/2+uyoff+tyoff,action_word)
        ID.scale = 1
        ID.halign = fa_center
        ID.fnt = fnt_hud_big
        ID.col = c_white
        ID.birth_delay = birth_delay
        ID.fade_delay = fade_delay - birth_delay
        ID.stick_2view = true
        ID.txt = "Unlocked "+bpart_lookup(get_rank_unlock_sprite(rank),global.BPART_NAME)+" Armor Set!"
        ID.init_as_promoted = true
        
        //Draw The Slot That Was Unlocked
        ID = instance_create(WVIEW/2-slot_scale*slot_width/2,HVIEW/2+32+uyoff+tyoff,action_word)
        ID.scale = slot_scale
        ID.txt = rank
        ID.rank_2unlock = rank
        ID.drawing_slot = true
        ID.birth_delay = birth_delay
        ID.fade_delay = fade_delay - birth_delay
        ID.stick_2view = true
        ID.init_as_promoted = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///modal window control
if (instance_exists(mw) or instance_exists(aw) or instance_exists(av_txt) or instance_exists(av_head)) and net_manager.menu_mode != "lottery_steal"
{
    if instance_exists(mw)
    with mw fade_out = true
    
    if instance_exists(aw)
        with aw fade_out = true
        
    if instance_exists(accw)
        with accw fade_out = true
        
    clear_postmatch_visuals()
        
    mw = NO_HANDLE
    aw = NO_HANDLE
    accw = NO_HANDLE

}

if net_manager.menu_mode != "lottery_steal" and not in_match()
{
    with (action_word)
    {
        if init_as_promoted and fade_time &gt; 5
        {
            fade_time = 5
            fade_delay = 1
        }
    }
}

if instance_exists(av_txt)
{
    //av_namerank.txt = get_rank_name(rank)
    
    if in_match() and objVarRead(net_manager,"end_match_coming")
    {
        clear_postmatch_visuals()
    }
}

if instance_exists(accw) and instance_exists(bn_postmatch_done)
{
    accw.x = bn_postmatch_done.x
}

if net_manager.menu_mode = "lottery_steal" and not instance_exists(bn_postmatch_done) and room = rm_lobby
{
    bn = instance_create(room_width*1/6+64,room_height*1/4-32,bn_postmatch_done)
    
    bn.halign = fa_center
    bn.valign = fa_center
    bn.width = 64*3
    bn.height = 64*1.75
    bn.alpha_max = 0.7
    bn.color = make_colour_hsv(300,0,0)
    bn.birth_delay = 30*1.5
    bn.font = fnt_hud_big
    bn.text_valign = fa_center
    
    if instance_exists(mw)
    {
        bn.y = mw.top-mw.height/2+bn.height
    }
}

if (net_manager.lock_armory or xp_done_counter &gt; xp_done_counter_max) and instance_exists(bn_postmatch_done)
{
    net_manager.menu_mode = "lobby"
    alarm[1] = 0
    with bn_postmatch_done fade_out = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle markind
markind ^= 1

if markind = 0
{
    xmark1 = mouse_x
    ymark1 = mouse_y
}
else
{
    xmark2 = mouse_x
    ymark2 = mouse_y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stuff
mw = NO_HANDLE
modal_prom = NO_HANDLE
av_head = NO_HANDLE
av_namerank = NO_HANDLE
av_txt = NO_HANDLE


//cancel the regen of post-match visuals
alarm[1] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stuff

if in_match()//room = rm_menu//in_match()
{
    //sync before match vars
    alarm[0] = 15
}

if room = rm_lobby and net_manager.came_from_match
{
    regen_postmatch()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the xp bar
/*
draw_set_color(c_red)
draw_circle(xmark1,ymark1,5,false)
draw_set_color(c_red)
draw_circle(xmark2,ymark2,5,false)
*/
draw_set_alpha(alpha)

if instance_exists(modal_controls)
{
    if modal_controls.mode_index = 0 and modal_controls.life &gt; 10
    {
        scale = 1
        alpha_override = true
        alpha = 1
        draw_xpbar((modal_controls.left-view_xview)+modal_controls.width/2,(modal_controls.top-view_yview)+modal_controls.height,fraction_full,fraction_full,scale,fa_center,fa_bottom,c_white,false)
    }
}

//if in_match() and alpha &gt; 0
if room = rm_menu and net_manager.menu_mode = "play"
{
    if instance_exists(bn_play) and bn_play.play_counter &gt; 20
    {
        if alpha &lt; 1 alpha += 0.15
        if alpha &gt; 1 alpha = 1
        alpha_override = true
        draw_set_alpha(alpha)
        scale = 1
        draw_xpbar(net_manager.dude_x-20,HVIEW-XPBAR_BOTTOM-64*2.35-12,fraction_full,fraction_full,scale,fa_center,fa_bottom,c_black,false)
        draw_xp_progression(net_manager.dude_x,HVIEW-XPBAR_BOTTOM-64*2-12,1,fa_center,fa_top,c_white,alpha,rank,xp)
    }
    else
    {
        alpha_override = true
        alpha = 0
        xp_2earn = xp-xp_prev
    }
}
else if room = rm_lobby and net_manager.menu_mode = "lottery_steal"
{
    if instance_exists(mw) and mw.popped_in
    {
        if alpha &lt; 1 alpha += 0.15
        if alpha &gt; 1 alpha = 1
        alpha_override = true
        draw_set_alpha(alpha)
        var yoff = -64*0.8-24
        scale = 1.25
        draw_xpbar(room_width/2-20,yoff+HVIEW-XPBAR_BOTTOM-64*2.35-12,fraction_full,fraction_full,scale,fa_center,fa_bottom,c_white,false)
        draw_xp_progression(room_width/2,yoff+HVIEW-XPBAR_BOTTOM-64*2-12,1,fa_center,fa_top,c_white,alpha,rank,xp)
    }
    else
    {
        earn_pauser = 10
        alpha_override = true
        alpha = 0
    }
}
else
{
    if alpha_override
        alpha_override = false
}

if in_match() and alpha &gt; 0 and rtime() &gt; 30 and not instance_exists(modal_controls) and truthval(global.gc[GC_SHOW_XP,1])
{
    draw_xpbar(WVIEW-XPBAR_RIGHT,HVIEW-XPBAR_BOTTOM,fraction_full,fraction_full,scale,fa_right,fa_bottom,c_white,false)
}

draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="36">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///print mark distance
simple_popup("Mark Distance",string(round(point_distance(xmark1,ymark1,xmark2,ymark2))))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>add_xp(100,true,false,"no scaling")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,16</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
