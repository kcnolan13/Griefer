<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>bn_typical</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inherit and define properties
life = 0
event_inherited()

text = "Play"

is_slider = false
is_toggle = false
is_color = false
is_texture = false
uses_capture = false
capture_master = noone
capturing = false
descr = ""
slider_value = 1

alpha_max = 0.6
halign = fa_center
valign = fa_center
snap_2view = false
highlightable = true
text_halign = fa_center
text_valign = fa_center

width = 64*2.5
height = 32
iwidth = width
iheight = height

alarm[0] = 1

exit_child = false

font = fnt_hud
font_color = c_white
submit_action = scr_none

text_color = c_white
color = web_hsv(216,63,100)

is_gui = true
snap_2view = false
color = c_black
can_press_enter = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust for aligns

if not performed_aligns
modal_aligns()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync with bound global vars
event_inherited()

if not in_match() or not global.map_editor
    fade_out = true
    
if is_texture and not uses_capture and not instance_exists(capture_master) and not fade_out
{
    printf("ERROR: capture master does not exist step bn_meditor")
    fade_out = true
}   


if id = fx.bn_alpha_grad {
    slider_value = fx.lvl_alpha_grad
} else if id = fx.bn_grad1 {
    color = fx.lvl_grad1
} else if id = fx.bn_grad2 {
    color = fx.lvl_grad2
} else if id = fx.bn_grad3 {
    color = fx.lvl_grad3
} else if id = fx.bn_grad4 {
    color = fx.lvl_grad4
} else if id = fx.bn_alpha_tex {
    slider_value = fx.lvl_alpha_tex
} else if id = fx.bn_tex_above {
    slider_value = fx.lvl_tex_above
} else if id = fx.bn_tex {
    image = fx.lvl_tex
} else if id = fx.bn_map_col0 {
    color = global.map_colors[room,0]
} else if id = fx.bn_map_col1 {
    color = global.map_colors[room,1]
} else if id = fx.bn_map_texs {
    image = global.map_texs[room]
} else if id = fx.bn_col_alphas {
    slider_value = global.col_alphas[room]
} else if id = fx.bn_export {
    slider_value = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do stuff
if modal_highlighted(id)
{
    
    //toggle toggles
    if is_toggle
    {
        slider_value ^= 1
    }

    //adjust bindings
    if id = fx.bn_alpha_grad {
        fx.lvl_alpha_grad = slider_value
    } else if id = fx.bn_grad1 {
        fx.lvl_grad1 = global.color_picker
        color = global.color_picker
    } else if id = fx.bn_grad2 {
        fx.lvl_grad2 = global.color_picker
        color = global.color_picker
    } else if id = fx.bn_grad3 {
        fx.lvl_grad3 = global.color_picker
        color = global.color_picker
    } else if id = fx.bn_grad4 {
        fx.lvl_grad4 = global.color_picker
        color = global.color_picker
    } else if id = fx.bn_alpha_tex {
        fx.lvl_alpha_tex = slider_value
    } else if id = fx.bn_tex_above {
        fx.lvl_tex_above = slider_value
    } else if id = fx.bn_map_col0 {
        global.map_colors[room,0] = global.color_picker
        color = global.color_picker
    } else if id = fx.bn_map_col1 {
        global.map_colors[room,1] = global.color_picker
        color = global.color_picker
    } else if id = fx.bn_map_texs {
        global.map_texs[room] = slider_value
    } else if id = fx.bn_col_alphas {
        global.col_alphas[room] = slider_value
    } else if id = fx.bn_export {
        slider_value = 1
        export_level_colors()
    }
    
    if is_texture and uses_capture and not capturing
    {
        do_gen = true
        with (bn_meditor)
        {
            if (is_texture and not uses_capture) or capturing
                other.do_gen = false
        }
        if do_gen
        {
            capturing = true
            var bdelay = 5
            var bmas = 1
            var num_per_row = 8
            var first = bg_tex_start+1
            var last = bg_tex_end-1
            var row_index = 1
            var w = 64
            var h = 64
            var spacer = 20
            var xst = WVIEW/2 - (w+spacer)*num_per_row/2
            var yst = y+height/2+64*2
            
            for (var i=first; i&lt;=last; i++)
            {
                if row_index &gt; num_per_row
                {
                    row_index = 0
                    yst += h + spacer
                }
                
                ID = instance_create(xst+row_index*(w+spacer),yst,bn_meditor)
                ID.is_texture = true
                ID.image = i
                //ID.image_stretch_x = true
                ID.image_stretch = true
                ID.image_crop = true
                ID.capture_master = id
                ID.birth_delay = bdelay
                ID.image_is_bg = true
                ID.width = 48
                ID.height = 48
                bdelay += bmas
                
                row_index++
            }
        }
    }
    
    if is_texture and not uses_capture
    {
        if instance_exists(capture_master)
        {
            with capture_master
            {
                image = other.image
                capturing = false
                
                if id = fx.bn_tex 
                {
                    fx.lvl_tex = image
                } 
                else if id = fx.bn_map_texs 
                {
                    global.map_texs[room] = image   
                }
                
                with fx free_level_surfaces()
                
            }
        } else {
            printf("ERROR: clicked on meditor texture thingy but it has no master")
        }
        with (bn_meditor)
        {
            if is_texture and not uses_capture
                fade_out = true
        }
    }
    
    if not is_texture 
        with fx free_level_surfaces()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw description and stuff
event_inherited()

draw_set_font(font)
draw_set_color(c_white)
draw_flash_compensate()
draw_set_alpha(1)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
draw_text(x,y-height/2-12,descr)

if is_slider and modal_highlighted(id) and mouse_check_button(mb_left)
{
    //adjust slider
    if is_slider
    {
        slider_value = min(1, 1 * (display_mouse_get_x()-(left+10)) / (width-20))
        if slider_value &lt; 0
            slider_value = 0
    }
}

if is_slider
{
    draw_set_color(c_gray)
    draw_set_alpha(0.75)
    draw_rectangle(left+10,top+5,left+5+slider_value*(width-20),top+height-5,false)
    draw_set_alpha(1)
    draw_set_color(c_white)
    draw_text(x,y,string(slider_value))
    text = ""
}

if is_color
{
    text = ""
}

if is_texture and not capturing
{
    text = ""
}

if is_toggle
{
    if slider_value
    {
        color = web_hsv(156,69,56)
        text = "True"
    }
    else
    {
        color = web_hsv(0,0,0)
        text = "False"
    }
}

if is_texture and capturing
{
    draw_text(x,y,"Capturing ...")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>0,0</point>
  </PhysicsShapePoints>
</object>
