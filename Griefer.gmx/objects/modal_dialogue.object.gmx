<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>modal_window</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inherit and define properties
life = 0
event_inherited()

scale_die = 0.5

loading_counter = 0
loading_counter_max = 4
loading_counter_inc = 0.1

load_rot = 0
load_rot_inc = 20
load_closable = true
load_life_max = 0

width = 64*2.25*2.5
height = 64*1.5*2.5

header_text_color = c_white
header_font = fnt_hud_medium
font = fnt_hud

active = false
highlightable = true

alpha_max = 1
scale_normal = 1.25
scale_highlighted = 1.025*scale_normal
halign = fa_center
valign = fa_center

text_valign = fa_top
text_halign = fa_center
text_yoff = 96

snap_2view = true

alarm[0] = 1

exit_child = false

parent_dialogue = noone

is_yesno = false
is_alert = false
is_loading = false
is_input_field = false
is_password = false
is_tutorial = false
is_ui_countdown = false
is_downloading = false

bn_yes = noone
bn_no = noone
bn_okay = noone
bn_input = noone

scr_yes = scr_none
scr_no = scr_none
scr_okay = scr_none

draw_fade = true
draw_gradient = true
fade_color = c_black
fade_alpha = 0.65

is_gui = true
scale_lerp_real = 0.4

color = web_hsv(0,0,5)

depth = -99999999

critical = false

text_yes = "Yes"
text_no = "No"
text_okay = "Okay"
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deactivate input fields
with input_field
{
    input_active = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///loading destroy msg

if is_loading
{
    printf("::: destroying loading modal")
}

event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust for aligns and create buttons

if birth_delay
{
    alarm[0] = 1
    exit
}

modal_aligns()

if not is_loading
    header_height = height/4
    
bdelay = 10
binc = 5
text_pad = width/12

if is_tutorial
{
    header_color = web_hsv(228,58,80)
    alpha_max = 1
    draw_fade = true
    draw_gradient = true
    font = fnt_hud
    text_yoff = 84
}

if critical
{
    header_color = c_red
    font = fnt_hud_small
}
    
if is_yesno
{
    bn_yes = instance_create(x-width/4,y+height/2*3/4,bn_dialogue)
    bn_yes.text = text_yes
    bn_yes.script = scr_yes
    bn_yes.depth = depth -10
    bn_yes.parent_dialogue = id
    bn_yes.scale_lerp_real = scale_lerp_real
    bn_yes.birth_delay = bdelay
    bdelay += binc

    bn_no = instance_create(x+width/4,y+height/2*3/4,bn_dialogue)
    bn_no.text = text_no
    bn_no.script = scr_no
    bn_no.depth = depth -10
    bn_no.parent_dialogue = id
    bn_no.scale_lerp_real = scale_lerp_real
    bn_no.birth_delay = bdelay
    bdelay += binc
}
else if not is_alert and not is_loading and not is_input_field
{
    bn_okay = instance_create(x,y+height/2*3/4,bn_dialogue)
    bn_okay.text = text_okay
    bn_okay.script = scr_okay
    bn_okay.depth = depth -10
    bn_okay.parent_dialogue = id
    bn_okay.scale_lerp_real = scale_lerp_real
    bn_okay.birth_delay = bdelay
    bdelay += binc
}
else if is_alert
{
    text_valign = fa_center
    text_yoff = 0
}
else if is_input_field
{
    bn_input = instance_create(x,y,bn_input_field)
    bn_input.width = WVIEW/5*4/5
    bn_input.height = 64*0.8
    bn_input.iwidth = bn_input.width
    bn_input.iheight = bn_input.height
    bn_input.birth_delay = bdelay
    bdelay += binc
    bn_input.depth = depth-10
    bn_input.auto_start = true
    bn_input.sequence = 1
    bn_input.text_color_input = c_black
    bn_input.text_color_default = c_white
    bn_input.color = web_hsv(220,0,55)
    bn_input.active_color = web_hsv(235,0,85)
    bn_input.is_gui = true
    
    if is_password
    {
        bn_input.max_length = 20
        bn_input.is_password = true
        bn_input.text_default = "Password"
        bn_input.text = bn_input.text_default
        bn_input.min_length = 6
    }
    
    bn_yes = instance_create(x-width/4,y+height/2*3/4,bn_dialogue)
    bn_yes.text = text_okay
    bn_yes.script = scr_okay
    bn_yes.depth = depth -10
    bn_yes.parent_dialogue = id
    bn_yes.scale_lerp_real = scale_lerp_real
    bn_yes.birth_delay = bdelay
    bdelay += binc

    bn_no = instance_create(x+width/4,y+height/2*3/4,bn_dialogue)
    bn_no.text = "Cancel"
    bn_no.script = scr_cancel_input
    bn_no.depth = depth -10
    bn_no.parent_dialogue = id
    bn_no.scale_lerp_real = scale_lerp_real
    bn_no.birth_delay = bdelay
    bdelay += binc
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dat ish
if instance_exists(bn_input) and fade_out
{
    bn_input.fade_out = true
}

event_inherited()
label = text
life++

bns[0] = bn_yes
bns[1] = bn_no
bns[2] = bn_okay
bns[3] = bn_input

//allow to exit loading
if is_loading
{
    
    //loading_counter += loading_counter_inc
    //if loading_counter &gt; loading_counter_max
    {
        loading_counter = 0
    }
    
    if load_life_max and life &gt; load_life_max
    {
        fade_out = true    
        printf(":::WARNING: loading dialogue closed due to load_life_max")
    }

    if not fade_out and load_closable and popped_in and
                    (input_check(mapped_control(C_CROUCH)) or keyboard_check(vk_escape) 
                    or keyboard_check(vk_space) or keyboard_check(vk_enter))
    {
        fade_out = true
    }
}

if is_ui_countdown
{
    text = "Match Countdown ... "+string(ceil(objVarRead(net_manager,"lobby_wait_time")/30))
}

if is_downloading
{
    text = "Downloading Important Updates"
}

for (var i=0; i&lt;getLength(bns); i++)
{
    var bn = bns[i]
    {
        if instance_exists(bn)
        {
            bn.width = bn.iwidth*scale
            bn.height = bn.iheight*scale
        }
    }
}

if is_loading
{
    load_rot += load_rot_inc
    if load_rot &gt; 360
        load_rot = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>0,0</point>
  </PhysicsShapePoints>
</object>
