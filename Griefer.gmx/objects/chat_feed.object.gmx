<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>modal_button</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inherit and define properties
event_inherited()

master_scale = 1
match_scale = 0.9

force_show = false
width = 64*6
height = 64*4.5
entry_height = 48
entry_width = width
send_width = 64*1.5
//TEXT ENTRY
entry = instance_create(x,y,input_field)
entry.persistent = true
entry.image_yscale = (entry_height/sprite_get_height(entry.sprite_index))
entry.image_xscale = (entry_width-send_width)/sprite_get_width(entry.sprite_index)
entry.label = ""
entry.font = fnt_feed
entry.max_length = 80
entry.depth = depth-2
//SEND BUTTON
send = instance_create(x,y,modal_button)
send.width = send_width
send.height = entry_height
send.halign = fa_center
send.valign = fa_center
send.text_halign = fa_center
send.text_valign = fa_center
send.font = fnt_hud_big
send.text_color = c_white
send.color = web_hsv(0,0,10)
send.color_highlighted = web_hsv(226,50,70)
send.snap_2view = false //snapping will be done right from chat feed
send.persistent = true
send.text = "SEND"
send.scale_highlighted = 1
send.text_alpha_override = false
send.depth = depth-2

text = ""
text_halign = fa_left
alpha_max = 0.5
alpha_max_original = alpha_max
halign = fa_center
valign = fa_center

alpha_scaler_max = 1
alpha_scaler = alpha_scaler_max
alpha_dec = 0.025
alpha_dec_delay = 0
alpha_dec_delay_max = room_speed*2

snap_2view = false //does its own

hue = 0
sat = 0
val = 20
notif_scale = 1.25
main_hue = 238
chue = main_hue
csat = 0
cval = 10
chue_mult = 1
csat_mult = 0.75
cval_mult = 4
header_height = 28
header_xoff = 0
header_yoff = -8
header_font = fnt_hud_big
header_color = c_black//web_hsv(main_hue,csat*2,65)
color = web_hsv(main_hue,csat,cval*0.5)
header_text_color = c_white
text_color = c_white
header_text = "Lobby Chat"

x = view_xview+width/2
y = view_yview+view_hview-height/2-entry_height
modal_aligns()

snap_2view = false
highlightable = false
exit_child = false

//THE MESSAGES
msgs = 0
msgs_max = 4
msg_ysep = 28
msg_height = (height-header_height-msg_ysep*msgs_max)/msgs_max
msg_starty = height-msg_height/2-5
msg_width = width
msg_avhead_scale = (msg_height)/82
msg_text_width = msg_width - msg_avhead_scale*2*160

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap
if alpha &lt; 0.1 return false

if not in_match()
{
    if keyboard_check_pressed(vk_up)
        master_scale += 0.25
    else if keyboard_check_pressed(vk_down)
        master_scale -= 0.25
    if not instance_exists(tab_bg_modal) or not tab_bg_modal.popped_in
    {
        x = view_xview+view_wview-width/2*master_scale
    } else
    {
        x = average2(view_xview+view_wview,tab_bg_modal.x+tab_bg_modal.width)
    }
    y = view_yview+height/2*master_scale
}
else
{
    master_scale = view_hview/768*match_scale
    x = view_xview+width/2*master_scale
    y = view_yview+view_hview-height/2*master_scale-entry_height*master_scale
}
entry.x = x-width/2*master_scale
entry.y = y+height/2*master_scale
send.x = entry.x+sprite_get_width(entry.sprite_index)*entry.image_xscale*master_scale+send.width/2*master_scale
send.y = y+height/2*master_scale+send.height/2*master_scale
entry.master_scale = master_scale
send.master_scale = master_scale
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap
if alpha &lt; 0.1 return false

if not in_match()
{
    if keyboard_check_pressed(vk_up)
        master_scale += 0.25
    else if keyboard_check_pressed(vk_down)
        master_scale -= 0.25
    if not instance_exists(tab_bg_modal) or not tab_bg_modal.popped_in
    {
        x = view_xview+view_wview-width/2*master_scale
    } else
    {
        x = average2(view_xview+view_wview,tab_bg_modal.x+tab_bg_modal.width)
    }
    y = view_yview+height/2*master_scale
}
else
{
    master_scale = view_hview/768*match_scale
    x = view_xview+width/2*master_scale
    y = view_yview+view_hview-height/2*master_scale-entry_height*master_scale
}
entry.x = x-width/2*master_scale
entry.y = y+height/2*master_scale
send.x = entry.x+sprite_get_width(entry.sprite_index)*entry.image_xscale*master_scale+send.width/2*master_scale
send.y = y+height/2*master_scale+send.height/2*master_scale
entry.master_scale = master_scale
send.master_scale = master_scale
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set lerp targets for all messages
event_inherited()

if nth_frame(room_speed)
{
    alpha_scaler_max = 1//average2(global.gc[GC_CHAT_FEED_ALPHA,1],1)
    alpha_max = alpha_max_original//*global.gc[GC_CHAT_FEED_ALPHA,1]
    match_scale = average2(global.gc[GC_CHAT_FEED_ALPHA,1],1)
}

if in_match()
{

    if keyboard_check_pressed(192)
    {
        force_show ^= 1
        
        if not force_show
            alpha_scaler = 0
            
        entry.input_active = force_show
        keyboard_string = ""
        entry.input_string = ""
    }

    var tval =  truthval(global.gc[GC_CHAT_FEED,1])
    if tval = 2
    {
        if not alpha_dec_delay
        {
            if alpha_scaler &gt; 0
                alpha_scaler -= alpha_dec
            else alpha_scaler = 0
        }
        else
        {
            alpha_dec_delay --
        }
    }
    else if tval = 1
    {
        alpha_scaler = alpha_scaler_max
    }
    else if tval = 0 and not force_show
    {
        alpha_scaler = 0
    }
    else
    {
        printf("ERROR: chat_feed has unexpected GC_CHAT_FEED value: "+string(tval))
    }
    
    if force_show
        alpha_scaler = alpha_scaler_max
}
else
{
    master_scale = 1
    if room = rm_lobby and menmode() = "lobby"
    {
        force_show = true
        alpha_scaler = alpha_scaler_max
        if keyboard_check_pressed(192)
        {
                entry.input_active ^= 1
                entry.input_string = ""
                keyboard_string = ""
        }
    }
    else 
    {
        force_show = false
        alpha_scaler = 0
    }
}

if instance_exists(modal_controls) or rtime() &lt; room_speed
    alpha_scaler = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap
if alpha &lt; 0.1 return false

if not in_match()
{
    if keyboard_check_pressed(vk_up)
        master_scale += 0.25
    else if keyboard_check_pressed(vk_down)
        master_scale -= 0.25
    if not instance_exists(tab_bg_modal) or not tab_bg_modal.popped_in
    {
        x = view_xview+view_wview-width/2*master_scale
    } else
    {
        x = average2(view_xview+view_wview,tab_bg_modal.x+tab_bg_modal.width)
    }
    y = view_yview+height/2*master_scale
}
else
{
    master_scale = view_hview/768*match_scale
    x = view_xview+width/2*master_scale
    y = view_yview+view_hview-height/2*master_scale-entry_height*master_scale
}
entry.x = x-width/2*master_scale
entry.y = y+height/2*master_scale
send.x = entry.x+sprite_get_width(entry.sprite_index)*entry.image_xscale*master_scale+send.width/2*master_scale
send.y = y+height/2*master_scale+send.height/2*master_scale
entry.master_scale = master_scale
send.master_scale = master_scale
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alphas
entry.alpha = alpha_scaler
send.alpha = alpha_scaler
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///click the send button(simulate press enter)

if modal_highlighted(send)
{
    event_perform(ev_keypress,vk_enter)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///force show, clear out when leave matchmaking
if in_match()
    force_show = false
    
if room = rm_menu
{
    for (var i=0; i&lt;getLength(msgs); i++)
    {
        if instance_exists(msgs[i])
        {
            with msgs[i] instance_destroy()
            msgs[i] = NO_HANDLE
        }
    }
    //delete array basically
    msgs = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mostly inherited

if room = rm_login
    alpha_scaler = 0

text_halign = fa_center
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send message
if alpha_scaler &gt; 0.1
{
    if string_length(entry.input_string) &gt; 0 and instance_exists(net_manager.my_doll) and entry.input_active
    {
        audio(snd_click,1)
        var name = objVarRead(net_manager.my_doll,"pName")
        new_chat_feed_message(name,"",entry.input_string)
        if not net_manager.bot_match and room != rm_menu
        {
            sendBigMessageStr("chat_feed",name,"",entry.input_string)
        }
        if in_match() and not match_ending() and not match_starting()
        {
            entry.input_active = false
            if truthval(global.gc[GC_CHAT_FEED,1]) != 0
            {
                alpha_scaler = alpha_scaler_max
                alpha_dec_delay = alpha_dec_delay_max
                force_show = false
            }
        }
        entry.str_cursor = ""
        entry.input_string = ""
        keyboard_string = ""
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>0,0</point>
  </PhysicsShapePoints>
</object>
