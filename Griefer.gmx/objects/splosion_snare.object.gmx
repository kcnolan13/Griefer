<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_splosion_generic</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-94</depth>
  <persistent>0</persistent>
  <parentName>splosion_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///properties
event_inherited()

initialize_physics()

audio(snd_snare,1)
counter = 0
part_off = 64*1.5

pnames_snared = 0
snare_index = 0

speed_multiplier = random_range(0.12,0.15)

snare_radius = 64*3.5

life = 30*6
part_life = 5*30

sys_smoke = part_system_create()

ps = part_type_create()
part_type_alpha3(ps,0.25,1,0)
part_type_shape(ps,pt_shape_smoke)
part_type_colour_mix(ps,make_color_rgb(0,0,0),make_color_rgb(50,110,210))
part_type_life(ps,3/4*part_life,part_life)
part_type_size(ps,1,8,0.025,0)
part_type_direction(ps,0,360,0,0.25)

part_type_blend(ps,true)
part_system_depth(sys_smoke,depth)

em = part_emitter_create(sys_smoke)
part_emitter_region(sys_smoke,em,x-random(part_off),x+random(part_off),y-random(part_off),y+random(part_off),ps_shape_ellipse,ps_distr_gaussian)

part_emitter_burst(sys_smoke,em,ps,6)

//engine
varWrite("body_death_type","die")
varWrite("gib_distance",-1)

//visuals
sprite = spr_light_mask_splosion;
rubble_obj = rubble
intensity = 8
xscale = radius/360/1.5
yscale = radius/360/1.5
color = make_color_rgb(150,75,225)
intensity_divisor = 1.9
intensity_flicker = 0.2
scale_divisor = 1.025
scale_flicker = 0.05

//DAMAGE
radius = 64*6
damage = 0
varWrite("falloff_x1",0)
varWrite("falloff_y1",0)
varWrite("falloff_x2",radius*2.25/3)
varWrite("falloff_y2",0)
varWrite("falloff_x3",radius)
varWrite("falloff_y3",0)


//sync muzzle flash with light params
flash_update_light()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free memory and un-snare players
for (i=0; i&lt;instance_number(player); i++)
{
    dat_playa = instance_find(player,i)
    if objVarRead(dat_playa,"speed_multiplier") = speed_multiplier
    {
        printf("snare destroy --&gt; freeing player from snare")
        objVarWrite(dat_playa,"speed_multiplier",1)
        obj_update_real(dat_playa,"speed_multiplier",FL_NORMAL)
    }
}


if part_emitter_exists(sys_smoke,em)
    part_emitter_destroy(sys_smoke,em)

if part_system_exists(sys_smoke)
    part_system_destroy(sys_smoke)
    
if part_type_exists(ps)
    part_type_destroy(ps)

event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do physics and make particles

counter += real_speed(1)

part_emitter_region(sys_smoke,em,x-random(part_off),x+random(part_off),y-random(part_off),y+random(part_off),ps_shape_ellipse,ps_distr_gaussian)

if counter &lt; life
{
    part_type_speed(ps,0,real_speed(0.75),real_speed(0.015),real_speed(0.1))
    if fps &gt;= 25
    {
        if random(1) &lt; 0.095
            part_emitter_burst(sys_smoke,em,ps,1)
    } else if random(1) &lt; 0.065
    {   
        part_emitter_burst(sys_smoke,em,ps,1)
    }
}

if counter &gt; life+part_life
{
    printf("destroying snare system")
    instance_destroy()
    exit
}

if varRead("local")
{
    for (ind=0; ind&lt;instance_number(player); ind++)
    {
        dat_playa = instance_find(player,ind)
        if counter &lt; life+part_life/4 and in_my_snare(dat_playa) and objVarRead(dat_playa,"alive") and objVarRead(dat_playa,"hp") &gt; 0 and dat_playa.alive_counter &gt; 30*2
        {
            if point_distance(x,y,dat_playa.x,dat_playa.y) &lt;= point_distance(x,y,dat_playa.x+dat_playa.hsp,dat_playa.y)//+dat_playa.vsp)
            {
                if objVarRead(dat_playa,"speed_multiplier") = 1
                {
                    var do_snare = true
                    for (var i=0; i&lt;getLength(pnames_snared); i++)
                    {
                        if objVarRead(dat_playa,"pName") = pnames_snared[i]
                            do_snare = false
                    }
                    
                    if do_snare and (dat_playa != net_manager.local_player and find_player(varRead("senderId")) = net_manager.local_player)
                    {
                        pnames_snared[snare_index] = objVarRead(dat_playa,"pName")
                        snare_index++
                        
                        challenge_manager.snare_kills ++
                        //update snare totals
                        increment_weapon_accolade("spr_snare")
                    }
                }
            
                objVarWrite(dat_playa,"speed_multiplier",speed_multiplier)
                obj_update_real(dat_playa,"speed_multiplier",FL_NORMAL)
                
                dat_playa.hsp = trigx(20,point_direction(dat_playa.x,dat_playa.y,x,y))
                dat_playa.vsp = trigy(20,point_direction(dat_playa.x,dat_playa.y,x,y))
                
                //hurt the player
                from_player = find_player(varRead("senderId"))
                //printf("snaring player: hsp = "+dat_playa.hsp+", vsp = "+dat_playa.vsp)
                //damage_splosion()
            } else
            {
                //printf("freeing player: hsp = "+dat_playa.hsp+", vsp = "+dat_playa.vsp+", d1 = "+ point_distance(x,y,dat_playa.x,dat_playa.y)+", d2 = "+point_distance(x,y,dat_playa.x+dat_playa.hsp,dat_playa.y))
                objVarWrite(dat_playa,"speed_multiplier",1)
                obj_update_real(dat_playa,"speed_multiplier",FL_NORMAL)
            }
        }
        else
        {
            //printf("player not in ink: "+objVarRead(dat_playa,"alive")+", "+objVarRead(dat_playa,"hp")+", "+dat_playa.alive_counter)
            if objVarRead(dat_playa,"speed_multiplier") = speed_multiplier
            {
                printf("freeing player from snare")
                objVarWrite(dat_playa,"speed_multiplier",1)
                obj_update_real(dat_playa,"speed_multiplier",FL_NORMAL)
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
