<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-95</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
depth = -95
counter = 0
width = 64*4
height = 64*3
image_xscale = width
image_yscale = height
alpha = 0.4
alpha_max = 1
alpha_highlight = alpha_max
active = false
active_color = c_gray
highlightable = true
surface = NO_HANDLE

hover_delay = 10
hover_counter = 0
show_popup = false

//modal meter stuff
meter_backing_percent = 0
meter_percent = 0
meter_val = 0
meter_desc = 0
meter_col_out = c_blue
meter_col_in = c_aqua
meter_val_places = 0

//modal stat history stuff
col_pos = c_aqua
col_neg = c_red
y_thresh = 1
history_string = ""
record_count = 5

histories[0] = ""
histories[1] = ""
histories[2] = ""
history_labels[0] = "Kill Death Ratio"
history_labels[1] = "Points Per Life"
history_labels[2] = "Win-Loss Spread"
records[0] = 5
records[1] = 25
records[2] = 100


img_index = -1

drew_left = 0
drew_right = 0

extra_height = 0


pop_sound = snd_none
popped_in = false

birth_delay = 0

fade_out = false
fade_delay = 0
dec = 0.25

scale_born = 0.4
scale = scale_born

scale_die = 0.4

scale_highlighted = 1.1
scale_lerp = 0.7

font = fnt_hud
text = ""
text_color = c_white
text_alpha_override = true
text_halign = fa_center
text_valign = fa_middle
text_xoff = 0
text_yoff = 0

image = spr_none

color = c_dkgray
header_color = c_gray
header_height = 0
header_font = font
header_text = ""
header_text_color = text_color

halign = fa_left
valign = fa_top

snap_2view = false
snapped = false
view_xpercent = 0
view_ypercent = 0
view_xoff = 0
view_yoff = 0

left = x
top = y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free surface
if surface_exists(surface)
    surface_free(surface)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap
if snapped and (object_index != accolade_generic )
{
    x = view_xview+view_xpercent*view_wview
    y = view_yview+view_ypercent*view_hview
}
else if snapped
{
    x = view_xview+view_xoff
    y = view_yview+view_yoff
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap
if snapped and (object_index != accolade_generic )
{
    x = view_xview+view_xpercent*view_wview
    y = view_yview+view_ypercent*view_hview
}
else if snapped
{
    x = view_xview+view_xoff
    y = view_yview+view_yoff
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dat ish
counter ++

if snap_2view = true and snapped = false and counter &gt; 1
{
    snapped = true
    view_xoff = x - view_xview
    view_yoff = y - view_yview
    view_xpercent = abs(view_xoff/view_wview)
    view_ypercent = abs(view_yoff/view_hview)
}

if fade_delay
{
    fade_delay --
    if not fade_delay
    {
        fade_out = true
    }
}

if birth_delay &gt; 0
{
    birth_delay --
    
    if fade_out
        instance_destroy()
    
    exit
}

if snapped and (object_index != accolade_generic )
{
    x = view_xview+view_xpercent*view_wview
    y = view_yview+view_ypercent*view_hview
}
else if snapped
{
    x = view_xview+view_xoff
    y = view_yview+view_yoff
}   

image_xscale = width
image_yscale = height

if not popped_in and abs(scale - 1) &lt;= 0.05
{
   popped_in = true
   if pop_sound != snd_none
   audio(pop_sound,1)
}

if fade_out = true and popped_in
{
    alpha -= dec
    if alpha &lt; 1
    {
        scale = lerp(scale,scale_die,scale_lerp)
    }
    if alpha &lt; 0.05
        instance_destroy()
} else
{
}

if modal_highlighted(id)
{
    hover_counter ++
    if hover_counter &gt; hover_delay
        show_popup = true
        
    scale = lerp(scale,scale_highlighted,scale_lerp)
    if not fade_out
    {
        alpha = lerp(alpha,alpha_highlight,scale_lerp)
    }
}
else
{
    hover_counter = 0
    show_popup = false
    scale = lerp(scale,1,scale_lerp)
    if not fade_out
    {
        if not active
            alpha = lerp(alpha,alpha_max,scale_lerp)
        else
            alpha = lerp(alpha,alpha_highlight,scale_lerp)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the stuff
if birth_delay &gt; 0
    exit

draw_set_alpha(alpha)

left = x
top = y

if object_index = modal_meter
{
    var datVal = meter_val
    if meter_val_places &gt; 0 and meter_val mod 1 = 0
    {
        datVal = string(meter_val)+"."
        for (var i=0; i&lt;meter_val_places; i++)
            datVal += "0"
    }
    draw_stat_meter(x,y,datVal,meter_desc,meter_col_out,meter_col_in,scale,meter_backing_percent,meter_percent)
    exit
}

if object_index = modal_stat_history
{
    draw_stat_history_chart(x,y,scale,col_pos,col_neg,y_threshold,history_string,record_count)
    exit
}

if halign = fa_center
    left -= width*scale/2
if halign = fa_right
    left -= width*scale/2
    
if valign = fa_center
    top -= height*scale/2
if valign = fa_bottom
    top -= height*scale/2
    
if object_index = accolade_generic
{
    draw_set_alpha(alpha*alpha_scroll_scaler)
    draw_accolade()
    exit
}

if not surface_exists(surface)
{   
    if active
        draw_set_color(active_color)
    else
        draw_set_color(color)
        
    draw_rectangle(left,top,left+width*scale,top+(height+extra_height)*scale,false)
    drew_left = left
    drew_right = left+width*scale
    
    if header_height &gt; 0
    {
        draw_set_color(header_color)
        draw_rectangle(left,top+header_height*scale,left+width*scale,top+(height+extra_height)*scale,false)
    }
    
    if image != spr_none
    {
        draw_sprite_ext(image,img_index,left,top,scale,scale,0,c_white,1)
    }
    
    if text != "" or header_text != ""
    {
        if text_alpha_override
        draw_set_alpha(1)
        
        draw_set_font(font)
        draw_set_color(text_color)
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        
        var xpos = left+width*scale/2
        var ypos = top+height*scale/2
        
        if text_halign = fa_right
        {
            draw_set_halign(fa_right)
            xpos = left+width*scale-6
        }
        
        if text_halign = fa_left
        {
            draw_set_halign(fa_left)
            xpos = left+2*scale
        }
        
        if text_valign = fa_top
        {
            draw_set_valign(fa_top)
            ypos = top+2*scale
        }
        
        if text_valign = fa_bottom
        {
            draw_set_valign(fa_bottom)
            ypos = top+height*scale-25*scale
        }
        
        xpos += text_xoff*scale
        ypos += text_yoff*scale
        
        draw_text_ext_transformed(xpos,ypos,text,10,width*scale,scale,scale,0)
        
        if header_height &gt; 0
        {
            draw_set_font(header_font)
            draw_set_color(header_text_color)
            draw_set_halign(fa_center)
            draw_set_valign(fa_center)
            draw_text_ext_transformed(left+width*scale/2,top+header_height*scale/2,header_text,10,width*scale,scale,scale,0)
        }
        
        draw_set_alpha(alpha)
    }
    
    draw_set_alpha(1)
}
else
{
    ///just draw whatever is on the surface
    draw_surface_general(surface,0,0,width,height,left,top,1,1,0,c_white,c_white,c_white,c_white,1)
    //draw_surface(surface,left,top,width*scale,height*scale)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
