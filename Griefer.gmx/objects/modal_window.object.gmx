<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_1pixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-95</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
auto_crop = false
crop_pad = 24

force_click = false
play_sound_when_ready = false

depth = -95
counter = 0
width = 64*4
height = 64*3
image_xscale = width
image_yscale = height
alpha = 0.4
alpha_max = 1
alpha_highlight = alpha_max
alpha_scaler = 1
active = false
active_color = c_gray
color_highlighted = GARBAGE
highlightable = true
wait_while_loading = false
post_loading_wait_time = 30*5
blocked = false

snap_ref = noone

draw_image_gradient = false
image_gradient_alpha = 0.25

game_end_on_destroy = false

border_width = 0
border_color = c_white
border_alpha = 1
border_inscribe = false

menu_mode = "all"

is_loading = false
load_rot = 0
load_rad = 38
load_point_rad_max = 12
load_point_rad_min = 6
load_points = 8
load_text_hsep = 10
loading_counter = 0

//used for modal_meter
radius = 20

surface = NO_HANDLE

surf_3d = NO_HANDLE
surf_3d_ready = false
is_3d = false
rot_3d = 0
tex_3d = NO_HANDLE

master_scale = 1
is_gui = false
gui_xoff = x
gui_yoff = y

bind_to_global_xoff = false
bind_global_xoff_to_translation_x = false

performed_aligns = false

translation_x = 0
translation_xtarget = 0
translation_y = 0
translation_ytarget = 0
translation_lerp = 0.1

rect_xoff = 0
rect_yoff = 0
rect_yextra = 0
rect_xextra = 0
rect_alpha = 1
draw_rect = true
draw_fade = false
draw_gradient = false
omit_internal_gradient = false
grad1 = c_white
grad2 = c_white
grad3 = c_black
grad4 = c_black
fade_color = c_black
fade_alpha = 0.65

hover_delay = 10
hover_counter = 0
show_popup = false

//modal meter stuff
meter_backing_percent = 0
meter_percent = 0
meter_val = 0
meter_desc = 0
meter_col_out = c_blue
meter_col_in = c_aqua
meter_val_places = 0

//modal stat history stuff
col_pos = c_aqua
col_neg = c_red
y_thresh = 1
history_string = ""
record_count = 5

histories[0] = ""
histories[1] = ""
histories[2] = ""
history_labels[0] = "Kill Death Ratio"
history_labels[1] = "Points Per Life"
history_labels[2] = "Win-Loss Spread"
records[0] = 5
records[1] = 25
records[2] = 100


img_index = -1

drew_left = 0
drew_right = 0

extra_height = 0


pop_sound = snd_none
pop_gain = 1
popped_in = false

highlight_sound = snd_none
highlight_gain = 1
highlight_sound_played = false

birth_delay = 0

fade_out = false
fade_delay = 0
dec = 0.25

scale_die = 0
scale_born = 0.4
scale = scale_born

scale_die = 0.4

scale_normal = 1
scale_highlighted = 1.1
scale_lerp_real = 0.7

font = fnt_hud
text = ""
text_color = c_white
text_alpha_override = true
text_halign = fa_center
text_valign = fa_middle
text_xoff = 0
text_yoff = 0
text_linesep = 20
text_pad = 0

image_is_bg = false
image = spr_none
image_stretch_x = false
image_stretch_y = false
image_stretch = false
img_xscale = 1
img_yscale = 1
image_crop = false
image_crop_align = fa_center
img_blend = c_white
image_xoff = 0
image_yoff = 0
image_halign = fa_left
image_valign = fa_left

color = c_dkgray
header_color = c_gray
header_height = 0
header_font = font
header_text = ""
header_text_color = text_color
header_alpha = 1
header_xoff = 0
header_yoff = 0

halign = fa_left
valign = fa_top

snap_2view = false
snapped = false
snap_by_percent = true
view_xpercent = 0
view_ypercent = 0
view_xoff = 0
view_yoff = 0

left = x
top = y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>11</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free surface
if surface_exists(surface)
    surface_free(surface)

if surface_exists(surf_3d)
    surface_free(surf_3d)
    
if game_end_on_destroy
    game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///auto_crop
compute_auto_crop()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap
if not is_gui
{
    if snapped and snap_by_percent
    {
        x = view_xview+view_xpercent*view_wview
        y = view_yview+view_ypercent*view_hview
        if bind_to_global_xoff
            x += global.xoff
    }
    else if snapped
    {
        x = view_xview+view_xoff
        y = view_yview+view_yoff
        if bind_to_global_xoff
            x += global.xoff
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snap
if not is_gui
{
    if snapped and snap_by_percent
    {
        x = view_xview+view_xpercent*view_wview
        y = view_yview+view_ypercent*view_hview
        if bind_to_global_xoff
            x += global.xoff
    }
    else if snapped
    {
        x = view_xview+view_xoff
        y = view_yview+view_yoff
        if bind_to_global_xoff
            x += global.xoff
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dat ish
counter ++

if snapped = false
{
    modal_recalculate_snap()
}

if fade_delay
{
    fade_delay = sub_real(fade_delay,1)
    if not fade_delay
    {
        fade_out = true
    }
}

if birth_delay &gt; 0
{
    birth_delay = sub_real(birth_delay,1)
    
    if wait_while_loading and waiting_for_data()
    {
        birth_delay = post_loading_wait_time
    }

    
    if fade_out
        instance_destroy()
    
    exit
}

if menu_mode != "all" and menmode() != menu_mode
{
    fade_out = true
}

//TRANSLATION
if translation_x != translation_xtarget or translation_y != translation_ytarget
{
    x += lerp(translation_x, translation_xtarget, translation_lerp) - translation_x
    y += lerp(translation_y, translation_ytarget, translation_lerp) - translation_y
    
    translation_x = lerp(translation_x, translation_xtarget, translation_lerp)
    translation_y = lerp(translation_y, translation_ytarget, translation_lerp)
    
    modal_recalculate_snap()
    
    if abs(translation_y - translation_ytarget) &lt; 0.5
        translation_y = translation_ytarget
        
    if abs(translation_x - translation_xtarget) &lt; 0.5
        translation_x = translation_xtarget
        
    if bind_global_xoff_to_translation_x
    {
        global.xoff = translation_x/2
    }
}

if not is_gui
{
    if snapped and snap_by_percent
    {
        x = view_xview+view_xpercent*view_wview
        y = view_yview+view_ypercent*view_hview
        if bind_to_global_xoff
            x += global.xoff
    }
    else if snapped
    {
        x = view_xview+view_xoff
        y = view_yview+view_yoff
        if bind_to_global_xoff
            x += global.xoff
    } 
}  

image_xscale = width
image_yscale = height

if not popped_in and abs(scale - scale_normal) &lt;= 0.05 
{
   popped_in = true
   if pop_sound != snd_none
    play_sound_when_ready = true
}

if play_sound_when_ready
{
    do_play_sound = true
    with modal_window
    {
        if pop_sound != snd_none and audio_is_playing(pop_sound)
            other.do_play_sound = false
    }
    if do_play_sound
    {
        play_sound_when_ready = false
        audio(pop_sound,pop_gain/GAIN_AUDIO)
    }
}

if fade_out = true and popped_in and translation_x = translation_xtarget and translation_y = translation_ytarget
{
    alpha -= real_speed(dec)
    
    if alpha &lt; 1
    {
        scale = lerp_real(scale,scale_die,scale_lerp_real)
    }
    if alpha &lt; 0.05
        instance_destroy()
} else
{
}

if modal_highlighted(id)
{
    hover_counter += real_speed(1)
    
    if hover_counter &gt; hover_delay
        show_popup = true
        
    if hover_counter &gt; hover_delay/6 and highlight_sound != snd_none and not highlight_sound_played
    {
        highlight_sound_played = true
        audio(highlight_sound,highlight_gain)
    }
        
    scale = lerp_real(scale,scale_highlighted,scale_lerp_real)
    cursor_highlight()
    
    if not fade_out
    {
        alpha = lerp_real(alpha,alpha_highlight,scale_lerp_real)
    }
}
else
{
    highlight_sound_played = false
    hover_counter = 0
    show_popup = false
    scale = lerp_real(scale,scale_normal,scale_lerp_real)
    if not fade_out
    {
        if not active
            alpha = lerp_real(alpha,alpha_max,scale_lerp_real)
        else
            alpha = lerp_real(alpha,alpha_highlight,scale_lerp_real)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free surface
if surface_exists(surface)
    surface_free(surface)

if surface_exists(surf_3d)
    surface_free(surf_3d)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw in the GUI layer
if birth_delay &gt; 0 or not is_gui
    exit

if draw_fade or draw_gradient
{
    draw_set_alpha(fade_alpha*alpha*alpha_scaler)
    draw_set_color(fade_color)
    if not draw_gradient    
        draw_rectangle(0,0,WVIEW,HVIEW,false)
    else
        draw_rectangle_colour(0,0,WVIEW,HVIEW, grad1, grad2, grad3, grad4, false)
}    

draw_set_alpha(alpha*alpha_scaler)
gui_xoff = x
gui_yoff = y
left = gui_xoff
top = gui_yoff

if object_index = modal_meter
{
    var datVal = meter_val
    if meter_val_places &gt; 0 and meter_val mod 1 = 0
    {
        datVal = string(meter_val)+"."
        for (var i=0; i&lt;meter_val_places; i++)
            datVal += "0"
    }
    draw_stat_meter(gui_xoff,gui_yoff,datVal,meter_desc,meter_col_out,meter_col_in,scale*master_scale,meter_backing_percent,meter_percent)
    exit
}

if object_index = modal_stat_history
{
    draw_stat_history_chart(gui_xoff,gui_yoff,scale*master_scale,col_pos,col_neg,y_threshold,history_string,record_count)
    exit
}

if object_index = modal_splat
{
    draw_modal_splat()
    exit
}   

draw_modal_window()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the stuff
if birth_delay &gt; 0 or is_gui
    exit

if draw_fade or draw_gradient
{
    draw_set_alpha(fade_alpha*alpha*alpha_scaler)
    draw_set_color(fade_color)
    if not draw_gradient    
        draw_rectangle(0,0,WVIEW,HVIEW,false)
}  

draw_set_alpha(alpha*alpha_scaler)

left = x
top = y

if object_index = modal_meter
{
    var datVal = meter_val
    if meter_val_places &gt; 0 and meter_val mod 1 = 0
    {
        datVal = string(meter_val)+"."
        for (var i=0; i&lt;meter_val_places; i++)
            datVal += "0"
    }
    draw_stat_meter(x,y,datVal,meter_desc,meter_col_out,meter_col_in,scale*master_scale,meter_backing_percent,meter_percent)
    exit
}

if object_index = modal_stat_history
{
    draw_stat_history_chart(x,y,scale*master_scale,col_pos,col_neg,y_threshold,history_string,record_count)
    exit
}

if object_index = modal_splat
{
    draw_modal_splat()
    exit
}   

draw_modal_window()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
