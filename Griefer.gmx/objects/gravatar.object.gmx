<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rvisor2_helmet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>character_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
netvars = NO_HANDLE

lobby_scale_decrementor = 0.2
prescaled = false
anim_prescaled = 1

event_inherited()
printf("A DUDE IS BEING MADE")
varWrite("pNum",0)
varWrite("login_delay",30)
varWrite("animation_scale",3)
varWrite("player_quit",false)
varWrite("bot",false)

scale_normal = 1.5
scale_highlight = 1.8
scale_lerp = 0.18
login_lerp_delay_base = 30*3
login_lerp_delay = 15
login_dude_lerp = 0.2

animation_previous = 0
arm_pose_previous = 0
force_jumped = false
hover_counter = 0
hover_delay = 10

mouse_wheel_delay = 0
mouse_wheel_delay_max = 2

varWrite("rank",0)
varWrite("global_rank",9000)
varWrite("controllable",true)

//bparts
bparts_all_init()

for (var i=0; i&lt;NUM_BPARTS; i++)
{
    bparts_ready[i] = false
}

bparts_done_ready = false

randomize()

animation_stand()
varWrite("visible",false)
varWrite("animation_speed",SPD_STAND)
visible = true
alarm[1] = 1
alarm[2] = 30
//set xy to reasonable numbers
//alarm[3] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>printf("GRAVATAR DESTROY TRIGGERED")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync mod vars recurringly
if not in_match()
{
    sync_mod_vars()
}

alarm[2] = 30*1/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///print debug
printf("::: "+string(varRead("pName"))+" gravatr was instantiated with uniqueId #"+string(varRead("uniqueId")))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all dat ish
if mouse_wheel_delay &gt; 0
mouse_wheel_delay --

if nth_frame(60)
{
    if room = rm_login
    {
        dude_lerp = login_dude_lerp
    } 
    else
    {
        dude_lerp = 0.3
    }
}


if in_match()
{
    x = room_width+64*12
    y = -64*12
}
else if room = rm_lobby or room = rm_menu
{   
    //sync uniqueId up with your local avatar
    if instance_exists(net_manager.my_doll)
    {
        varWrite("uniqueId",objVarRead(net_manager.my_doll,"uniqueId"))
    }
    varWrite("pName",stat_manager.grav_name)
}
else if room = rm_login
{
    if login_lerp_delay_base
        login_lerp_delay_base --
        
    if rtime() &gt; 5*30 and varRead("lerp_delay") &gt; login_lerp_delay*varRead("pNum")
        varWrite("lerp_delay",login_lerp_delay*varRead("pNum"))
    
    var dude_x_new = room_width/2+global.xoff
    var pnum = varRead("pNum")
    var spacer = 64*2.75
    
    if pnum &gt; 1 and pnum mod 2 = 0
    {
        dude_x_new -= pnum/2*spacer
    }
    else
    {
        dude_x_new += (pnum-1)/2*spacer
    }
    
    varWrite("dude_x",dude_x_new)
    
    if not bparts_done_ready or varRead("login_delay")
    {
        varWrite("login_delay",sub_real(varRead("login_delay"),1))
        varWrite("dude_y",1200)
    }
    else
    {
        if not net_manager.login_when_ready
            varWrite("dude_y",room_height*4/5-48*(5-varRead("pNum")))
        else
        {
            varWrite("dude_y",HVIEW+64*8+400*varRead("pNum"))
        }
        
        if varRead("lerp_delay")
            y = 1200
    }
}

if point_distance(x,y,cursor.x,cursor.y) &lt; 64
{
    hover_counter++
    if room = rm_login
        varWrite("animation_scale",lerp(varRead("animation_scale"),scale_highlight,scale_lerp))
}
else
{
    hover_counter = 0
    if room = rm_login
        varWrite("animation_scale",lerp(varRead("animation_scale"),scale_normal,scale_lerp))
}

varWrite("animation_speed",SPD_STAND)

if not bparts_done_ready
{
    for (var i=0; i&lt;1; i++)
    {
        if not bparts_ready[i] and (room != rm_login or id != net_manager.stat_gravatar)
        {
            bparts_ready[i] = bparts_get_ready(i)
        }
    }
    
    bparts_done_ready = true
    
    for (var i=0; i&lt;1; i++)
    {
        if not bparts_ready[i]
            bparts_done_ready = false
    }
    
    if bparts_done_ready 
    {
    
        if room = rm_login
        {
            varWrite("lerp_delay",login_lerp_delay_base+login_lerp_delay*varRead("pNum"))
            dude_instalerp_x = true
        }
        else
        {
            stat_manager.grav_ready = true
            if (net_manager.stat_gravatar != id)
            {
                printf(":::WARNING: gravatar expected netman.stat_gravatar to be equal to his id in step_1")
            }
        }
        
        printf("::: all bparts ready for grav --&gt; enable grav_ready in stat man!")
        varWrite("visible",true)
        visible = true
    }
}

if room = rm_menu or room = rm_lobby
{
    varWrite("arm_animation_speed",0)
    varWrite("arm_animation_index",0)
    sync_poses_and_animations()
    
    if menmode() != "stats" or stat_manager.stat_tab = stat_manager.tabs[2]
    {
        varWrite("dude_x",-64*12)
        varWrite("visible",false)
        visible = false
    } else
    {
        visible = true
        varWrite("visible",true)
    }
    
    if not bparts_done_ready
    {
        varWrite("visible",false)
        visible = false
    }
}

//printf("::: gravatar x ="+string(x)+", y ="+string(y)+", visible="+string(visible))

//INHERITED EVENT, OF COURSE
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync prop with active_weapon_sprite and arm_pose

if room = rm_menu or room = rm_lobby or room = rm_login
{
    varWrite("arm_animation_speed",0)
    varWrite("arm_animation_index",0)
    sync_poses_and_animations()
}

if real(varRead("prop0")) &gt; 0 and room = rm_menu or room = rm_lobby or room = rm_login
{
    varWrite("active_weapon_sprite",varRead("prop0"))
    
    switch real(varRead("prop0"))
    {
        case spr_prop_none:
            varWrite("arm_pose",global.pistol_pose)
            varWrite("active_weapon_prescaler",global.pistol_scale)
        break
        
        case spr_prop:
            varWrite("arm_pose",global.pistol_pose)
            varWrite("active_weapon_prescaler",global.pistol_scale)
        break
        
        case spr_pistol:
            varWrite("arm_pose",global.pistol_pose)
            varWrite("active_weapon_prescaler",global.pistol_scale)
        break
        
        case spr_rifle:
            varWrite("arm_pose",global.rifle_pose)
            varWrite("active_weapon_prescaler",global.rifle_scale)
        break
        
        case spr_torque:
            varWrite("arm_pose",global.torque_pose)
            varWrite("active_weapon_prescaler",global.torque_scale)
        break
        
        case spr_shotgun:
            varWrite("arm_pose",global.shotgun_pose)
            varWrite("active_weapon_prescaler",global.shotgun_scale)
        break
        
        case spr_frag:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_flame:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.flame_scale)
        break
        
        case spr_snare:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.snare_scale)
        break
        
        case spr_smoke:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_flashbang:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_ink:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_sticky:
            varWrite("arm_pose",global.nade_pose)
            varWrite("active_weapon_prescaler",global.nade_scale)
        break
        
        case spr_longshot:
            varWrite("arm_pose",global.longshot_pose)
            varWrite("active_weapon_prescaler",global.longshot_scale)
        break
    
        case spr_smg:
            varWrite("arm_pose",global.smg_pose)
            varWrite("active_weapon_prescaler",global.smg_scale)
        break
        
        case spr_lmg:
            varWrite("arm_pose",global.lmg_pose)
            varWrite("active_weapon_prescaler",global.lmg_scale)
        break

        case spr_vulcan:
            varWrite("arm_pose",global.vulcan_pose)
            varWrite("active_weapon_prescaler",global.vulcan_scale)
        break    
        
        case spr_boom:
            varWrite("arm_pose",global.boom_pose)
            varWrite("active_weapon_prescaler",global.boom_scale)
        break
        
        case spr_rocket:
            varWrite("arm_pose",global.rocket_pose)
            varWrite("active_weapon_prescaler",global.rocket_scale)
        break  
        
        case spr_double:
            varWrite("arm_pose",global.double_pose)
            varWrite("active_weapon_prescaler",global.double_scale)
        break  
        
        case spr_stomper:
            varWrite("arm_pose",global.stomper_pose)
            varWrite("active_weapon_prescaler",global.stomper_scale)
        break  
        
        case spr_boltok:
            varWrite("arm_pose",global.boltok_pose)
            varWrite("active_weapon_prescaler",global.boltok_scale)
        break   
        
        case spr_tickler:
            varWrite("arm_pose",global.tickler_pose)
            varWrite("active_weapon_prescaler",global.tickler_scale)
        break 
        
        case spr_thumper:
            varWrite("arm_pose",global.thumper_pose)
            varWrite("active_weapon_prescaler",global.thumper_scale)
        break 
        
        case spr_carbine:
            varWrite("arm_pose",global.carbine_pose)
            varWrite("active_weapon_prescaler",global.carbine_scale)
        break 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy login gravatars
if room = rm_login and id != net_manager.stat_gravatar
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go invisible if in a match
event_inherited()

if in_match()
{
    visible = false
    varWrite("visible",false)
}
else
{
    gravatar_wipe(id)
    visible = true
    varWrite("visible",true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
    
if net_manager.show_cout
{

    draw_text(x,y-230,"uniqueId: "+string(varRead("uniqueId")))
    draw_text(x,y-200,string(varRead("pName"))+" ["+string(varRead("pNum"))+"]")
    if net_manager.show_cout or room = rm_lobby and rtime() &lt; 30*3
        printf("::: GRAVATAR "+string(varRead("pName"))+": uniqueId = "+string(varRead("uniqueId"))+", pNum = "+string(varRead("pNum"))+", x="+string(x)+", y="+string(y))
}

if room = rm_login
{
    var wplat = 72
    var val_min = 16
    var val_max = 90
    var val_step = (val_max-val_min)/5
    
    for (var i=5; i&gt;1; i--)
    {
        platcolors[i] = web_hsv(0,0,8)
        plattopcolors[i] = web_hsv(0,0,max(0,val_max-i*val_step))
    }
    platcolors[1] = web_hsv(46,10,17)
    plattopcolors[1] = web_hsv(46,85,100)
    
    var pnum = varRead("pNum")
    pnum = constrict(pnum,1,getLength(platcolors)-1)
    var platcolor = platcolors[pnum]
    var plattopcolor = plattopcolors[pnum]
    
    var drawy = y+64*3.35*varRead("animation_scale")/3
    draw_rectangle_colour(x-wplat/2,drawy,x+wplat/2,room_height+5,plattopcolor,plattopcolor,platcolor,platcolor,false)
    draw_set_font(fnt_pstats)
    draw_set_color(c_white)
    draw_text(x,drawy+32,global_rank_2str(pnum))
    
}

if not in_match()
{
    event_inherited()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,31</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
