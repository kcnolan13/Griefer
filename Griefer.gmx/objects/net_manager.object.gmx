<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite398</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialization
serverURL = "http://www.puddlesquid.com:8080"
show_debug_stats = true
show_debug_overlay(show_debug_stats)
draw_set_swf_aa_level(1)
draw_enable_swf_aa(true)
setGppDebug(0)
display_set_gui_size(WVIEW,HVIEW)

draw_you_killed_max = room_speed
draw_you_killed = false
name_you_killed = ""
new_user = false
drawing_grid_dir = 0

violence_2end = false

load_room_start = false
create_random_users = false

random_seed = 210//164
login_when_ready = false
view_adjust_delay = 0
drawing_grav_popup = false
current_time_offset = 0

real_time_init()
physics_going = true
sort_worthy = false
default_winner = ""
match_collapsed = false
collapsed_pname = ""
collapsed_numplayers = 0
collapsed_pluralize = 0
everyone_quit = false

draw_prank_centered = false

show_grid_counter_needed = 0
show_grid_counter = 0
show_grid = NO_HANDLE
drew_armory_grid = false

//voting
votes1 = 0
votes2 = 0
votes3 = 0

force_sync_countdown = 0

keepalive_timeout = room_speed*3
keepalive_timer = 15

master_scale = 1
match_scale = 0.9

lobby_match_countdown = false
lobby_match_countdown_time = 10*30

seed = 30

xp_before = 0
rank_before = 0
party_leader = false
in_party = false
stat_gravatar = NO_HANDLE
rag_target = NO_HANDLE
view_overscaler_target = 0
view_overscaler_dead = 0.45
draw_killed_by = false

force_recompute_scores = false

full_screen = false
global.rank_colors = 0
global.rank_names = 0

lotto_delay = 50
lotto_counter = 0

show_cout = false
cout_str = ""
cout_maxchars = 2000

tdm_kill_limit = 3//20
ffa_kill_limit = 15
versus_kill_limit = 10
kill_limit = 10

ffa_player_limit = 4
tdm_player_limit = 4
versus_player_limit = 2

//dummy_vars
map_previous = "Null"
play_left = room_width*1.75/5
play_top = room_height*1/2
hide_spawn_text = false
winner = noone
bot_focus_counter = 0
bot_focus = noone
bot_override = false
drawing_cache_popup = false

for (var i=0; i&lt;NUM_LIMBS; i++)
{
    grid_lalphs[i] = 0
}
grid_lalph_inc = 0.1


printf("instance_exists(-10) = "+string(instance_exists(-10)))

initGrieferClient(serverURL)
printf("CONNECTION ESTABLISHED")

//login screen
title_scale = 1
title_scale_max = 1.25
title_scale_min = 1
title_text_timer = 0

//server timeout
server_found = true

//connection testing
show_connection = false
packets_to_send = 1200
ppf_starting = 180
packets_per_frame = ppf_starting
packets_sent = 0
packets_received = 0
frames_elapsed = 0
lossless_resolution = 10
test_complete_counter = 0
intertest_delay = 30

//transmission rates
show_trans_rate = false
trans_rate = 0
transmissions = 0
trans_period = 15 //frames
trans_frames = 0
use_nth_frame = true
rec_rate = 0
receptions = 0

//nonsense vars
disabled = false
starting_match = false
armor_ysep = 10
hide_avatars = false
border = 0
dat_team_do = 0

//create all cursors
for (i=cursor_placeholder1+1; i&lt;cursor_placeholder2; i++)
{
    ID = instance_create(0,0,i)
}

steal_mode = GEAR_CLONE
steal_verb = "Stealing"
clone_verb = "Cloning"

toggles_xoff = room_width/2
toggles_yoff = 72
toggles_vsep = sprite_get_height(spr_toggle)+10

tg_blood = instance_create(x,y,toggle_button_generic)
tg_blood.active = true
tg_blood.label = "Blood"
tg_blood.xoff = toggles_xoff
tg_blood.yoff = toggles_yoff

tg_effects = instance_create(x,y,toggle_button_generic)
tg_effects.active = true
tg_effects.label = "Effects"
tg_effects.xoff = toggles_xoff
tg_effects.yoff = toggles_yoff+toggles_vsep*1

player_limit = 4
you_win = false
your_kills = 0
team_kills = 0
winner = noone
tied_bot_match = false

audio_listener_position(0,0,0)

//create sortable player grids. to be used like ---&gt;  kills, avatar_obj
team_all = ds_grid_create(3,instance_number(avatar))
team0 = ds_grid_create(3,floor(instance_number(avatar)/2))
team1 = ds_grid_create(3,ceil(instance_number(avatar)/2))
previous_room = room
disable_scores = false

global.action_word_color = c_white
more_global_constants()

av_popup = noone
av_xbd = 36
av_ybd = 48

//META GAME
alarm[4] = 30*5
lottery_time = 6*30
lottery_calc_time = 3*30
steal_time = 5*30
steal_calc_time = 3*30
mode_total = lottery_time+steal_time
lotto_comein_offset = 15
slot_scale_deciding = 1
slot_scale_decided = 1.5
slot_scale_init = 0.5
lotto_slot_scale[0] = slot_scale_init
lotto_slot_scale[1] = slot_scale_init
lotto_slot_scale[2] = slot_scale_init
steal_slot_scale = slot_scale_init
purge_pending = false

slot_lerp_real = 0.1

computed_winloss = false

bpart_transacted = noone
bpart_lotto[0] = noone
bpart_lotto[1] = noone
bpart_lotto[2] = noone

mode_counter = 0

came_from_match = false
draw_edge_padding = 8
lobby_wait_time = 45*30
lock_armory = false
num_players = 1
saving_armor = 0
saving_armor_max = 2*30
saving_armor_reboot = false
show_avatar = false
local_dollsync = false
global.bg_color = c_white
lobby_dude_y = room_height*3.25/5+32+42
av_padding = room_width/6
av_scale_lobby = 2.2
av_scale_menu = 3
av_scale_higlighted = 3.3
av_scale_highlighted_normal = 3.3
av_scale_play = 2.6
col_new = c_white
col_stolen = make_color_rgb(255,125,125)
col_challenge = make_color_rgb(125,125,255)

txt_new = "NEW"
txt_stolen = "NEW"

menu_mode = "armory"
armor_modified = false
init_global_bparts()

dude_x = room_width/2
dude_y = room_height/2
my_doll = noone

armory_label_alpha = 0.5

avatar_winners = ds_list_create()
avatar_losers = ds_list_create()

armory_alphas[0] = 0
armory_alphas[1] = 0
armory_alphas[2] = 0
armory_alphas[3] = 0
armory_alphas[4] = 0
armory_alphas[5] = 0
armory_alphas[6] = 0
armory_alphas[7] = 0
armory_alphas[8] = 0

armory_disabled[0] = 0
armory_disabled[1] = 0
armory_disabled[2] = 0
armory_disabled[3] = 0
armory_disabled[4] = 0
armory_disabled[5] = 0
armory_disabled[6] = 0
armory_disabled[7] = 0
armory_disabled[8] = 0

armory_lists = ds_list_create()
armory_lists[| 0] = global.helmets
armory_lists[| 1] = global.torsos
armory_lists[| 2] = global.legs
armory_lists[| 3] = global.shins
armory_lists[| 4] = global.hats
armory_lists[| 5] = global.shoulders
armory_lists[| 6] = global.forearms
armory_lists[| 7] = global.feet
armory_lists[| 8] = global.props

armory_xoff = 72*3+16             //how far from dude x to slot x
armory_yoff = 2*72           //how far above dude y to start for first slot
armory_ysep = 16             //vertical sep between slots
armory_sl = 72
grid_left = 0
grid_right = 0
grid_top = 0
grid_bottom = 0

props_xoff = -armory_sl/2
props_yoff = 64*4.4

cache_center = room_width/2
cache_speed = 12
cache_y = 72+64
cache_slots = 14
cache_length = cache_slots*(armory_ysep+armory_sl)
cache_xoffset = 0
cache_mouse_tol_inside = 2*(armory_sl+armory_ysep)
cache_mouse_tol_outside = 1*(armory_sl+armory_ysep)

//give him some stuff to start with in the cache
/*for (var i=0; i&lt;5; i++)
{
    instantiate_bpart(floor(random_range(spr_armor_placeholder1+1,spr_armor_placeholder2-0.1)),"Lottery",global.cache)
}*/
/*for (var i=spr_armor_placeholder1+1; i&lt;spr_armor_placeholder1+10; i++)
{
    instantiate_bpart(i,"Debug",global.cache)
}*/

/*for (var i=spr_weapon_placeholder1+1; i&lt;spr_weapon_placeholder2; i++)
{
    instantiate_bpart(i,"Debug",global.cache)
}*/

/*for (var i=0; i&lt;3; i++)
{
    instantiate_bpart(spr_hat2,"debug",global.cache)
}*/

//END META GAME

instance_create(x,y,cursor)
instance_create(x,y,hit_indicator)
instance_create(x,y,fx)
instance_create(x,y,popup_drawer)
instance_create(x,y,accolade_manager)
instance_create(x,y,challenge_manager)
instance_create(x,y,stat_manager)
instance_create(x,y,kill_feed)
instance_create(x,y,chat_feed)


netvars = ds_map_create()
varWrite("pName","player")

varWrite("next_map",0)
varWrite("lost_gear",false)
varWrite("lost_gear_sprite",false)
varWrite("lost_gear_source","")
varWrite("transacted_player","")
varWrite("stole_gear",false)
varWrite("stole_gear_sprite",false)
varWrite("stole_gear_source","")
varWrite("winning_pName","")
varWrite("match_flag",FL_NEUTRAL)
varWrite("versus_players_online",2)
varWrite("ffa_players_online",3)
varWrite("tdm_players_online",4)
varWrite("bot_versus_players_online",5)
varWrite("players_online",14)
varWrite("everyone_quit",false)
var cdiv = 3
varWrite("versus_color",make_color_rgb(255/cdiv,200/cdiv,200/cdiv))
varWrite("ffa_color",make_color_rgb(200/cdiv,200/cdiv,255/cdiv))
varWrite("tdm_color",make_color_rgb(200/cdiv,255/cdiv,200/cdiv))
varWrite("bot_versus_color",make_color_rgb(255/cdiv,200/cdiv,255/cdiv))
varWrite("bot_ffa_color",make_color_rgb(200/cdiv,255/cdiv,255/cdiv))
varWrite("bot_tdm_color",make_color_rgb(230/cdiv,255/cdiv,230/cdiv))


//bparts
bparts_all_init()
for (var i=0; i&lt;NUM_BPARTS; i++)
{
    bparts_ready[i] = false
}

debug_autoplay = false

show_scores = 0

starting_match = 0
starting_match_delay = 12*30

hide_spawn_text = false

spawn_fail_message = ""



//make room updates available succinctly
varWrite("tdm_lobby","rm_tdm_lobby")
varWrite("ffa_lobby","rm_ffa_lobby")
varWrite("versus_lobby","rm_versus_lobby")
varWrite("rm_map1",rm_map2)
varWrite("game_mode","no_mode")
varWrite("uniqueId","-1")
varWrite("end_match_coming",false)
varWrite("using_teams",false)
varWrite("lobby_wait_time",45)

griefer_url = 'http://www.puddlesquid.com/games/griefer/';

local_player = NO_HANDLE
room_counter = 0


//stuff that should be reset when you enter a match
respawn_counter = 0
respawn_delay = 30*3
match_countdown = -99
match_countdown_max = 30*10
gear_lost = false

p1Stats = ds_map_create()
p2Stats = ds_map_create()
p3Stats = ds_map_create()
p4Stats = ds_map_create()
p5Stats = ds_map_create()
p6Stats = ds_map_create()

num_players = 1
team = -1
bot_match = false
win_countdown = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create the xp bar
instance_create(x,y,xp_bar)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>180</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>8</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free net vars
if ds_exists(netvars,ds_type_map)
    ds_map_destroy(netvars)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create_random_users
if create_random_users
{
    if room = rm_login
    {
    
        var pname = generate_name(0.01)
        var pword = "abc123"
        
        net_manager.uname.text = pname
        net_manager.pword.text = pword
        
        authenticate(pname,pword)
        
        objVarWrite(net_manager,"pName",pname)
        instance_create(x,y,processing)
    
    }
    else
    {
        griefer_restart()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///login as kyle
logIn("kyle")
room_goto(rm_menu)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///max room speed
room_speed = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///populate team data structures
populate_team_data_structures()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///purge hats
purge_and_regenerate_hats()
purge_pending = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///test bparts knowledge base

//printf("Checking Knowledge Base Integrity...")


//no longer performing integrity checks
bparts_map_corrupted = false
return


bparts_map_corrupted = false

for (var i=0; i&lt;array_height_2d(global.knowledge_base); i++)
{
    if (array_length_2d(global.knowledge_base,i) &lt; global.BPARTS_NUM_STORED) or string(global.knowledge_base[i,global.BPART_NAME]) = "-1"
    {
        if (i &lt; spr_armor_placeholder2 or i &gt; spr_weapon_placeholder1)
        {
            //clear out the knowledge base and reimport
            bparts_map_corrupted = true
            printf("Checking Knowledge Base Integrity...")
            printf("----CORRUPTION FOUND: ")
            var str = "sprite #"+string(i)+": "
            for (var j=0; j&lt;array_length_2d(global.knowledge_base,i); j++)
            {
                str += global.knowledge_base[i,j]+", "
            }
            printf(str)
            break
        }
    }
}

if bparts_map_corrupted
{
    print_knowledge_base()
    printf("CLEARING KNOWLEDGE BASE")
    clear_knowledge_base()
    print_knowledge_base()
    printf("REPOPULATING KNOWLEDGE BASE")
    populate_bpart_knowledge_base()
    print_knowledge_base()
    bparts_map_corrupted = false
}
else
{
    if DEBUG
        printf("knowledge base intact")
}

alarm[4] = 30*5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync avatar stuff
sync_my_doll()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sync avatar stuff
sync_my_doll()
save_armory()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///goto menu
room_goto(rm_menu)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///synchronize match and player settings

num_players = instance_number(player)

if varRead("game_mode") = "bot_tdm"
{
    varWrite("game_mode","tdm")
    bot_match = true
}

if varRead("game_mode") = "bot_ffa"
{
    varWrite("game_mode","ffa")
    bot_match = true
}

if varRead("game_mode") = "bot_versus"
{
    varWrite("game_mode","versus")
    bot_match = true
}
    

if varRead("game_mode") = "tdm"
{
    respawn_delay = 30*5
    varWrite("using_teams",true)
    kill_limit = tdm_kill_limit
    if objVarRead(local_player,"pNum") &gt;= ceil(num_players/2)
        team = 1
    else
        team = 0
    
        //assign player image blends
        for (i=0; i&lt;instance_number(player); i++)
        {
            ID = instance_find(player,i)
            datTeam = get_team(ID)
            /*if datTeam = 1
                objVarWrite(ID,"image_blend",c_blue)
            else if datTeam = 0
                objVarWrite(ID,"image_blend",c_red)*/
            
            draw_set_color(c_white)
        }
        
}
else if varRead("game_mode") = "ffa"
    kill_limit = ffa_kill_limit
else if varRead("game_mode") = "versus"
{
    kill_limit = versus_kill_limit
    player_limit = 2
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view zooming
if room_counter &lt; 30*15 and nth_frame(10) and instance_exists(local_player)
{
    objVarWrite(local_player,"bot",bot_override)  
    //printf("ERROR (not): writing local_player.bot to "+string(bot_override))
}

if view_adjust_delay
    view_adjust_delay --


do_zoom = false
draw_killed_by = false

//match starting or ending
if match_starting() or match_ending() and not instance_exists(modal_controls) and not view_adjust_delay
{
    do_zoom = true
    view_lerp_real = 0.06
    view_xtarget = room_width/2
    view_ytarget = room_height/2
    
    if room_counter &lt; 7.5*30
    {
        view_overscaler = 1.65
    }
    else
    { 
        if instance_exists(local_player) and objVarRead(local_player,"visible") and objVarRead(local_player,"alive")
        {
            view_xtarget = lerp_real(view_xview+view_wview/2,local_player.x,view_lerp_real) //objVarRead(local_player,"myX")
            view_ytarget = lerp_real(view_yview+view_hview/2,local_player.y,view_lerp_real) //objVarRead(local_player,"myY")
            //printf("targeting local_player: "+objVarRead(local_player,"pName")+": @ ("+view_xtarget+", "+view_ytarget+")")
        }
        else
        {
            view_xtarget = lerp_real(view_xview+view_wview/2,room_width/2,view_lerp_real)
            view_ytarget = lerp_real(view_yview+view_hview/2,room_height/2,view_lerp_real)
        }
        
        if room_counter &lt; 10.5*30 and instance_exists(local_player) and objVarRead(local_player,"visible")
        {
            view_overscaler = 0.55
        }
        else
        {
            if match_ending()
                view_overscaler = 1.15
            else
                view_overscaler = 1
        }
    }
}
//local player is bot
else if (instance_exists(local_player) and is_bot(local_player)) and not view_adjust_delay
{
    do_zoom = true
    if bot_focus_counter
        bot_focus_counter -= real_speed(1)
        
    if bot_focus_counter &lt; 1
        bot_focus_counter = 0
        
    view_lerp_real = 0.06
    
    if bot_focus_counter and instance_exists(bot_focus)
    {
        view_overscaler = 0.85
        view_xtarget = lerp_real(view_xview+view_wview/2,bot_focus.x,view_lerp_real)
        view_ytarget = lerp_real(view_yview+view_hview/2,bot_focus.y,view_lerp_real)
        if not objVarRead(bot_focus,"alive")
        {
            bot_focus_counter = 0
        }
    }
    else
    {
        view_overscaler = 2
        view_xtarget = lerp_real(view_xview+view_wview/2,room_width/2,view_lerp_real)
        view_ytarget = lerp_real(view_yview+view_hview/2,room_height/2,view_lerp_real)
        if random(1) &lt; 1/(2*30)
        {
            var target_ind = floor(random_range(0,instance_number(player)+0.99))
            bot_focus = instance_find(player,target_ind)
            
            if not instance_exists(bot_focus)
                bot_focus = noone
            else
            {
                printf("ERROR (not): focusing on new bot")
                bot_focus_counter = random_range(4*30,6*30)
            }
        }
    }
}
//YOU HAVE BEEN KILLED
else if instance_exists(local_player) and not objVarRead(local_player,"alive") and instance_exists(rag_target) and not view_adjust_delay
{
    draw_killed_by = true
    do_zoom = true
    view_lerp_real = 0.25
    view_overscaler = lerp_real(view_overscaler,view_overscaler_target,0.05)
    view_xtarget = lerp_real(view_xview+view_wview/2,rag_target.x,view_lerp_real)
    view_ytarget = lerp_real(view_yview+view_hview/2,rag_target.y,view_lerp_real)
}

//view zooming
if do_zoom and not view_adjust_delay
{
    view_hwidth = 1365*view_overscaler*VIEW_SCALE
    
    if view_hwidth &gt; room_width
        view_hwidth = room_width
        
    view_vwidth = (9/16)*view_hwidth
    
    if view_vwidth &gt; room_height
    {
        view_vwidth = room_height
        view_hwidth = 16/9*view_vwidth
    }
    
    view_wview = ceil(lerp_real(view_wview,view_hwidth,view_lerp_real))
    view_hview = ceil(lerp_real(view_hview,view_vwidth,view_lerp_real))
    
    if instance_exists(modal_controls) and in_match()
    {
        view_wview = 1365
        view_hview = 9/16*1365
    }
    
    view_xview = view_xtarget - view_wview/2//lerp_real(view_xview, view_xtarget - view_wview/2,view_lerp_real)
    view_yview = view_ytarget - view_hview/2//lerp_real(view_xview, view_ytarget - view_hview/2,view_lerp_real)
    
    keep_view_in_bounds()
}

    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fill with random gear if you want
if keyboard_check(vk_control) and keyboard_check(vk_alt) and keyboard_check(vk_backspace)
{
   fill_with_random_gear()
}

if keyboard_check(vk_control) and keyboard_check(vk_alt) and keyboard_check(vk_end)
{
   delete_invisible_gear()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///whateva

drew_armory_grid = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///keepalive and force sync and full_screen sync and draw_you_killed

if draw_you_killed
{
    draw_you_killed = sub_real(draw_you_killed,1)
    if not draw_you_killed
        name_you_killed = ""
}

var fs = truthval(global.gc[GC_FULLSCREEN,1])
if full_screen != fs
{
    full_screen = fs
    window_set_fullscreen(full_screen)
}

if force_sync_countdown
{
    force_sync_countdown --
    if not force_sync_countdown
    {
        sync_my_doll()
        sendMessageReal("force_sync_doll",1)
    }
}

if keepalive_timer
{
    keepalive_timer --
    if not keepalive_timer
    {
        //printf("::: checking keepalive")
        if isAlive() = 1
        {
            //printf(":::IS ALIVE")
            keepalive_timer = keepalive_timeout
            server_found = true
            keepAlive()
        }
        else
        {
            printf("::: KEEPALIVE TIMEOUT")
            server_found = false
        }
        //printf("::: checked keepalive")
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust physics speed to match frame rate...?
if in_match()
{
    physics_world_gravity(0,real_speed(global.phys_world_grav))
    //physics_world_update_speed(max(global.phys_world_spd,real_speed(global.phys_world_spd)))

    if nth_frame(15)
    {
        if physics_going and not truthval(global.gc[GC_RAGDOLLS,1])
        {
            physics_pause_enable(true)
            net_manager.physics_going = false
        }
        else if not physics_going and truthval(global.gc[GC_RAGDOLLS,1])
        {
            physics_pause_enable(false)
            net_manager.physics_going = true
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///testing

if nth_frame(15)
{
    //rag_rain_limbs(floor(random_range(1,2.99)))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deactivate rampant cursors
active_cursors = 0

for (var i=0; i&lt;instance_number(cursor_generic); i++)
{
    ID = instance_find(cursor_generic,i)
    if ID.active
    active_cursors++
}

if active_cursors &gt; 1
{
    printf(":::deactivating duplicate cursors")
    cursor_generic.active = false
}

if instance_exists(NO_HANDLE)
    printf("ERROR: NO_HANDLE DOES EXIST!!!\n\n")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lobby networking and game mode stuff
if room = rm_lobby and instance_exists(my_doll) 
{
    if varRead("lobby_wait_time") &lt;= lobby_match_countdown_time
    {
        lobby_match_countdown = true
    }
    else
    {
        //override whatever the lobby_wait_time thinks it is if you got a lock_armory
        if lock_armory
        {
            varWrite("lobby_wait_time",lobby_match_countdown_time)
        }
        
        if objVarRead(my_doll,"pNum") = global.lowest_pnum and nth_frame(15)
        {
            if SUPER_DEBUG
                printf("sending lobby wait time")
            //send lobby wait time to everyone else @ 1 Hz if you are player 0
            obj_sendval_real(id,"lobby_wait_time",varRead("lobby_wait_time"),FL_NORMAL)
        }
    }
}
else 
{
    lobby_match_countdown = false
}

if not bot_match and is_string(varRead("game_mode")) 
{
    if string_count("bot",varRead("game_mode"))
    {
        printf("ENTERING A BOT MATCH")
        bot_match = true
        
        if string_count("versus",varRead("game_mode"))
            player_limit = 2
        else
            player_limit = 4
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>meta</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///META STUFF and avatar lerping
if drawing_grav_popup   
    drawing_grav_popup --
    
if login_when_ready
{
    if not instance_exists(modal_splat)
    {
        login_when_ready = false
        logIn(objVarRead(net_manager,"pName"))
        printf("::: LOGGING IN")
        room_goto(rm_menu)
    }
}
    
av_popup = noone

if room = rm_menu
    av_scale_highlighted = av_scale_highlighted_normal*(av_scale_menu/av_scale_lobby)
else
    av_scale_highlighted = av_scale_highlighted_normal

if room = rm_menu and came_from_match
    boot_loitering_avatars()
    
if room = rm_menu and instance_exists(my_doll) and instance_exists(stat_gravatar)
{
    var datObj = my_doll
    if menmode() = "stats"
        datObj = stat_gravatar
        
    var curscale = objVarRead(datObj,"animation_scale")
        
        //avatar popups and scale lerp_realing
        if av_popup != noone or menmode() = "armory" or menmode() = "stats" or not collision_rectangle(datObj.x-curscale*av_xbd, datObj.y-curscale*av_ybd, datObj.x+curscale*av_xbd, datObj.y+curscale*av_ybd, cursor, false, false)
        {
            datObj.hover_counter = 0
            if menu_mode != "armory"
                objVarWrite(datObj,"animation_scale",lerp_real(objVarRead(datObj,"animation_scale"),av_scale_play,0.5))
            else
                objVarWrite(datObj,"animation_scale",lerp_real(objVarRead(datObj,"animation_scale"),av_scale_menu,0.5))
        }
        else
        {
            datObj.hover_counter++
            
            av_popup = datObj
            
            if menmode() != "armory"
                av_scale_highlighted = av_scale_highlighted_normal*(av_scale_play/av_scale_menu)
            else av_scale_highlighted = av_scale_highlighted_normal
            
            objVarWrite(datObj,"animation_scale",lerp_real(objVarRead(datObj,"animation_scale"),av_scale_menu*av_scale_highlighted/av_scale_menu,0.5))
        }
}

if room = rm_lobby
{
    if mode_counter
    {
        mode_counter -= real_speed(1)
        
        if mode_counter &lt; 1
            mode_counter = 0
            
        if not mode_counter
        {
            /*with bn_play event_perform(ev_mouse,ev_left_press)
            menu_mode = "lobby"
            hide_avatars = false*/
        }
    }

    num_players = instance_number(avatar)
    av_padding = room_width/instance_number(avatar)
    
    for (var i=0; i&lt;num_players+1; i++)
    {
        if i = num_players
        {
            if menmode() != "stats" continue
            
            ID = stat_gravatar
            if not instance_exists(stat_gravatar)
            {
                printf("ERROR: no stat gravatar to be found")
                continue
            }
            //else if objVarRead(ID,"pName") = objVarRead(my_doll,"pName")
              //  ID = my_doll
        }
        else ID = instance_find(avatar,i)
        
        var curscale = objVarRead(ID,"animation_scale")
        
        //avatar popups and scale lerp_realing
        if av_popup != noone or menmode() = "armory" or menmode() = "stats" or not collision_rectangle(ID.x-curscale*av_xbd, ID.y-curscale*av_ybd, ID.x+curscale*av_xbd, ID.y+curscale*av_ybd, cursor, false, false)
        {
            ID.hover_counter = 0
    
            if menu_mode != "armory" or not is_my_avatar(ID)
                objVarWrite(ID,"animation_scale",lerp_real(objVarRead(ID,"animation_scale"),av_scale_lobby,0.5))
            else
                objVarWrite(ID,"animation_scale",lerp_real(objVarRead(ID,"animation_scale"),av_scale_menu,0.5))
        }
        else
        {
            ID.hover_counter++
            av_popup = ID
                
            var targ = av_scale_lobby
            if menu_mode = "armory"
                targ = av_scale_menu
            
            objVarWrite(ID,"animation_scale",lerp_real(objVarRead(ID,"animation_scale"),targ*av_scale_highlighted/av_scale_menu,0.5))
        }
        
        switch (menu_mode)
        {
            case "lobby":
                objVarWrite(ID,"dude_y",lobby_dude_y)
                var pnum = objVarRead(ID,"pNum")
                var xtarget = room_width/2
                var dat_sign = 1
                
                if pnum &lt; instance_number(avatar)/2
                    dat_sign = -1
                
                if instance_number(avatar) &lt; 3
                {
                    xtarget = room_width/2+(64*6.25)*dat_sign
                } else
                {
                    if dat_sign = 1
                        pnum -= 2
                        
                    var avpad = 64*4
                    xtarget = room_width/2+(64*2.5+avpad*(pnum+0.5))*dat_sign
                }
                
                objVarWrite(ID,"dude_x",xtarget)
            break
            
            case "armory":
                if is_my_avatar(ID)
                {
                    dude_x = room_width/2
                    dude_y = room_height*1.75/3-64
                    objVarWrite(ID,"dude_x",room_width/2)
                    objVarWrite(ID,"dude_y",room_height*1.75/3-64)
                }
                else
                {
                    objVarWrite(ID,"dude_y",lobby_dude_y)
                    if ID.x &lt; room_width/2
                        objVarWrite(ID,"dude_x",-64*8)
                    else
                        objVarWrite(ID,"dude_x",room_width+64*8)
                }
            break
            
            case "challenges":
                if is_my_avatar(ID)
                {
                    objVarWrite(ID,"dude_y",room_height*1.75/3-64)
                    objVarWrite(ID,"dude_x",room_width*1/9)
                }
                else
                {
                    objVarWrite(ID,"dude_y",lobby_dude_y)
                    if ID.x &lt; room_width/2
                        objVarWrite(ID,"dude_x",-64*8)
                    else
                        objVarWrite(ID,"dude_x",room_width+64*8)
                }
            break
            
            case "stats":
                if ID = stat_gravatar //or i=num_players
                {
                    objVarWrite(ID,"dude_y",room_height*1.75/3-32)
                    objVarWrite(ID,"dude_x",room_width*1/9)
                }
                else
                {
                    objVarWrite(ID,"dude_y",lobby_dude_y)
                    if ID.x &lt; room_width/2
                        objVarWrite(ID,"dude_x",-64*8)
                    else
                        objVarWrite(ID,"dude_x",room_width+64*8)
                }
            break
            
            case "lottery_steal":
                if not is_my_avatar(ID)
                    objVarWrite(ID,"dude_y",0-64*10)
                else
                {
                    objVarWrite(ID,"dude_y",room_height*2/3-32)
                    objVarWrite(ID,"dude_x",room_width*1/8)
                }
            break
            
            default:
                objVarWrite(ID,"dude_y",lobby_dude_y)
                if ID.x &lt; room_width/2
                    objVarWrite(ID,"dude_x",-64*8)
                else
                    objVarWrite(ID,"dude_x",room_width+64*8)
            break
        }
    }
    
    if varRead("lobby_wait_time") &gt; 0
    {
        varSub("lobby_wait_time",real_speed(1))
    }
    else
    {
        varWrite("lobby_wait_time",0)
    }
}

if room = rm_menu or room = rm_lobby
{
    //if instance_exists(my_doll) and room = rm_menu
        //objVarWrite(my_doll,"animation_scale",av_scale_menu)
        
    if saving_armor
    {
        saving_armor = sub_real(saving_armor,1)
        if not saving_armor and saving_armor_reboot
        {
            griefer_restart()
        }
    }
        

    if armor_modified and menu_mode != "armory"
    {
        save_armory()
    }

    if (bparts_all_ready() and string_length(varRead("helmet0")) &gt; 4)
    {
        printf("ERROR: body parts may have been overwritten with db values again.")
        printf("EXTRACTING AGAIN...")
        for (var i=0; i&lt;10; i++)
        {
            bparts_ready[i] = bparts_get_ready(i)
        }
    }

    if room = rm_menu
    switch (menu_mode)
    {
        case "play":
            dude_x = room_width*3.85/5
            dude_y = room_height*1.75/3-64*2
        break
        
        case "armory":
            dude_x = room_width/2
            dude_y = room_height*1.75/3-64
        break
        
        case "challenges":
            dude_x = room_width*1/9
            dude_y = room_height*1.75/3-64
        break
        
        case "stats":
            if instance_exists(stat_gravatar)
            {
                objVarWrite(stat_gravatar,"dude_x",room_width*1/9)
                objVarWrite(stat_gravatar,"dude_y",room_height*1.75/3-32)
            }
            dude_x = -9*64
            dude_y = room_height*1.75/3-64
        break
        
        case "settings":
            dude_x = -9*64
            dude_y = room_height*1.75/3-64
        break
        
        case "friends":
            dude_x = room_width*1/9
            dude_y = room_height*1.75/3-64
        break
        
        case "leaderboards":
            dude_x = -9*64
            dude_y = room_height*1.75/3-64
        break
        
        case "lottery_steal":
            //shouldn't be in this mode in the menu
            with bn_play event_perform(ev_mouse,ev_left_press)
            menu_mode = "play"
            mode_counter = 0
        break
    }
    
    if instance_exists(my_doll) and bparts_all_ready() and room = rm_menu
    {
        objVarWrite(my_doll,"dude_x",dude_x)
        objVarWrite(my_doll,"dude_y",dude_y)
    } else 
    {
        if SUPER_DEBUG and not room = rm_menu
            printf("NOTICE: my_doll does not exist")
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///map voting
if room = rm_lobby 
{
    if not lock_armory and not instance_exists(bn_vote) and rtime() &gt; 30*5 and varRead("next_map1") &gt;= 0 and varRead("next_map2") &gt;= 0 and varRead("next_map3") &gt;= 0
    {
        mnums[0] = varRead("next_map1")
        mnums[1] = varRead("next_map2")
        mnums[2] = varRead("next_map3")
        
        var bdelay = 0
        var binc = 10
        
        for (var i=0; i&lt;getLength(mnums); i++)
        {
            ID = instance_create(room_width/2,room_height/2+96+i*64*1.6,bn_vote)
            ID.map_num = mnums[i]
            ID.birth_delay = bdelay
            bdelay += binc
            
            //assign images
            ID.image = mapsnap_base+ID.map_num+1
            ID.image_stretch = true
            ID.header_text = string(global.map_names[map_placeholder1+1+ID.map_num])
    
            //the random one
            if i = getLength(mnums)-1
            {
                ID.is_random = true
            }
        }
    }
    else if lock_armory and instance_exists(bn_vote) and varRead("next_map") &gt;= 0
    {
        with bn_vote
        {
            if map_num != objVarRead(net_manager,"next_map")
            {
                if not fade_out
                    fade_out = true
            }
            else
            {
                is_random = false
                header_text = header_text_real
                image = image_real
                active = false
                clickable = false
                highlightable = false
                x = room_width/2
                y = lerp(y,room_height/2+96+64*0.5,0.05)
                width = lerp(width,width_init*1.5,0.05)
                height = lerp(height,height_init*1.5,0.05)
                modal_aligns()
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bparts_ready
for (var i=0; i&lt;NUM_BPARTS; i++)
{
    if not bparts_ready[i] and room != rm_login
    {
        bparts_ready[i] = bparts_get_ready(i)
        
        //if all bparts are ready, create meta bparts
        if bparts_all_ready()
        {
            //instantiate all of the bpart objects
            instantiate_all_bparts()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create menu avatars
if (room = rm_menu or room = rm_lobby) and (room_counter &gt; 30/2 and (not show_avatar or my_doll = noone) and bparts_all_ready())
{
    my_doll = find_pname_avatar(varRead("pName"))
    if my_doll != noone
    {
        printf("::: FOUND LOCAL AVATAR")
        objVarWrite(my_doll,"rank",varRead("rank"))
        objVarWrite(my_doll,"global_rank",varRead("global_rank"))
        if DEBUG
            printf("preparing local avatar...")
            
        show_avatar = true
        local_dollsync = true
        sync_my_doll()
        local_dollsync = false   
        objVarWrite(my_doll,"dude_x",dude_x)
        objVarWrite(my_doll,"dude_y",0)
        my_doll.x = dude_x
        my_doll.y = 0
        
        printf("::: creating stat gravatar")
        stat_gravatar = instance_create(0,0,gravatar)
        stat_manager.grav_name = varRead("pName")
        objVarWrite(stat_gravatar,"pName",varRead("pName"))
        objVarWrite(stat_gravatar,"uniqueId",hash_string(varRead("pName")))
        
        if new_user
        {
            printf("::: CREATING NEWUSER_BPARTS")
            scr_instantiate_newuser_bparts()
            new_user = false
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>in game</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///counters and var syncing to server
room_counter += real_speed(1)

if room = rm_lobby
{
    if string(menu_mode) = "lottery_steal"
    {
        lotto_counter++
    }
    else if lotto_counter &gt; 0
    {
        lotto_counter = 0
    }
}

if starting_match 
{
    starting_match -= real_speed(1)
    
    if starting_match &lt; 1
        starting_match = 0
    
    if starting_match and starting_match &lt; 30 and not varRead("match_started")
    {
        obj_sendval_real(id, "match_started", 1, FL_NORMAL)
        varWrite("match_started",2)
    }
    
    if varRead("match_started") = 1 and starting_match
    {
        starting_match = 30
        varWrite("match_started",2)
    }
    
    if instance_exists(local_player)
    {
        if starting_match
            objVarWrite(local_player,"controllable",false)
        else
            objVarWrite(local_player,"controllable",true)
    }
    
}

//sync xp to server every 10 seconds
if (xp_before != varRead("xp") or rank_before != varRead("rank")) and room != rm_login
{
    //printf("ERROR: net_man xp = "+string(varRead("xp")))
    stat_update_real("xp",varRead("xp"),FL_NORMAL)
    stat_update_real("rank",varRead("rank"),FL_NORMAL)
}
xp_before = varRead("xp")
rank_before = varRead("rank")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player physics, send frames, RECEIVE TRANSMISSIONS

//SEND FRAMELY PLAYER DATA
if instance_exists(myPlayer())
{
    send_frame()
}

//clear player physics updated flag
if in_match()
{
    with player
    {
        if myPlayer() != id and not is_bot(id)
        {
            varWrite("physics_updated",false)
        }
    }
}

//
//
//RECEIVE ALL TRANSMISSIONS
receive_transmissions()
//
//

//compute physics for un-updated players
if in_match()
{
    with player
    {
        if myPlayer() != id and not is_bot(id) and not varRead("physics_updated")
        {
            hsp = varRead("net_hsp_true")
            vsp = varRead("net_vsp_true")
            //printf("::: "+playerName(id)+" is simulating with net_hsp_true = "+string(hsp)+", net_vsp_true = "+string(vsp))
            scr_basic_physics()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///END MATCH CONDITION -- gear stealing and lottery and whatnot

if instance_number(player) &gt; 0 and room_counter &gt; 10*30
{
    if (match_countdown &gt; 0)
    {
        if not varRead("gearsteal_computed")
        {
            printf("::: SENDING END_MATCH_COMING")
            varWrite("end_match_coming",true)
            obj_update_real(id,"end_match_coming",FL_NORMAL)
            
            //THIS GUY (AND HIS TEAM) WON --&gt; TIME TO STEAL GEAR!!!
            if varRead("game_mode") != "tdm"
            {
                tied_bot_match = false
                perform_everyones_steal_gear()
                varWrite("winning_pName",varRead("pName"))
                obj_update_string(id,"winning_pName",FL_NORMAL)
                printf("ERROR (not): sending winning_pName: "+varRead("winning_pName"))
            }
            else if instance_exists(local_player)
            {
                if is_team_leader(local_player)
                {
                    printf("local player is TEAM LEADER. computing gear stealing for everyone.")
                    perform_everyones_steal_gear()
                    varWrite("winning_pName",varRead("pName"))
                    obj_update_string(id,"winning_pName",FL_NORMAL)
                }
            }
        }
        
        match_countdown -= real_speed(1)
        if match_countdown &lt; 1
            match_countdown = 0
        
        if (match_countdown = 0)
        {
            sendMessageReal("end_match",stat_manager.stat_flag)
            room_goto(rm_lobby)
        }
    } else if not varRead("end_match_coming") and (varRead("game_mode") != "tdm" or instance_exists(local_player) and (is_team_leader(local_player) or bot_match)) {
    
        //possibly trigger a match end based on local player's kills
        team_kills = objVarRead(local_player,"match_kills")//get_netstat_pname(varRead("pName"),"kills")
        you_win = false
        your_kills = team_kills
        winner = my_doll
        
        if bot_match
        {
            you_win = true
            for (var n=0; n&lt;instance_number(player); n++)
            {
                guy = instance_find(player,n)
                if objVarRead(guy,"bot")
                {
                    if objVarRead(guy,"match_kills") &gt; team_kills
                    {
                        team_kills = objVarRead(guy,"match_kills")
                        you_win = false
                        winner = find_pname_avatar(objVarRead(guy,"pName"))
                    }
                }
            }
        }

        //add all teammates' kills if in tdm
        if varRead("game_mode") = "tdm"
        {
            team_kills = 0
            for (i=0; i&lt;instance_number(player); i++)
            {
                ID = instance_find(player,i)
                if is_local_teammate(ID) and not objVarRead(ID,"player_quit")
                    team_kills += objVarRead(ID,"match_kills")//get_netstat_pnum(objVarRead(ID,"uniqueId"),"kills")
            }
            
            if bot_match
            {
                team0_kills = 0
                team1_kills = 0
                
                for (var n=0; n&lt;instance_number(player); n++)
                {
                    guy = instance_find(player,n)
                    if not objVarRead(guy,"player_quit")
                    {
                        if get_team(guy) = 0
                            team0_kills += objVarRead(guy,"match_kills")
                        else
                            team1_kills += objVarRead(guy,"match_kills")
                    }
                }
                
                if team0_kills &gt; team1_kills
                {
                    team_kills = team0_kills
                    if get_team(local_player) = 0
                        you_win = true
                    else
                        you_win = false
                    winner = ds_grid_get(team0,1,0)
                }
                else if team1_kills &gt; team0_kills
                {
                    team_kills = team1_kills
                    if get_team(local_player) = 1
                        you_win = true
                    else
                        you_win = false
                    winner = ds_grid_get(team1,1,0)
                }
                else 
                {
                    you_win = false
                    winner = noone
                }
            }
            
            //has everyone on the othe team quit?
            everyone_quit = true
            with player
            {
                if not varRead("player_quit") and get_team(id) != get_team(myPlayer())
                    other.everyone_quit = false
            }
            
            if everyone_quit
            {
                match_collapsed = true
                obj_sendval_real(id,"everyone_quit",true,FL_NORMAL)
                collapsed_pluralize = 0
                with player
                {
                    if varRead("player_quit")
                    {
                        other.collapsed_pluralize ++
                        if string_length(net_manager.collapsed_pname) &lt; 2
                            net_manager.collapsed_pname = capwords(playerName(id))
                        else
                            net_manager.collapsed_pname += " and "+capwords(playerName(id))
                    }
                }
                match_countdown = match_countdown_max
                var dat_team = get_team(myPlayer())
                if dat_team &gt; -1 and dat_team &lt; 2
                    default_winner = playerName(ds_grid_get(dat_team,1,0))
                else
                    default_winner = playerName(myPlayer())
            }
            
        }
        else
        {
            //ffa or versus
            
            //has everyone on the othe team quit?
            everyone_quit = true
            with player
            {
                if not varRead("player_quit") and playerName(id) != playerName(myPlayer())
                    other.everyone_quit = false
            }
            
            if everyone_quit
            {
                obj_sendval_real(id,"everyone_quit",true,FL_NORMAL)
                collapsed_pluralize = 0
                
                with player
                {
                    if varRead("player_quit")
                    {
                        other.collapsed_pluralize++
                        if string_length(net_manager.collapsed_pname) &lt; 2
                            net_manager.collapsed_pname = capwords(playerName(id))
                        else
                            net_manager.collapsed_pname += " and "+capwords(playerName(id))
                    }
                }
                
                match_countdown = match_countdown_max
                default_winner = playerName(myPlayer())
            }
        }
        
        if team_kills &gt;= kill_limit
        {
            match_countdown = match_countdown_max
            printf("::: team/player has enough kills to end match: "+string(team_kills))
            printf("::: SETTING MATCH COUNTDOWN")
        }
    }
}

if varRead("everyone_quit")
{
    varWrite("everyone_quit",false)
    
    if not everyone_quit
    {
        everyone_quit = true
        default_winner = playerName(myPlayer())
        match_collapsed = true
        collapsed_pluralize = 0
        
        with player
        {
            if varRead("player_quit")
            {
                other.collapsed_pluralize ++
                if string_length(net_manager.collapsed_pname) &lt; 2
                    net_manager.collapsed_pname = capwords(playerName(id))
                else
                    net_manager.collapsed_pname += " and "+capwords(playerName(id))
            }
        }
    }
    else
    {
        varWrite("everyone_quit",false)
    }
}

if varRead("end_match_coming") 
{
    //printf("ERROR: net_man uniqueID: "+string(varRead("uniqueId"))+", net_man winning_pName: "+string(varRead("winning_pName")))
    with player
        respawn_counter = 0
        
    came_from_match = true
    
    if not computed_winloss
        compute_winloss()
    
    if not lotto_ready
    {
        //fix any bpart_map corruption
        validate_knowledge_base_integrity()
        
        //figure out what gear you're getting
        perform_lottery()
        lotto_ready = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SCORES -- SORT, HIDE, SHOW, RECOMPUTE
if (keyboard_check_pressed(vk_tab) or (global.using_gamepad and gamepad_button_check_pressed(global.devno,gp_select))) and instance_number(player) &gt; 0 and room_counter &gt; 30
{
    //printf("hiding scores")
    show_scores ^= 1
}

if in_match() and instance_exists(modal_controls)
{
    if modal_controls.mode_index = 0
        show_scores = true
    else
        show_scores = false
}

//sort scores @ 2 Hz
//see if anything sort-worthy has happened

if varRead("force_recompute_scores")
{
    varWrite("force_recompute_scores",false)
    force_recompute_scores = true
}

for (var i=0; i&lt;instance_number(player); i++)
{
    var ID = instance_find(player,i)
    if objVarRead(ID, "match_points_previous") != objVarRead(ID,"match_points") or objVarRead(ID, "match_kills_previous") != objVarRead(ID,"match_kills") or objVarRead(ID, "match_deaths_previous") != objVarRead(ID,"match_deaths") or objVarRead(ID, "match_assists_previous") != objVarRead(ID,"match_assists")
    {
        printf(":::sortworthy!")
        sort_worthy = true
        break
    }
}

if in_match() and force_recompute_scores or (nth_frame(10) and sort_worthy and not disable_scores )
{
    sort_worthy = false
    force_recompute_scores = false
    //pull in the match kills for each avatar (which you need to sync from his player)
    for (var i=0; i&lt;instance_number(player); i++)
    {
        var pID = instance_find(player,i)
        if objVarRead(pID,"player_quit")
        {
            printf("WARNING: cannot recompute scores for "+playerName(pID)+" because player has quit")
            continue
        }
        //printf("found player (object "+pID.object_index+"): "+objVarRead(pID,"pName"))
        //printf(objVarRead(pID,"pName")+"'s match_kills = "+objVarRead(pID,"match_kills"))
        var avID = find_pname_avatar(objVarRead(pID,"pName"))
        
        if not instance_exists(avID)
        {
            printf("ERROR: sort scores couldn't find an avatar matching this pName")
            return false
        }
        else
        {
            //printf("found avatar: "+objVarRead(avID, "pName"))
        }
        
        mkills = objVarRead(pID,"match_kills")
        mpoints = objVarRead(pID,"match_points")
        mdeaths = objVarRead(pID,"match_deaths")
        masses = objVarRead(pID,"match_assists")
        avRank = objVarRead(pID,"rank")
        
        //printf("read player's stats")
        objVarWrite(avID,"match_points",mpoints)
        objVarWrite(avID,"match_kills",mkills)
        objVarWrite(avID,"match_deaths",mdeaths)
        objVarWrite(avID,"match_assists",masses)
        objVarWrite(avID,"rank",avRank)
        
        //printf("set "+objVarRead(avID,"pName")+"'s match_deaths to: "+objVarRead(avID,"match_deaths")+" --&gt; supposed to be "+mdeaths)
        //printf("set "+objVarRead(avID,"pName")+"'s match_kills to: "+objVarRead(avID,"match_kills")+" --&gt; supposed to be "+mkills)
        
        if varRead("game_mode") = "tdm"
        {
            if get_team(pID) = 0
                dat_team_do = team0
            else dat_team_do = team1
        }
        else dat_team_do = team_all
        
        //we now know what grid this player belongs on --&gt; find his avatar ID and update match kills + match points
        if ds_grid_value_disk_exists(dat_team_do,1,0,2*ds_grid_height(dat_team_do),avID)
        {
            //SET POINTS IN SCORE TABLE GRID
            av_gridy = ds_grid_value_disk_y(dat_team_do,1,0, 2*ds_grid_height(dat_team_do), avID)
            if not ds_grid_value_x(dat_team_do,2,av_gridy,2,av_gridy,mpoints)
            {
                ds_grid_set(dat_team_do,2,av_gridy,mpoints)
            }
            
            //SET KILLS IN SCORE TABLE GRID
            av_gridy = ds_grid_value_disk_y(dat_team_do,1,0, 2*ds_grid_height(dat_team_do), avID)
            if not ds_grid_value_x(dat_team_do,0,av_gridy,0,av_gridy,mkills)
            {
                ds_grid_set(dat_team_do,0,av_gridy,mkills)
            }
        }
        else 
        {
            printf("ERROR: TEAM GRID: unable to find avatar id "+string(avID)+" for player "+string(objVarRead(avID,"pName"))+" in the team grid")
            return false
        }
    }

    if not match_ending()
    {
        //sort all non-empty player grids
        if ds_grid_height(team0) &gt; 0
        {
            ds_grid_sort(team0, 2, false)
            print_ds_grid(team0)
        }
        
        if ds_grid_height(team1) &gt; 0
        {
            ds_grid_sort(team1, 2, false)
            print_ds_grid(team1)
        }
        
        if ds_grid_height(team_all) &gt; 0
        {
            ds_grid_sort(team_all, 0, false)
            print_ds_grid(team_all)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///synch up stats with player's in-game performance
varWrite("end_match_coming",0)
computed_winloss = false
previous_room = room
audio_stop_sound(snd_flashed)

show_scores = 0
saving_armor = 0
saving_armor_reboot = false

if room = rm_lobby
{
    lotto_slot_scale[0] = slot_scale_init
    lotto_slot_scale[1] = slot_scale_init
    lotto_slot_scale[2] = slot_scale_init
    steal_slot_scale = slot_scale_init
    mode_counter = 0
    varWrite("stole_gear",false)
    varWrite("lost_gear",false)
    varWrite("lost_gear_source","")
    varWrite("stole_gear_source","")
    varWrite("stole_gear_sprite",false)
    varWrite("lost_gear_sprite",false)
    varWrite("transacted_player","")
    bpart_transacted = noone
    bpart_lotto[0] = noone
    bpart_lotto[1] = noone
    bpart_lotto[2] = noone
    came_from_match = false
}

if room = rm_login
{
    load_room_start = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO LOTS OF STUFF

//30 = 60 --&gt; now do this after objects that have init based on room speed have a chance to go
alarm[7] = 2

global.xoff = 0

for (var i=0; i&lt;NUM_LIMBS; i++)
{
    grid_lalphs[i] = 0
}

init_physics()

if load_room_start
{
    load_room_start = false
    ID = popup_loading(WVIEW/2,HVIEW/2)
    ID.load_closable = false
}

if room = rm_menu
{
    bot_match = false
    if match_collapsed
    {
        popup_okay(WVIEW/2,HVIEW/2,pluralize("Rage Quitter",collapsed_pluralize), string(collapsed_pname)+" "+pluralize("has",collapsed_pluralize)+" Rage Quit. You have been awarded the win, and "+string(collapsed_pname)+" "+pluralize("has",collapsed_pluralize)+" been penalized.",scr_none)
        match_collapsed = false
        collapsed_numplayers = 0
        collapsed_pluralize = 0
        collapsed_pname = ""
        varWrite("everyone_quit",false)
    }
}
    
view_hport[0] = 768
view_wport[0] = 1365
view_hview[0] = 768
view_wview[0] = 1365

if in_match()
{
    default_winner = ""
    match_collapsed = false
    collapsed_numplayers = 0
    collapsed_pluralize = 0
    collapsed_pname = ""
    everyone_quit = false
    varWrite("everyone_quit",false)
    part_controller = instance_create(x,y,particle_controller)
    map_previous = global.map_names[room]
    disable_scores = false
    respawn_flag = FL_NORMAL
}

room_counter =0

win_popup_scale = 0.5
win_popup_scale_max = 1.5
win_popup_width = 72*3.25
win_popup_height = 72*3
win_popup_lerp_real = 0.035//25
win_color = c_white
win_popup_alpha = 0
win_popup_alpha_max = 0.75

varWrite("match_started",false)
varWrite("gearsteal_computed",false)

if room = rm_lobby
{
    varWrite("next_map", -54)
    varWrite("next_map1",-54)
    varWrite("next_map2",-54)
    varWrite("next_map3",-54)
    
    player_limit = get_player_limit(varRead("game_mode"))
    if bot_match and not came_from_match
    {
        instantiate_all_bots(get_player_limit(varRead("game_mode"))-1)
    }
    
    alarm[3] = 30*5
    //alarm[3] = floor(random_range(30*4,30*8))
    saving_armor = false
    if varRead("lobby_wait_time") &lt; 30*20
        varWrite("lobby_wait_time",lobby_wait_time)
    lock_armory = false
    menu_mode = "lobby"
    
    if came_from_match
    {
        menu_mode = "lottery_steal"
        mode_counter = lottery_time+steal_time
        hide_avatars = false //true
    }
    
    av_padding = room_width/instance_number(avatar)
    for (var i=0; i&lt;instance_number(avatar); i++)
    {
        ID = instance_find(avatar,i)
        
        if not hide_avatars
            ID.y = 0
        else
            ID.y = -64*10
            
        ID.x = av_padding*(objVarRead(ID,"pNum")+0.5)
    }
}

if room = rm_menu
{
    varWrite("stole_gear",false)
    varWrite("lost_gear",false)
    varWrite("lost_gear_source","")
    varWrite("stole_gear_source","")
    varWrite("stole_gear_sprite",false)
    varWrite("lost_gear_sprite",false)
    varWrite("transacted_player","")
    bpart_transacted = noone
    came_from_match = false
    bpart_lotto[0] = noone
    bpart_lotto[1] = noone
    bpart_lotto[2] = noone
    saving_armor = false
    lock_armory = false
    varWrite("uniqueId","-1")
    menu_mode = "play"
    varWrite("game_mode","no_mode")

    with bn_play
        event_perform(ev_mouse,ev_left_press)

    if debug_autoplay 
    {
        debug_autoplay = false
        if varRead("pName") = "marcel" or varRead("pName") = "kyle"
            some_mode = "ffa"
        else
            some_mode = "tdm"
        start_matchmaking(some_mode)
    }
}

if in_match()
{

    //create sortable player grids. to be used like ---&gt;  kills, avatar_obj
    ds_grid_destroy(team_all)
    ds_grid_destroy(team0)
    ds_grid_destroy(team1)
    team_all = ds_grid_create(3,instance_number(avatar))
    team1 = ds_grid_create(3,floor(instance_number(avatar)/2))
    team0 = ds_grid_create(3,ceil(instance_number(avatar)/2))
    
    //give 3 seconds before populating team datastructures
    alarm[6] = 3*30
    

    varWrite("match_flag",FL_NEUTRAL)
    computed_winloss = false
    varWrite("winning_pName","")
    came_from_match = true
    objVarWrite(net_manager,"lost_gear",false)
    objVarWrite(net_manager,"stole_gear",false)

    lotto_ready = false
    
    if ds_exists(avatar_winners,ds_type_list)
        ds_list_destroy(avatar_winners)
    if ds_exists(avatar_losers,ds_type_list)
        ds_list_destroy(avatar_losers)
        
    avatar_winners = ds_list_create()
    avatar_losers = ds_list_create() 
    
    starting_match = starting_match_delay
    
    //randomize the seed used to calculate random numbers
    randomize()
    
    //stuff that should be reset when you enter a match
    match_countdown = -99
    win_countdown = -99
    gear_lost = false
    varWrite("end_match_coming",false)
    
    p1Stats = ds_map_create()
    p2Stats = ds_map_create()
    p3Stats = ds_map_create()
    p4Stats = ds_map_create()
    p5Stats = ds_map_create()
    p6Stats = ds_map_create()
    
    num_players = 1
    team = -1
    team_kills = 0
}


if room = rm_lobby and match_collapsed
{
    abort_match()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///compute lowest pnum
if room != rm_login
    compute_lowest_pnum()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///login screen ----&gt; create login UI elements
if room = rm_login
{
    room_speed = 60
    
    sendMessageReal("get_top_gravatars",1)
    popup_loading(WVIEW/2,HVIEW/2)
    
    var login_col_width = WVIEW/5
    var login_col_bdelay = 30*7
    var bn_yoff = HVIEW*1/3
    var bn_ysep = 64*1
    var bn_height = 64*0.8
    var bn_width = login_col_width*4/5
    var translation_lerp = 0.08
    {
        //LEFT HAND COLUMN
        login_col = instance_create(-1*login_col_width,0,modal_window)
        login_col.width = login_col_width
        login_col.height = HVIEW
        login_col.text_halign = fa_center
        login_col.text_valign = fa_top
        login_col.text_yoff = 64*1.5
        login_col.font = fnt_login
        login_col.header_height = 0//bn_height*2
        login_col.birth_delay = login_col_bdelay
        login_col.color = web_hsv(220,0,20)
        //login_col.header_color = web_hsv(220,50,20)
        //login_col.header_text_color = c_white
        login_col.text_color = c_white
        login_col.translation_xtarget = login_col_width
        login_col.translation_lerp = translation_lerp
        login_col.depth = 0
        login_col.highlightable = false
        login_col.text = "Log In"
        login_col.bind_global_xoff_to_translation_x = true
        login_col.alpha_max = 1
        login_col.wait_while_loading = true
        
        //gradient?
        login_col.draw_gradient = true
        login_col.grad1 = web_hsv(220,0,55)
        login_col.grad2 = login_col.grad1
        login_col.grad3 = web_hsv(220,0,10)
        login_col.grad4 = login_col.grad3
        
        //username input
        uname = instance_create(-1*login_col_width/2,bn_yoff+(bn_height+bn_ysep)*0,bn_input_field)
        uname.width = bn_width
        uname.height = bn_height
        uname.max_length = 20
        uname.birth_delay = login_col_bdelay
        uname.sequence = 1
        uname.randomize_username = true
        uname.is_username = true
        uname.text_default = "Player Name"
        uname.text = uname.text_default
        uname.translation_xtarget = login_col_width
        uname.translation_lerp = translation_lerp
        uname.depth = -10
        uname.color = web_hsv(220,0,55)
        uname.active_color = web_hsv(235,0,85)
        uname.text_color_input = c_black
        uname.text_color_default = c_white
        uname.wait_while_loading = true
        with uname modal_aligns()
        
        //password input
        pword = instance_create(-1*login_col_width/2,bn_yoff+(bn_height+bn_ysep)*1,bn_input_field)
        pword.width = bn_width
        pword.height = bn_height
        pword.max_length = 20
        pword.birth_delay = login_col_bdelay
        pword.sequence = 2
        pword.is_password = true
        pword.text_default = "Password"
        pword.text = pword.text_default
        pword.translation_xtarget = login_col_width
        pword.translation_lerp = translation_lerp
        pword.min_length = 6
        pword.depth = -10
        pword.auto_start = false
        pword.color = uname.color
        pword.active_color = uname.active_color
        pword.text_color_input = uname.text_color_input
        pword.text_color_default = uname.text_color_default
        pword.wait_while_loading = true
        with pword modal_aligns()
        
        //play button
        play = instance_create(-1*login_col_width/2,bn_yoff+(bn_height+bn_ysep)*2,bn_typical)
        play.width = bn_width
        play.height = bn_height
        play.max_length = 20
        play.birth_delay = login_col_bdelay
        play.translation_xtarget = login_col_width
        play.translation_lerp = translation_lerp
        play.submit_action = scr_submit_play
        play.can_press_enter = true
        play.can_press_enter_always = true
        play.depth = -10
        play.color = web_hsv(220,80,5)
        play.alpha_max = 0.925
        play.wait_while_loading = true
        with play modal_aligns()
        
        //randomize username button
        rand = instance_create(-1*login_col_width/2,room_height-bn_height/2-(login_col.width-bn_width)/2,bn_typical)
        rand.text = "Random Username"
        rand.width = bn_width
        rand.height = bn_height
        rand.max_length = 20
        rand.birth_delay = login_col_bdelay
        rand.translation_xtarget = login_col_width
        rand.translation_lerp = translation_lerp
        rand.submit_action = scr_randomize_username
        rand.can_press_enter = true
        rand.can_press_enter_always = true
        rand.depth = -10
        rand.color = web_hsv(220,0,9)
        rand.alpha_max = 0.925
        rand.wait_while_loading = true
        with rand modal_aligns()
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///random user creation</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///random user creation
if room = rm_login
    alarm[9] = 200
else
    alarm[9] = room_speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free ds lists
free_all_bparts_ds()
ds_list_destroy(armory_lists)

global.rank_colors = 0
global.rank_names = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomize seed
cout_str = ""
cout_maxchars = 2000

printf("::: GAME START CURRENT_TIME = "+string(current_time))
current_time_offset = current_time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///avatar popups and promoted,demoted
draw_set_font(fnt_hud_big)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_color(c_white)

var scale_tol = 0.25

if av_popup = noone
    av_popup_drawn = false
    
menu_mode = string(menu_mode)

if room = rm_login
{
    with gravatar
    {
        var yoff = 64*3.2-30
        var xoff = 16*string_length(string(varRead("pName")))/2
    
        draw_set_alpha(1)
        draw_namerank(capwords(varRead("pName")), varRead("rank"), x - xoff,y - yoff, 1, c_black)
    }

    for (var i=0; i&lt;instance_number(gravatar); i++)
    {
        ID = instance_find(gravatar,i)
        
        var yoff = 64*3.2-30
        var xoff = 16*string_length(string(objVarRead(ID,"pName")))/2
    
        if ID.hover_counter &gt; ID.hover_delay and not instance_exists(modal_dialogue)
        {
            if not drawing_grav_popup
            {
                audio_play_sound(snd_scroll3,2,false)
            }
            
            drawing_grav_popup = 2
            
            //DRAW THE PLAYER POPUP
            draw_player_popup_ext(cursor.x,cursor.y,capwords(objVarRead(ID,"pName")),objVarRead(ID,"rank"),objVarRead(ID,"global_rank"),objVarRead(ID,"true_skill"),
                objVarRead(ID,"helmet0"),objVarRead(ID,"hat0"),1,is_bot(ID))
        }
    }
}

if menmode() = "stats"
{
    with gravatar
    {
        var yoff = 64*4.5
        var xoff = 16*string_length(string(varRead("pName")))/2+32
    
        draw_set_alpha(1)
        draw_namerank(capwords(varRead("pName")), objVarRead(stat_manager,"rank"), x - xoff,y - yoff, 1, c_white)
    }
}

for (var i=0; i&lt;instance_number(avatar); i++)
{
    ID = instance_find(avatar,i)
    if ID.visible and menu_mode != "armory" and menu_mode != "stats" and real(objVarRead(ID,"pName")) != BAD_READ
    {
        if room = rm_menu
        {
            if menu_mode = "play"
                var yoff = 64*3.25
            else
                var yoff = 64*4.25
        }
        else var yoff = 64*3.2-30
        
        var xoff = 16*string_length(string(objVarRead(ID,"pName")))/2
        draw_set_alpha(1)
        draw_namerank(capwords(objVarRead(ID,"pName")), objVarRead(ID,"rank"), ID.x - xoff,ID.y - yoff, 1, c_white)
        //draw_text(ID.x,ID.y - 64*3,objVarRead(ID,"pName"))
        
        if DEBUG
            draw_text(ID.x,ID.y - 64*3.35, objVarRead(ID,"uniqueId"))
    }
    if av_popup = ID and menu_mode != "armory" and ID.visible and ID.hover_counter &gt; ID.hover_delay and not instance_exists(modal_dialogue)
    {
        if not av_popup_drawn
        {
            audio_play_sound(snd_scroll3,2,false)
            av_popup_drawn = true
        }
        
        //DRAW THE PLAYER POPUP
        draw_player_popup_ext(cursor.x,cursor.y,capwords(objVarRead(av_popup,"pName")),objVarRead(av_popup,"rank"),objVarRead(av_popup,"global_rank"),objVarRead(av_popup,"true_skill"),
            objVarRead(av_popup,"helmet0"),objVarRead(av_popup,"hat0"),1,is_bot(av_popup))
        
        //GET CLICKED!
        if not is_bot(ID) and not popup_exists() and (input_check_pressed(mapped_control(C_JUMP)) or mouse_check_button_pressed(mb_left)) and not lock_armory and menmode() != "armory"
        {
            show_player_stats(objVarRead(ID,"pName"))
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///real time step
real_time_step()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
if 1=0
{
    draw_set_color(c_white)
    draw_flash_compensate()
    draw_set_font(fnt_hud)
    draw_set_halign(fa_left)
    draw_set_valign(fa_middle)
    
    pinc = 0
    with player
    {
        draw_text(WVIEW*2/3,HVIEW*1/4+32*other.pinc,"Player "+playerName(id)+" pNum = "+string(varRead("pNum")))
        other.pinc ++
    }
    
    pinc = 0
    with avatar
    {
        draw_text(WVIEW*1/4,HVIEW*1/4+32*other.pinc,"Avatar "+playerName(id)+" pNum = "+string(varRead("pNum"))+", override = "+string(varRead("pNum_override")))
        other.pinc ++
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD
master_scale = 1*match_scale//HVIEW/768*match_scale

if in_match() and ((draw_killed_by and do_draw_killed_by) or (draw_you_killed and name_you_killed != ""))
{
    draw_set_font(fnt_splashscreen)
    draw_set_color(c_white)
    draw_flash_compensate()
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    var killer_name = objVarRead(local_player,"killer")
    
    if draw_you_killed and name_you_killed != ""
        killer_name = name_you_killed
    
    if killer_name != varRead("pName")
    {
        var killer_av = find_pname_avatar(killer_name)
        if instance_exists(killer_av)
        {
            var row_sep = 94
            var starty = HVIEW/12
            var head_space = 64
            var row2_xoff = -1/2*(head_space+string_width(string(killer_name)))
            
            with killer_av
                draw_avatar_head(WVIEW/2+row2_xoff,starty+row_sep,id,0,1,1,FL_NOBAR)
                
            var kill_txt = "You Were Killed By: "
            
            if draw_you_killed and name_you_killed != ""
                kill_txt = "You Killed: "
                
            draw_text(WVIEW/2,starty,kill_txt)
            draw_set_halign(fa_left)
            draw_text(WVIEW/2+row2_xoff+head_space,starty+row_sep,string(killer_name))
        }
    }
    else
        draw_text(0+WVIEW/2,0+HVIEW/4,"You Killed Yourself...")
}

if not match_ending()
{
    if (starting_match) and not instance_exists(modal_controls)
    {
        draw_set_font(fnt_splashscreen)
        draw_set_color(c_white)
        draw_set_halign(fa_center)
        draw_set_valign(fa_center)
        draw_text(0+WVIEW/2,0+HVIEW*1/4,"Starting Match . . . "+string(ceil(starting_match/30)))
        draw_text(0+WVIEW/2,0+72,string(game_mode_name(varRead("game_mode")))+" on "+string(global.map_names[room]))
    }
    
    //don't let killed by overlap with promoted text
    do_draw_killed_by = draw_killed_by
    
    if do_draw_killed_by
    {
        with action_word
        {
            if init_as_promoted
                net_manager.do_draw_killed_by = false
        }
    }
    
    if bot_override
    {
        /*if instance_exists(local_player) and in_match() and rtime() &gt; 30 
            and nth_frame(5*30)
        {
            objVarWrite(local_player,"rank",ceil(random_range(5,25)))   
        }*/
        draw_set_halign(fa_right)
        draw_set_valign(fa_top)
        draw_set_color(c_white)
        draw_set_font(fnt_hud)
        draw_flash_compensate()
        draw_set_alpha(0.8)
        draw_text(0+WVIEW-64,0+HVIEW-64,"AI Override")
    }
    
    if instance_exists(local_player)
    {
        if not instance_exists(modal_controls)
        {
            with local_player
            {
                if respawn_counter and not net_manager.starting_match and not hide_spawn_text
                    with other.id
                    {
                        draw_set_font(fnt_splashscreen)
                        draw_set_color(c_white)
                        draw_set_halign(fa_center)
                        draw_set_valign(fa_center)
                        if local_player.spawn_fail_message = ""
                            draw_text(0+WVIEW/2,0+HVIEW/2,"Respawning . . . "+string(ceil(local_player.respawn_counter/30)))
                        else
                            draw_text(0+WVIEW/2,0+HVIEW/2,local_player.spawn_fail_message+" "+string(ceil(local_player.respawn_counter/30)))
                    }
            }
    
            if instance_exists(local_player.weapon_contemplating) and not match_starting() and not match_ending()
            {
                printf("local_player = "+string(local_player))
                printf("local_player.weapon_contemplating = "+string(local_player.weapon_contemplating))
                //printf(room_counter+" --&gt; drawing weapon_contemplating")
                draw_weapon_slot(local_player.weapon_contemplating,0+WVIEW-sprite_get_width(spr_weapon_slot)/2*master_scale-border,0+(8+1.75*(sprite_get_height(spr_weapon_slot)+border+8))*master_scale,master_scale,1,FL_NORMAL)
                draw_set_color(c_white)
                draw_flash_compensate()
                draw_set_font(fnt_hud)
                draw_set_alpha(1)
                draw_set_halign(fa_right)
                draw_set_valign(fa_center)
                draw_text(0+WVIEW-sprite_get_width(spr_weapon_slot)*master_scale-border-10,0+(sprite_get_height(spr_weapon_slot)*1.75+border*2.25+2+8)*master_scale,"["+get_input_name(mapped_control(C_PICKUP))+"]")
            } //else printf("ERROR: no weapon_contemplating")
        }
        
        if local_player.weapon_wheel_alpha &gt; 0 and not match_starting() and not match_ending()
        {
            show_scores = 0
            draw_weapon_wheel(local_player,0+WVIEW/2,0+HVIEW/2,local_player.weapon_wheel_alpha, master_scale)
        }
    
        if instance_exists(objVarRead(local_player,"active_weapon")) and not match_starting() and not match_ending()
        {
            border = 16
            draw_weapon_slot(objVarRead(local_player,"active_weapon"),0+WVIEW-sprite_get_width(spr_weapon_slot)/2*master_scale-border,0+(sprite_get_height(spr_weapon_slot)/2+border+8)*master_scale,master_scale,1,FL_NORMAL)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///scores and win popups and starting match countdown
if win_countdown
    win_countdown --
    
if varRead("end_match_coming") and win_countdown &lt; -90
{
    win_countdown = match_countdown_max
}

if room = rm_lobby
{
    draw_set_font(fnt_hud_big)
    draw_set_color(c_black)
    draw_set_valign(fa_bottom)
    draw_set_halign(fa_center)
    if room_counter &gt; 30*5
    {
        if instance_exists(bn_vote) and menmode() = "lobby"
        {
            draw_set_alpha(bn_vote.alpha)
            draw_text(room_width/2,room_height/2+28,"Vote for Next Map")
            draw_set_alpha(1)
        }
    }
}
    
if ((show_scores &gt; 0) and not match_ending() or (room_counter &gt; 30*2 and room_counter &lt; 30*7)) and (in_match() and room_counter &gt; 30*3)//or room=rm_match_end
{
    var sy = HVIEW/2 - global.row_height*(instance_number(avatar)/2+2)
    var do_draw = true
    var dalph = 1
    if instance_exists(modal_controls)
    {
        sy += 72
        dalph = 0.7
        if modal_controls.mode_index != 0 or modal_controls.fade_out
        {
            do_draw = false
            show_scores = 0
        }
    }
        
    if not disable_scores and do_draw
    {
        draw_set_alpha(dalph)
        draw_score_table(WVIEW/2 - global.table_width/2, sy)
        draw_set_alpha(1)
    }
    //draw_scores(64,16)
}

if match_ending()
{
    if win_countdown &gt; match_countdown_max/2
    {
        //WIN POPUP
        //first figure out who won
        
        if varRead("game_mode") = "tdm"
        {
            if match_collapsed
            {
                av_head = find_pname_avatar(playerName(myPlayer()))
                
                if av_head != noone
                {
                    titulo = ""+objVarRead(av_head,"pName")+"'s Team"
                    subtitulo = "Won The Match"
                    win_color = team_color_pname(playerName(av_head))
                } else
                {
                    printf("ERROR: should not be getting tied match in draw_GUI_4 when match collapsed")
                    titulo = "The Match Is A Tie"
                    subtitulo = ""
                    win_color = c_dkgray
                }
            }
            else
            {
                if team_kill_total(team0) &gt; team_kill_total(team1)
                {
                    av_head = ds_grid_get(team0, 1, 0)
                } else if team_kill_total(team1) &gt; team_kill_total(team0)
                {
                    av_head = ds_grid_get(team1, 1, 0)
                } else 
                {
                    av_head = noone
                    win_color = c_dkgray
                }
                
                if av_head != noone
                {
                    win_color = team_color_pname(playerName(av_head))
                    titulo = ""+objVarRead(av_head,"pName")+"'s Team"
                    subtitulo = "Won The Match"
                } else
                {
                    titulo = "The Match Is A Tie"
                    subtitulo = ""
                    win_color = c_dkgray
                }
            }
        }
        else
        {
             if match_collapsed
            {
                av_head = find_pname_avatar(playerName(myPlayer()))
                
                if instance_exists(av_head)
                {
                    titulo = ""+objVarRead(av_head,"pName")
                    subtitulo = "Won The Match"
                    win_color = team_color_pname(playerName(av_head))
                } else
                {
                    printf("ERROR: should not be getting tied match (FFA) in draw_GUI_4 when match collapsed")
                    titulo = "The Match Is A Tie"
                    subtitulo = ""
                    win_color = c_dkgray
                }
            }
            else
            {
                av_head = ds_grid_get(team_all,1,0)
                
                if ds_grid_get(team_all,0,0) = ds_grid_get(team_all,1,0)
                {
                    av_head = noone
                }
                if av_head != noone
                {
                    titulo = ""+objVarRead(av_head,"pName")
                    subtitulo = "Won The Match"
                    win_color = team_color_pname(playerName(av_head))
                }
                else
                {
                    titulo = "The Match Is A Tie"
                    subtitulo = ""
                    win_color = c_dkgray
                }
            }
        }
        
        win_popup_scale = lerp_real(win_popup_scale,win_popup_scale_max,win_popup_lerp_real)
        win_popup_alpha = lerp_real(win_popup_alpha,win_popup_alpha_max,win_popup_lerp_real)
        draw_set_font(fnt_hud)
        //NOW DRAW THE WIN POPUP
        draw_win_popup_centered(WVIEW/2,HVIEW/2,win_popup_width,win_popup_height,win_color,win_popup_scale,win_popup_alpha,av_head,titulo,subtitulo)
    }
    else
    {
        if not disable_scores
            draw_score_table(WVIEW/2 - global.table_width/2, HVIEW/2 - global.row_height*(instance_number(avatar)/2+2))
    }
    
}

if room = rm_lobby and came_from_match and not lobby_match_countdown and  menu_mode != "lottery_steal" and menu_mode != "armory" and menu_mode != "challenges" and menu_mode != "settings" and menu_mode != "stats"
{
    if not disable_scores
        draw_score_table(WVIEW/2 - global.table_width/2, 64+armory_ysep+12)
}

if in_match() and not match_ending() and instance_exists(myAvatar()) and room_counter &gt; 30*3
{
    var av_head0, av_head1
    var score0, score1
    
    //DRAW HEADS WITH SCORES
    if varRead("game_mode") = "tdm"
    {
        av_head0 = ds_grid_get(team0,1,0)
        score0 = team_kill_total(team0)
        
        av_head1 = ds_grid_get(team1,1,0)  
        score1 = team_kill_total(team1) 
            
    }
    else
    {
        av_head0 = my_doll
        score0 = objVarRead(my_doll,"match_kills")
        
        //printf("av_head0 is "+objVarRead(av_head0,"pName"))
        //printf("av_head0 ("+objVarRead(av_head0,"pName")+") has "+objVarRead(av_head0,"match_kills")+" match_kills")
        
        av_head1 = ds_grid_get(team_all,1,0)
        if objVarRead(av_head1,"pName") = objVarRead(my_doll,"pName")
            av_head1 = ds_grid_get(team_all,1,1)
        
        score1 = objVarRead(av_head1,"match_kills")
        
        //printf("av_head1 is "+objVarRead(av_head1,"pName"))
        //printf("av_head1 ("+objVarRead(av_head1,"pName")+") has "+objVarRead(av_head1,"match_kills")+" match_kills")
        
        //print_ds_grid(team_all)
    }

    //you now have handles to both avatars whose heads you need to draw
    var head_scale = 1.15
    var head_width = sprite_get_width(spr_head)*2*head_scale
    var head_height = sprite_get_height(spr_head)*2*head_scale
    
    var xhead = armory_ysep*master_scale+head_width/2*master_scale
    var yhead = armory_ysep*master_scale+head_height/2*master_scale
    
    draw_avatar_head(xhead, yhead, av_head0, score0, head_scale*master_scale, 1, FL_NORMAL)
    draw_avatar_head(xhead+head_width*1*master_scale, yhead, av_head1, score1, head_scale*master_scale, -1, FL_NORMAL)
}

if lobby_match_countdown and room = rm_lobby
{
    draw_set_color(c_black)
    if varRead("lobby_wait_time")/30 &lt; 6
        draw_set_alpha(0.8 - max(0,(varRead("lobby_wait_time")/30)/6))
    else draw_set_alpha(0)
    draw_rectangle_colour(0,0,WVIEW,HVIEW,c_black,c_black,c_white,c_white,false)
    
    draw_set_color(c_white)
    draw_set_alpha(1)
    draw_set_font(fnt_menu)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_text(WVIEW/2,HVIEW/4,"Match Countdown ... "+string(ceil(varRead("lobby_wait_time")/30)))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///login screen
if room = rm_login
{
    draw_set_font(fnt_title)
    draw_set_color(c_white)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    var ts_lerp_real = 0.5
    var ts_target = 1
    
    var tit_y = 64*1.5
    
    title.x = room_width/2+global.xoff
    title.y = tit_y
    
    /*if instance_place(cursor.x,cursor.y,title)
        ts_target = title_scale_max
    else*/
        ts_target = title_scale_min
        
    title_scale = lerp_real(title_scale,ts_target,ts_lerp_real)
    
    if abs(title_scale - ts_target) &lt; 0.05
        title_scale = ts_target
        
    draw_text_ext_transformed(room_width/2+global.xoff,tit_y,"GRIEFER",32,room_width/2,title_scale,title_scale,0)
    
    if title_scale = title_scale_max
    {
        title_text_timer ++
        if title_text_timer &gt; 5
        {
            draw_set_font(fnt_hud)
            draw_set_color(c_black)
            draw_text_transformed(room_width/2+global.xoff,tit_y+64*1.5,"Grief Your Enemies . . . Grief Your Friends . . . Grief Yourself",global.notification_scale,global.notification_scale,0)
        }
    } else title_text_timer = 0

    if not instance_exists(modal_splat) and not login_when_ready
    {
        //create the splats
        random_set_seed(random_seed)
        var total_splats = 12
        var splats = 0
        var splats_per_step = 1
        var bdelay = 6
        var binc = 4
        var xextra = 64*3
        var yextra = 0
        var l = title.x-sprite_get_width(spr_title)/2-xextra-global.xoff
        var r = title.x+sprite_get_width(spr_title)/2+xextra-global.xoff
        var t = title.y-sprite_get_height(spr_title)/2-yextra
        var b = title.y+sprite_get_height(spr_title)/2+yextra
        
        while (splats &lt; total_splats)
        {
            repeat (splats_per_step)
            {
                splats++
                
                splat = instance_create(random_range(l,r),random_range(t,b),modal_splat)
                splat.bind_to_global_xoff = true

                //if rtime() &gt; 30*5
                //    bdelay = 0

                splat.birth_delay = bdelay
                splat.depth = 1
                splat.scale_born = 0
                splat.scale_lerp_real = 0.1
            }
            bdelay += binc
        }
        
        //RANDOMIZE THE GAME!
        randomize()
        random_set_seed(random(1000000))
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu and lobby

//menu-type room commonalities
if room = rm_menu or room = rm_lobby
{
    if varRead("game_mode") = "no_mode"
    {
        global.bg_color = c_white
    } else if room = rm_lobby
    {
        draw_set_font(fnt_hud_big)
        draw_set_color(c_black)
        draw_set_halign(fa_left)
        draw_set_valign(fa_bottom)
        draw_text(draw_edge_padding,room_height-draw_edge_padding,game_mode_name(varRead("game_mode")))
        draw_set_halign(fa_center)
    }
     /*   
    draw_set_color(make_color_rgb(60,60,60))
    draw_rectangle(0,0,room_width,64,false)
    draw_set_color(make_color_rgb(110,110,110))
    draw_rectangle(0,56,room_width,64,false)*/
    
    draw_set_font(fnt_hud_big)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_set_color(c_black)
    
    if room = rm_lobby and room_counter &gt; 30*3
    {
        draw_set_halign(fa_right)
        draw_set_valign(fa_bottom)
        draw_text(room_width-draw_edge_padding,room_height-draw_edge_padding,"Intermission ... "+string(ceil(varRead("lobby_wait_time")/30)))
    }
    
    if room = rm_menu and room_counter &gt; 30*2 and menmode() != "armory" and menmode() != "stats"
    {
        draw_set_halign(fa_left)
        draw_set_valign(fa_bottom)
        var ptxt = "Players Online"
        var pnums = varRead("players_online")
        if pnums = 1
            ptxt = "Player Online"
        draw_text(draw_edge_padding,room_height-draw_edge_padding,string(pnums)+" "+string(ptxt))
    }
    
}

//searching for match
if room = rm_menu and varRead("game_mode") != "no_mode"
{
    searching_msg = "Finding "
    draw_set_font(fnt_hud_big)
    draw_set_color(c_black)
    draw_set_halign(fa_right)
    draw_set_valign(fa_bottom)
    
    searching_msg += string(game_mode_name(varRead("game_mode")))+" . . ."
    draw_text(room_width-draw_edge_padding,room_height-draw_edge_padding,searching_msg)
    
    switch (varRead("game_mode"))
    {
        case "ffa":
            global.bg_color = make_color_rgb(200,200,255)
        break
        
        case "tdm":
            global.bg_color = make_color_rgb(200,255,200)
        break
        
        case "versus":
            global.bg_color = make_color_rgb(255,200,200)
        break
        
        case "bot_versus":
            global.bg_color = make_color_rgb(255,200,255)
        break
        
        case "bot_ffa":
            global.bg_color = make_color_rgb(200,255,255)
        break
        
        case "bot_tdm":
            global.bg_color = make_color_rgb(255,255,200)
        break
    }
    
}

if room = rm_menu or room = rm_lobby
{
    //no armor check
    var no_armor = true
    for (var i=0; i&lt;9; i++)
    {
        var handle = armory_lists[| i]
        var check = handle[| 0]
        if instance_exists(check)
        {
            if ds_list_size(handle) &gt; 1 or not check.disabled //will be one for the empty slot
                no_armor = false
        }
    }
    
    armor_msg = ""
    if saving_armor
    {
        armor_msg = "Saving Armor . . ."
        with bn_randomize
        {
            birth_delay = 5
            alpha = 0
        }
    } else if no_armor and menu_mode = "armory"
    {
        armor_msg = "You Have No Armor"
        with bn_randomize
        {
            birth_delay = 5
            alpha = 0
        }
    }
    
    //draw armor_msg
    draw_set_font(fnt_hud_big)
    draw_set_color(c_black)
    draw_set_halign(fa_right)
    draw_set_valign(fa_bottom)
    draw_text(room_width-draw_edge_padding,room_height-4.5*draw_edge_padding,armor_msg)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///armory
if (room = rm_menu or room = rm_lobby) and string(menu_mode) = "armory" and instance_exists(my_doll)
{ 
    grid_drawn = false
    drawing_grid_dir = 0
    if abs(my_doll.x - dude_x) &lt; 5 and abs(my_doll.y - dude_y) &lt; 5 
    {
        cache_center = room_width/2-armory_sl/2
        draw_armory_cache(global.cache,cache_center,cache_length,armor_ysep,1)
    
        //draw the first thing in each slot
        slotx = my_doll.x-armory_xoff-armory_sl
        sloty = my_doll.y - armory_yoff
        
        for (var i=0; i&lt;NUM_LIMBS; i++)
        {
            handle = armory_lists[| i]
            first_bpart = handle[| 0]
            bpart_ysync = armory_lists[| 0]
            bpart_ysync = bpart_ysync[| 0]
            
            if not instance_exists(first_bpart) or not instance_exists(bpart_ysync)
            {
                printf("ERROR: NO FIRST ARMORY BPART")
                return false
            }
            first_bpart.x = slotx
            first_bpart.y = sloty
            
            if first_bpart.disabled
                armory_disabled[i] = true
            else
                armory_disabled[i] = false
            
            /*if i = 4
            {
                printf("hat info in first slot: ")
                printf("exists? "+instance_exists(first_bpart))
                printf("obj index? "+first_bpart.object_index)
                printf(first_bpart.x+", "+first_bpart.y+", icon="+first_bpart.icon+", dis="+first_bpart.disabled)
            }*/
            
            draw_set_alpha(1)
            draw_bpart_slot_complete(first_bpart, first_bpart.x, first_bpart.y, 1)
            draw_mod_notification(first_bpart.x+64-global.moffset,first_bpart.y+global.moffset,first_bpart.icon)
            with first_bpart
            {
                if instance_place(x,y,cursor) and not other.id.grid_drawn
                {
                    hovering ++
                    cursor_highlight()
                    if hovering &gt; hover_delay
                    {
                        popup_alpha = lerp_real(popup_alpha,1,popup_lerp_real)
                        if other.id.armory_disabled[i] = false
                            draw_popup_with_drawer(x,y,name,string(global.name_rarity[rarity])+" "+lookup_limb_type_name(limb_type),source,compute_body_text_override(id),color,1,icon)
                        else with other.id
                        {
                            if ds_list_size(handle) &gt; 1
                            {
                                //printf("ds list size is: "+ds_list_size(handle))
                                with first_bpart
                                    draw_popup_with_drawer(x,y,"Right-Click to Enable","","","",c_dkgray,1,icon)
                            }
                        }
                    }
                        
                    if rightclick_pressed() or click_pressed() and not popup_exists() 
                    {
                    
                        //if not audio_is_playing(snd_pickup2)
                                audio_play_sound(snd_pickup2,2,false)
                    
                        with other.id
                        {
                            //disable this slot
                            armory_disabled[i] ^= 1
                            
                            if armory_disabled[i]
                            {
                                //send this item to the back of the list and make the first a new "disabled" body part
                                if ds_list_size(handle) &lt; NUM_BPARTS //and ds_list_size(handle) &gt; 1
                                {
                                    ID = instantiate_bpart(spr_helmet_none+i,global.src_disabled,handle)  //8+i is known to be the sprite_index for the spr_none that applies to this limb type
                                    ID.disabled = true
                                    handle[| ds_list_size(handle)-1] = first_bpart
                                    handle[| 0] = ID
                                } else if WARNINGS printf("WARNING: could not disable: no kick-back space")
                            } else {
                                if ds_list_size(handle) &gt; 1
                                {
                                //copy in the last item back to the front (overwriting the "disabled" body part)
                                handle[| 0] = handle[| ds_list_size(handle)-1]
                                ds_list_delete(handle,ds_list_size(handle)-1)
                                } else if WARNINGS printf("WARNING: could not enable: nothing to enable")
                            }
                            
                            sync_my_doll()
                        }
                    }
                    
                    with other.id
                    {
                        //should draw
                        if not armory_alphas[i] = 1
                            audio_play_sound(snd_scroll,2,false)
                            
                        armory_alphas[i] = 1//lerp_real(armory_alphas[i],1,0.25)
                        //compute grid coordinates
                        if first_bpart.x &lt; my_doll.x
                        {
                            grid_right = first_bpart.x
                            grid_top = bpart_ysync.y
                            grid_left = 0//first_bpart.x-4*armory_sl-4*armory_ysep
                            grid_bottom = grid_top+6*(armory_sl+armory_ysep)
                        } else {
                            grid_left = first_bpart.x+armory_sl
                            grid_top = bpart_ysync.y
                            grid_right = room_width//grid_left+4*armory_sl+4*armory_ysep
                            grid_bottom = grid_top+6*(armory_sl+armory_ysep)
                        }
                        
                        if i=8
                        {
                            grid_left = 0//first_bpart.x-5*(armory_sl+armory_ysep)
                            grid_right = room_width//first_bpart.x+6*(armory_sl+armory_ysep)
                            grid_top = first_bpart.y
                            grid_bottom = first_bpart.y+(armory_sl+armory_ysep)
                        }
                        
                    }
                }
                else
                {
                    with other.id
                    {
                        //should fade
                        tol = 5
                        if cursor.x &lt; grid_left-tol or cursor.x &gt; grid_right+tol or cursor.y &lt; grid_top-tol or cursor.y &gt; grid_bottom+tol
                        armory_alphas[i] = 0//lerp_real(armory_alphas[i],0,0.25)
                    }
                }
            }
            
            //GRID LABEL DRAWING AND STUFF
            if grid_lalphs[i] &lt; 1 and instance_exists(myAvatar()) 
                                  and abs(myAvatar().y - objVarRead(myAvatar(),"dude_y")) &lt; 0.5
                                  and abs(myAvatar().x - objVarRead(myAvatar(),"dude_x")) &lt; 0.5
                grid_lalphs[i] += lerp(grid_lalph_inc/max(i,1),grid_lalph_inc,0.5)
                
            if grid_lalphs[i] &gt; 1
                grid_lalphs[i] = 1
            
            var grid_lsize = ds_list_size(handle)
            /*for (var bp=0; bp&lt;ds_list_size(handle); bp++)
            {
                var inst = handle[| bp]
                if instance_exists(handle) and inst.object_index = bpart_generic and not inst.disabled
                {
                    grid_lsize++
                }
            }*/
            if grid_lsize &lt; 2
            {
                grid_lalphs[i] = -2*grid_lalph_inc
            }
            else
            {
                var off = 0.75*armory_sl
                var yoff = armory_sl/2
                var xoff = -1*off
                
                if first_bpart.x &gt; my_doll.x
                    xoff = armory_sl+off
                    
                draw_set_alpha(grid_lalphs[i])
                draw_prank_centered = true
                draw_player_rank("+"+string(grid_lsize-1),first_bpart.x+xoff,first_bpart.y+yoff,1.15*abs(lerp(grid_lalphs[i],1,0.2)))
                draw_set_alpha(1)
            }   
            
            if armory_alphas[i] &gt; 0.05
            {
                grid_drawn = true
                draw_set_font(fnt_hud_biggest)
                draw_set_halign(fa_center)
                draw_set_valign(fa_center)
                draw_set_color(c_white)
                
                yoff = -14
                
                if first_bpart.x &gt; my_doll.x
                {
                    xoff = armory_sl*2.5+2*armory_ysep
                    drawing_grid_dir = 1
                    for (var g=4; g&lt;8; g++)
                    {
                        grid_lalphs[g] = -2*grid_lalph_inc
                    }
                }
                else if i != 8
                {
                    xoff = -1*(armory_sl*1.5+2*armory_ysep)
                    drawing_grid_dir = -1
                    for (var g=0; g&lt;4; g++)
                    {
                        grid_lalphs[g] = -2*grid_lalph_inc
                    }
                }
                else if i = 8
                {
                    drawing_grid_dir = 2
                    grid_lalphs[8] = -2*grid_lalph_inc
                }
                
                if drawing_grid_dir = 1
                {
                    with bn_randomize
                    {
                        alpha = 0
                        birth_delay = 5
                    }   
                }
                    
                if i=8
                {
                    yoff = -32
                    xoff = armory_sl/2
                    draw_set_color(c_black)
                }
                  
                draw_set_alpha(1)
                draw_text(first_bpart.x+xoff,grid_top+yoff,lookup_limb_type_name(first_bpart.limb_type))
                draw_set_color(c_white)
                
                if show_grid != armory_lists[| i]
                {
                    show_grid_counter = 0
                    show_grid = armory_lists[| i]
                }
                
                if (i&lt;NUM_LIMBS-1)
                {
                    draw_armory_grid(armory_lists[| i],first_bpart.x,bpart_ysync.y,armory_sl, armory_ysep, armory_alphas[i])
                }
                else
                {
                    draw_prop_grid(armory_lists[| i], first_bpart.x, first_bpart.y, armory_sl, armory_ysep, armory_alphas[i])
                }
            }
            
            sloty += armory_sl+armory_ysep
            if (i=3)
            {
                slotx = my_doll.x+armory_xoff
                sloty = my_doll.y - armory_yoff
            }
            
            if (i=7)
            {
                slotx = my_doll.x+props_xoff
                sloty = my_doll.y+props_yoff
            }
            
        }
    }    
}
else if not in_match()
{
    for (var i=0; i&lt;NUM_LIMBS; i++)
    {
        grid_lalphs[i] = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw lottery/seal
if lotto_counter &gt; lotto_delay and instance_exists(xp_bar.aw)
{
    if string(menu_mode) = "lottery_steal" and room = rm_lobby and xp_bar.aw.popped_in
    {
        steal_y = 96
        lottery_x = xp_bar.lottery_x
        lottery_y = xp_bar.lottery_y
        spr_attempts_max = 12
        
        draw_set_font(fnt_hud_big)
        draw_set_color(c_white)
        draw_set_halign(fa_center)
        draw_set_valign(fa_center)
        
        draw_text(lottery_x,lottery_y-24,"Armor Lottery:")
        
        //draw the lottery when it is time
        if mode_counter &lt; mode_total-steal_time
        {
    
            //draw each individual slot --&gt; randomize, but then decide for each one as it becomes time
            lotto_slot_index = 0
            for (lotto_slot_index=0; lotto_slot_index&lt;3; lotto_slot_index++)
            {
                dat_spr_do = spr_none
                spr_attempts = 0
                while (dat_spr_do = spr_none and spr_attempts &lt; spr_attempts_max)
                {
                    //grab a random lotto-based sprite (not challenge based)
                    lotto_index = floor(random_range(spr_armor_placeholder1+1, spr_armor_placeholder2-0.1))
                    if string(bpart_lookup(lotto_index,global.BPART_SOURCE)) = global.src_lotto
                    {
                        dat_spr_do = lotto_index
                        break
                    }
                }
                
                slot_xoff = lottery_x-armory_sl*lotto_slot_scale[lotto_slot_index]/2
                var spacer = armory_ysep*4
                slot_yoff = lottery_y+64*4-(armory_sl*lotto_slot_scale[lotto_slot_index]/2)-spacer-(armory_sl*lotto_slot_scale[lotto_slot_index])+lotto_slot_index*(armory_sl*lotto_slot_scale[lotto_slot_index]+spacer)
            
                if mode_counter &gt; lottery_time-lottery_calc_time-lotto_slot_index*lotto_comein_offset
                {
                    //draw the slot in progress
                    lotto_slot_scale[lotto_slot_index] = lerp_real(lotto_slot_scale[lotto_slot_index],slot_scale_deciding,slot_lerp_real)
                    draw_lotsteal_slot_thinking(slot_xoff,slot_yoff,lotto_slot_scale[lotto_slot_index],1,dat_spr_do)
                    if not audio_is_playing(snd_scroll3)
                        audio_play_sound(snd_scroll3,1,false)
                }
                else
                {
                    if mode_counter = lottery_time-lottery_calc_time-lotto_slot_index*lotto_comein_offset
                    {
                        if not instance_exists(bpart_lotto[lotto_slot_index])
                            audio_play_sound(snd_item_blah,3,false)
                        else
                            audio_play_sound(snd_item_new,3,false)
                    }
                    lotto_slot_scale[lotto_slot_index] = lerp_real(lotto_slot_scale[lotto_slot_index],slot_scale_decided,slot_lerp_real)
                    //draw the finalized slot
                    if not instance_exists(bpart_lotto[lotto_slot_index])
                    {
                        draw_bpart_slot_disabled_ext(slot_xoff, slot_yoff, lotto_slot_scale[lotto_slot_index], 1)
                    } else
                    {
                        //we're good --&gt; draw the finalized slot
                        bpart_lotto[lotto_slot_index].x = slot_xoff
                        bpart_lotto[lotto_slot_index].y = slot_yoff
                        draw_bpart_slot_complete_ext(bpart_lotto[lotto_slot_index],slot_xoff,slot_yoff,lotto_slot_scale[lotto_slot_index],1)
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn controls
if menu_mode = "settings" and not in_match() and not instance_exists(modal_controls)
{
    spawn_controls()
    //draw_sprite_ext(spr_controls,-1,room_width/2,room_height/2,0.75,0.75,0,c_white,1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///compute/show connection
if show_connection
{
    //compute connection
    var sent_this_frame = 0
    while (packets_sent &lt; packets_to_send and sent_this_frame &lt; packets_per_frame)
    {
        transmissions++
        sendMessageReal("ping",packets_sent)
        sent_this_frame ++
        packets_sent ++
    }
    
    if packets_received &lt; packets_to_send
    {
        frames_elapsed ++
    } else 
    {
        test_complete_counter ++
        if truncate(packets_received/frames_elapsed,2) &lt; packets_per_frame and packets_per_frame &gt; 10 and test_complete_counter &gt; intertest_delay
        {
            packets_per_frame -= lossless_resolution
            packets_sent = 0
            packets_received = 0
            frames_elapsed = 0
            test_complete_counter = 0
        }
    }
    
    draw_set_color(c_black)
    draw_set_alpha(1)
    draw_set_font(fnt_hud)
    draw_set_halign(fa_left)
    var vsep = 20
    var xoff = cursor.x+42
    var yoff = cursor.y+48+vsep*2
    /*draw_text(xoff,yoff+vsep*-1,"-----------------------------")
    draw_text(xoff,yoff,"Connection Test")
    draw_text(xoff,yoff+vsep*1,"-----------------------------")
    draw_text(xoff,yoff+vsep*2,"Packets Sent: "+packets_sent)
    draw_text(xoff,yoff+vsep*3,"Packets Received: "+packets_received)
    draw_text(xoff,yoff+vsep*4,"Frames Elapsed: "+frames_elapsed)
    draw_text(xoff,yoff+vsep*5,"Transmitted Per Frame: "+packets_per_frame)
    draw_text(xoff,yoff+vsep*6,"Received Per Frame: "+truncate(packets_received/frames_elapsed,2))*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///compute/show trans rate
if show_trans_rate
{
    trans_frames++
    if trans_frames &gt; trans_period
    {
        trans_rate = truncate(transmissions/trans_period,2)
        trans_frames = 0
        transmissions = 0
        
        rec_rate = truncate(receptions/trans_period,2)
        receptions = 0
    }
    
    draw_set_color(c_black)
    draw_set_alpha(1)
    draw_set_font(fnt_hud)
    draw_set_halign(fa_left)
    var vsep = 20
    var xoff = cursor.x+42
    var yoff = cursor.y-64
    draw_text(xoff,yoff+vsep*-2,"FPS: "+fps)
    draw_text(xoff,yoff+vsep*-1,"-----------------------------")
    draw_text(xoff,yoff,"Netdata Statistics")
    draw_text(xoff,yoff+vsep*1,"-----------------------------")
    draw_text(xoff,yoff+vsep*2,"Transmission Rate: "+trans_rate+" ppf")
    draw_text(xoff,yoff+vsep*3,"Reception Rate: "+rec_rate+" ppf")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw server disconnected
if not server_found
{
    draw_alert(cursor.x,cursor.y,"Connection Failed","","Press [ANY KEY] to Retry",c_red)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show cout if desired
if show_cout
{
    draw_set_alpha(0.55)
    draw_set_font(fnt_cout)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_set_color(c_dkgray)
    draw_rectangle(0,0,room_width/2,room_height,false)
    draw_set_color(c_white)
    draw_set_alpha(1)
    draw_text_ext(20,10,cout_str,14,room_width/2-35)
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle debug stats
show_debug_stats ^= 1
show_debug_overlay(show_debug_stats)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle full screen
do_toggle = true

with modal_dialogue
{
    if is_tutorial  
        other.do_toggle = false
}

if do_toggle
{
    global.gc[GC_FULLSCREEN,1] = toggle_truthval(global.gc[GC_FULLSCREEN,1])
    window_set_fullscreen(truthval(global.gc[GC_FULLSCREEN,1]))
    save_setting(GC_FULLSCREEN)
}
else
{
    audio(snd_denied,1)
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="89">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle show trans rate
if keyboard_check(vk_control)
{
    use_nth_frame ^= 1
}
else
{
    show_trans_rate ^= 1
    trans_rate_previous = 0
    trans_rate = 0
    transmissions = 0
    trans_frames = 0
    receptions = 0
    rec_rate = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle show connection
show_connection ^= 1
packets_per_frame = ppf_starting
packets_sent = 0
packets_received = 0
frames_elapsed = 0
test_complete_counter = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle show_cout
show_cout ^= 1

//draw_set_swf_aa_level(draw_get_swf_aa_level() ^ 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="46">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bots play dead
with player
    play_dead ^= 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomize splat
seed++
simple_popup(string(seed),string(seed))
splat_constants(seed)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomizer
if room = rm_login
{
    random_seed++
    printf("::: ADJUSTED RANDOM_SEED --&gt; "+string(random_seed))
    
    random_set_seed(random_seed)
    
    with modal_splat
        instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="35">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bot override

bot_override ^= 1

if instance_exists(local_player)
{
    objVarWrite(local_player,"bot",bot_override)  
    printf("ERROR (not): writing local_player.bot to "+string(bot_override))
}

if keyboard_check(vk_shift)
{
    create_random_users ^= 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="33">
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create other menu looking thing

ID = spawn_controls()
ID.behave_match = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show in-match settings

//if in_match()
if not instance_exists(modal_controls) and in_match() and not match_ending()
{
    view_wview = 1365
    view_hview = 9/16*1365
    
    cxoff = view_xview+view_wview/2
    cyoff = view_yview+view_hview/2

    view_scaler = 1

    //calculate x offset percentages (percent of view_width away from middle of screen)
    view_xoffset = -1*(view_xview+floor(view_wview/2)-cxoff)/(floor(view_wview/2))
    
    //constrain maximum x offset to 1
    if abs(view_xoffset)&gt;1 
    view_xoffset = sign(view_xoffset)
    
    //calculate y offset percentages (percent of view_width away from middle of screen)    
    view_yoffset = -1*(view_yview+floor(view_hview/2)-cyoff)/(floor(view_hview/2))
    
    //constrain maximum y offset to 1
    if abs(view_yoffset)&gt;1 
    view_yoffset = sign(view_yoffset)
    
    // add up to 1/3 of the view's height/width depending on offset percentages
    if instance_exists(local_player) and not match_starting()
    {
        xtest = floor(local_player.x+16-floor(view_wview/2)+floor(view_xoffset*view_wview*1/3*view_scaler))
        ytest = floor(local_player.y+16-floor(view_hview/2)+floor(view_yoffset*view_hview*1/3*view_scaler))
    }
    else
    {
        xtest = view_xview
        ytest = view_yview
    }
    
    if not global.using_gamepad or not objVarRead(local_player,"alive") or net_manager.match_countdown or net_manager.starting_match or abs(xtest-view_xview) &gt; 3 or (gamepad_axis_check(global.devno,gp_axisrh) or gamepad_axis_check(global.devno,gp_axisrv))
        view_xview=xtest
    if not global.using_gamepad or not objVarRead(local_player,"alive") or net_manager.match_countdown or net_manager.starting_match or abs(ytest-view_yview) &gt; 3 or (gamepad_axis_check(global.devno,gp_axisrh) or gamepad_axis_check(global.devno,gp_axisrv))
        view_yview=ytest
    
     // make sure the adjusted view doesn't go outside the room
    if view_xview &lt; 0 
    view_xview = 0
    
    if view_xview &gt; (room_width-view_wview)
    view_xview = room_width-view_wview
    
    if view_yview&lt;0 
    view_yview = 0
    
    if view_yview &gt; (room_height-view_hview)
    view_yview = room_height-view_hview
    
    spawn_controls()
}
else
{
    with modal_controls fade_out = true
    show_scores = false
}

/*
full_screen = false
window_set_fullscreen(full_screen)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///retry server connection
if not server_found
{
    griefer_restart()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
