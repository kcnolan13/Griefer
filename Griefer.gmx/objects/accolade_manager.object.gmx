<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_orange_helmet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
num_accolades = 28
spawned_grid = false

chev_left = NO_HANDLE
chev_right = NO_HANDLE

x = -100
y = -100

netvars = ds_map_create()

computed_match_end_accs = false
match_end_accs = false

acc_popup_id = noone

//in match offsets
match_xoff = 64*1.15
match_yoff = 64*2.75
acc_width = sprite_get_width(acc_dub_kill)/2+24
match_hsep = 24
stats_hsep = 0
grid_hsep = match_hsep
grid_vsep = grid_hsep
bg = NO_HANDLE

//stat mode scrolling variables
grid_left = room_width/2-64*3.5+38
grid_right = room_width-64*2.5
grid_ymid = room_height/2+64*4.5-6
grid_xmid = average2(grid_left,grid_right)
grid_width = abs(grid_right-grid_left)
accolade_xmin = grid_left
accolade_xmax = grid_right

acc_match_scale = 1.5

sradius = 64
sindex = 0
sindex_min = 0
sindex_max = 0
sspeed = 4

//accolade grid ---&gt; | name | text | description | image | points | match_total | competitive_total | bot_mode_total | needed | challenge_needed | challenge_stat_flag | sound
grid = ds_grid_create(12,num_accolades+91-65+1)

var row_num = 0
init_grid_row('dub_kill','Double Kill','2 Kills Back-to-Back',acc_dub_kill,50,2,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('trip_kill','Triple Kill','3 Kills Back-to-Back',acc_trip_kill,100,3,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('stick_kill','Stick Kill','Sticky Kill',acc_stick_kill,12.5,1,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('flash_bandicoot','Flash Bandicoot','3 Stuns Without Dying',acc_flash_bandicoot,50,3,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('flame_kill','Pyro','Flame Grenade Kill',acc_flame_kill,12.5,1,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('ink_kill','Poison Kill','Poison Grenade Kill',acc_ink_kill,12.5,1,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('cant_touch_dis',"Can't Touch Dis",'3 Kills Taking No Damage',acc_cant_touch_dis,75,3,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('mvp','MVP','Most Points in Match',acc_mvp,50,0,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('highest_kd','Highest KDR','Highest Kill/Death Ratio in Match',acc_highest_kd,50,0,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('10kd','Smooth Operator','10+ Kills, No Deaths',acc_10kd,150,10,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('ninja','Ninja','Survive for 60 Seconds Without Taking Damage',acc_ninja,50,60,5,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('survivor','Survivor','Survive a Near-Death-Experience',acc_survivor,25,0,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('3ass','Assistant','3 Assists Without Dying',acc_3ass,50,3,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('5ass','Team Player','5 Assists Without Dying',acc_5ass,100,5,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('3gibs','Eviscerator','3 Dismemberments Without Dying',acc_3gibs,50,3,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('6gibs','Jack the Ripper','6 Dismemberments Without Dying',acc_6gibs,150,6,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('9gibs','Cruel and Unusual','9 Dismemberments Without Dying',acc_9gibs,225,9,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('12gibs','Isaac Clarke','12 Dismemberments Without Dying',acc_12gibs,300,12,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('3heads','Hat Trick','3 Headshots Without Dying',acc_3heads,75,3,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('6heads','Double Hat Trick','6 Headshots Without Dying',acc_6heads,200,6,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('9heads','Triple Hat Trick','9 Headshots Without Dying',acc_9heads,275,9,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('12heads','Jason Bourne','12 Headshots Without Dying',acc_12heads,400,12,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('3ks','3 Kill Streak','3 Kills Without Dying',acc_3ks,50,3,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('5ks','5 Kill Streak','5 Kills Without Dying',acc_5ks,75,5,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('10ks','10 Kill Streak','10 Kills Without Dying',acc_10ks,100,10,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('15ks','15 Kill Streak','15 Kills Without Dying',acc_15ks,175,15,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('20ks','20 Kill Streak','20 Kills Without Dying',acc_20ks,250,20,99,FL_NORMAL,snd_promoted,row_num) row_num++
init_grid_row('25ks','25 Kill Streak','25 Kills Without Dying',acc_25ks,400,25,99,FL_NORMAL,snd_promoted,row_num) row_num++

//weapon accolades --&gt; not to be awarded as accolades, but used for challenge progression tracking
wep_kills_needed = 1
evil_row_num = row_num
init_grid_row('spr_flame','text','descr',spr_none,0,25*wep_kills_needed,25*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_ink','text','descr',spr_none,0,25*wep_kills_needed,25*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_snare','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_smoke','text','descr',spr_none,0,10*wep_kills_needed,10*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_flashbang','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_pistol','text','descr',spr_none,0,5*wep_kills_needed,5*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_carbine','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_rifle','text','descr',spr_none,0,10*wep_kills_needed,10*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_tickler','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_smg','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_sticky','text','descr',spr_none,0,25*wep_kills_needed,25*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_lmg','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_longshot','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_vulcan','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_torque','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_thumper','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_boltok','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_shotgun','text','descr',spr_none,0,50*wep_kills_needed,50*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_stomper','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_boom','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_frag','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_rocket','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_double','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_wep1','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_wep2','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_wep3','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++
init_grid_row('spr_wep4','text','descr',spr_none,0,20*wep_kills_needed,20*wep_kills_needed,FL_COMPETITIVE,snd_promoted,row_num) row_num++

ds_grid_sort(grid,COL_POINTS,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free grid memory

if ds_exists(grid,ds_type_grid)
    ds_grid_destroy(grid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///print grid to screen sometimes

if nth_frame(5*30)
{
    //print_ds_grid(grid)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>manage in-match accolades</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///manage end-of-match accolades
if in_match() and match_ending() and not spawned_grid
{
    if not match_end_accs and not computed_match_end_accs
    {
        match_end_accs = true
        //note that this function actually awards the accolades as needed
        match_end_accolades()
        spawn_grid_delay = 1*30
    }
    
    if spawn_grid_delay &gt; 0
    {
        spawn_grid_delay --
    }
    else
    {
        spawned_grid = true
        printf("::: creating match end accolade grid")
        with accolade_generic instance_destroy()
        
        grid_hsep = match_hsep
        create_accolade_grid(64*1.5,64*1.5,match_xoff+acc_width*3+match_hsep*2,HVIEW,fa_left,fa_center,5,COL_MATCH_TOTAL,false)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>manage stat page modals</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///manage accolade grid

if not in_match() and room != rm_login
{
    if net_manager.menu_mode = "stats"
    {
        
        if acc_popup_id != noone
        {
            going_to_switch_can_draw = true
            with accolade_generic
            {
                if show_popup and id=accolade_manager.acc_popup_id
                    other.going_to_switch_can_draw = false
            }
            if going_to_switch_can_draw
                acc_popup_id = noone
        }
        
        if not instance_exists(accolade_generic)
        {
            spawned_grid = false
        }
        switch (stat_manager.stat_tab)
        {
            case "Leaderboards":
                spawned_grid = false
                fade_modal(accolade_generic)
                fade_modal(bg)
                fade_modal(chev_left)
                fade_modal(chev_right)
            break
            
            default:
                if accolades_received() and not spawned_grid
                {
                    var bg_yoff = 10
                    
                    if not instance_exists(bg)
                    {
                        bg = instance_create(grid_xmid,grid_ymid+bg_yoff,modal_window)
                        bg.highlightable = false
                        bg.alpha_max = 0.7
                        bg.halign = fa_center
                        bg.valign = fa_center
                        bg.width = grid_width+64
                        bg.height = 102
                        bg.birth_delay = 15
                        with (bg) modal_aligns()
                        bg.color = c_black
                        //bg.header_text = global.accolade_name+"s"
                        bg.header_yoff = 8
                        bg.header_font = fnt_hud
                        bg.header_text_color = c_white
                        bg.menu_mode = "stats"
                    }
                    
                    var chev_width = bg.height/2
                    var chev_delay = 30
                   
                    if not instance_exists(chev_left) and not instance_exists(chev_right)
                    {
                        chev_left = instance_create(grid_left-chev_width*1.5,grid_ymid+bg_yoff,bn_typical)
                        chev_left.submit_action = scroll_accolades
                        chev_left.chevron_left = true
                        chev_left.width = chev_width
                        chev_left.height = bg.height
                        chev_left.text = ""
                        chev_left.image = icon_chevron_lr
                        chev_left.img_index = 0
                        chev_left.image_stretch = false
                        chev_left.birth_delay = chev_delay
                        chev_left.menu_mode = "stats"
                        
                        chev_right = instance_create(grid_right+chev_width*1.5,grid_ymid+bg_yoff,bn_typical)
                        chev_right.submit_action = scroll_accolades
                        chev_right.chevron_right = true
                        chev_right.width = chev_width
                        chev_right.height = bg.height
                        chev_right.text = ""
                        chev_right.image = icon_chevron_lr
                        chev_right.img_index = 1
                        chev_right.image_stretch = false
                        chev_right.birth_delay = chev_delay+10
                        chev_right.menu_mode = "stats"
                    }
                    
                    spawned_grid = true
                    var col = COL_TOTAL
                    if stat_manager.stat_tab = stat_manager.tabs[1]
                       col =  COL_BOT_TOTAL
                       
                    grid_hsep = stats_hsep
                    create_accolade_grid(grid_left+24,grid_ymid,grid_right,room_height,fa_left,fa_center,0,col,true)
                    with accolade_generic
                    {
                        menu_mode = "stats"
                    }
                }
                
                //update that stupid scrollable grid
                update_scrollable_accolade_grid()
            break
        }
    }
    else //not in stats mode
    {
        spawned_grid = false
        fade_modal(accolade_generic)
        fade_modal(bg)
        fade_modal(chev_left)
        fade_modal(chev_right)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear accolade match totals
spawned_grid = false
spawn_grid_delay = 0
computed_match_end_accs = false
match_end_accs = false

if in_match()
{
    clear_accolade_totals(MATCH_TOTAL)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///free grid memory

if ds_exists(grid,ds_type_grid)
    ds_grid_destroy(grid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw chevrons and crap

/*
if instance_exists(bg) and bg.popped_in
{
    draw_set_color(c_white)
    var chevscale = 1.5
    if chevright_highlighted
        chevscale *= 1.5
        
    draw_sprite_ext(chevron,-1,grid_right,grid_ymid,chevscale,chevscale,-90,c_white,1)
    
    chevscale = 1.5
    if chevleft_highlighted
        chevscale *= 1.5
    
    draw_sprite_ext(chevron,-1,grid_left,grid_ymid,chevscale,chevscale,90,c_white,1)
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
